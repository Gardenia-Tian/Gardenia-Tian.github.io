{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/features/nvwu.svg","path":"features/nvwu.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/features/profile.jpg","path":"features/profile.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/features/shiliu.svg","path":"features/shiliu.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/features/zhihu.svg","path":"features/zhihu.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-16x16.png","path":"icons/favicon-16x16.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-32x32.png","path":"icons/favicon-32x32.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/404.1a6cd5bd.css","path":"static/css/404.1a6cd5bd.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/app.0d31776f.css","path":"static/css/app.0d31776f.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/categories.10e2be12.css","path":"static/css/categories.10e2be12.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/chunk-libs.eebac533.css","path":"static/css/chunk-libs.eebac533.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/post.9f951a60.css","path":"static/css/post.9f951a60.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/page.749ad047.css","path":"static/css/page.749ad047.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/archives.c0d49bd5.css","path":"static/css/archives.c0d49bd5.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/result.10e2be12.css","path":"static/css/result.10e2be12.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/tags.10e2be12.css","path":"static/css/tags.10e2be12.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/img/default-cover.df7c128c.bkp.jpg","path":"static/img/default-cover.df7c128c.bkp.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/about.024aacd1.js","path":"static/js/about.024aacd1.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/404.00d640a8.js","path":"static/js/404.00d640a8.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/app.6d2c358d.js","path":"static/js/app.6d2c358d.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/archives.574ac664.js","path":"static/js/archives.574ac664.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/categories.90aa5475.js","path":"static/js/categories.90aa5475.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/chunk-libs.dc6146cd.js","path":"static/js/chunk-libs.dc6146cd.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/page.a02618ad.js","path":"static/js/page.a02618ad.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/post.cebfbaa4.js","path":"static/js/post.cebfbaa4.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/result.39470350.js","path":"static/js/result.39470350.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/tags.2ad613f5.js","path":"static/js/tags.2ad613f5.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/about.32dfa3b0.css","path":"static/css/about.32dfa3b0.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/img/default-cover.df7c128c.jpg","path":"static/img/default-cover.df7c128c.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/covers/1.jpg","path":"covers/1.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/img/Combi.jpg","path":"static/img/Combi.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/img/default-cover.df7c128c.bkp2.jpg","path":"static/img/default-cover.df7c128c.bkp2.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/covers/22-11-22随笔.jpg","path":"covers/22-11-22随笔.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/img/default-cover.df7c128c.bkp3.jpg","path":"static/img/default-cover.df7c128c.bkp3.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/covers/rCUDA学习笔记.png","path":"covers/rCUDA学习笔记.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/covers/弱小和无知不是生存的障碍，傲慢才是.jpg","path":"covers/弱小和无知不是生存的障碍，傲慢才是.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/covers/世界没有变糟糕,只不过是我长大了.jpg","path":"covers/世界没有变糟糕,只不过是我长大了.jpg","modified":0,"renderable":1},{"_id":"source/about/index/image-20230212114218907.png","path":"about/index/image-20230212114218907.png","modified":0,"renderable":0},{"_id":"node_modules/hexo-theme-aurora/source/covers/about.png","path":"covers/about.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Optimize-Cache.md","hash":"6e807b47208310e715593a0ccc9d95c467df55df","modified":1668754409687},{"_id":"source/_posts/启程.md","hash":"f7b03ceca69fbae2bdb0645a0de67240492415bb","modified":1668754651934},{"_id":"source/categories/index.md","hash":"7e3ec27f79b763e5a924a3a7b43e50f77b8523d4","modified":1668134838972},{"_id":"source/about/index.md","hash":"ea0b03b67ed5952bedd3ea05916934fa4b9a68ce","modified":1677201787459},{"_id":"source/tags/index.md","hash":"4767c7493033a7d163a4e9a71395c985779c5c05","modified":1667980692841},{"_id":"source/friends/index.md","hash":"99d1278aba0e4e53c40caa49e0b9ae5d868d3ecd","modified":1667980696349},{"_id":"source/_posts/启程/1.jpg","hash":"6e1666fcc2f5549d317433f2349447a8ce260ac1","modified":1668327972517},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":499162500000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":499162500000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":499162500000},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":499162500000},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":499162500000},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":499162500000},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":499162500000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":499162500000},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":499162500000},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":499162500000},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":499162500000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":499162500000},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":499162500000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":499162500000},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":499162500000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":499162500000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":499162500000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":499162500000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":499162500000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":499162500000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":499162500000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":499162500000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":499162500000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":499162500000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":499162500000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":499162500000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":499162500000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":499162500000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":499162500000},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":499162500000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":499162500000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":499162500000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":499162500000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":499162500000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":499162500000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":499162500000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":499162500000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":499162500000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":499162500000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":499162500000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":499162500000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":499162500000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":499162500000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":499162500000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":499162500000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":499162500000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":499162500000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":499162500000},{"_id":"public/search.xml","hash":"73c2185a96bc3a70e7fe053fb700aef4147d4c78","modified":1677216023864},{"_id":"public/about/index.html","hash":"5f099c4491388497a74704efba6de8a3b9165ac2","modified":1668751189526},{"_id":"public/categories/index.html","hash":"3d088b89dd9d3deede9890b9ea360e362df69efb","modified":1668751054296},{"_id":"public/tags/index.html","hash":"5f099c4491388497a74704efba6de8a3b9165ac2","modified":1668751189526},{"_id":"public/friends/index.html","hash":"3427822458352864c8ef30fb48255d8ee055196a","modified":1668751054296},{"_id":"public/post/Optimize-Cache.html","hash":"5f099c4491388497a74704efba6de8a3b9165ac2","modified":1668751189526},{"_id":"public/post/启程.html","hash":"5f099c4491388497a74704efba6de8a3b9165ac2","modified":1668751189526},{"_id":"public/categories/清浅录/index.html","hash":"554db3692e1837de2ef66d8b5357caf9ab2a90f6","modified":1668751054296},{"_id":"public/categories/陶然集/index.html","hash":"3086042cbb9348b3d7696eb68ac13b28bb479d0a","modified":1668751054296},{"_id":"public/archives/index.html","hash":"5f099c4491388497a74704efba6de8a3b9165ac2","modified":1668751189526},{"_id":"public/archives/2022/index.html","hash":"493562eb3325ea435b1a05c5390d4c44af74418e","modified":1668751054296},{"_id":"public/archives/2022/11/index.html","hash":"018b7482f134caf68e67d9bfeaae7aa2b054acde","modified":1668751054296},{"_id":"public/tags/课程/index.html","hash":"f66ddfc7e52f90144de5940329311b97389fcebe","modified":1668751054296},{"_id":"public/tags/体系结构/index.html","hash":"ad4ba07d5effcf1ae0d4d2b33b54d838f243d37c","modified":1668751054296},{"_id":"public/index.html","hash":"5f099c4491388497a74704efba6de8a3b9165ac2","modified":1668751189526},{"_id":"public/tags/存储/index.html","hash":"546dd4bd9c1934f37f2b3e8845caf4c88f2aa7c2","modified":1668751054296},{"_id":"public/tags/随笔/index.html","hash":"5d5c293c3a158f97229b95ae919e7e58fe3268be","modified":1668751054296},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1668751054296},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1668751054296},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1668751054296},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1668751054296},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1668751054296},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1668751054296},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1668751054296},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1668751054296},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1668751054296},{"_id":"public/post/启程/1.jpg","hash":"6e1666fcc2f5549d317433f2349447a8ce260ac1","modified":1668751054296},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1668751054296},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1668751054296},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1668751054296},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1668751054296},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1668751054296},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1668751054296},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1668751054296},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1668751054296},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1668751054296},{"_id":"public/css/style.css","hash":"3986ef4b1f56bf0ac3bc45aab261e0278794c3f1","modified":1668751054296},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1668751054296},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1668751054296},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1668751054296},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1668751054296},{"_id":"node_modules/hexo-theme-aurora/.browserslistrc","hash":"db215b841182d2af3259a1c1d6e1957bca333970","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/CHANGELOG.md","hash":"e68f3af8af17d326a48e1b317e01d7429193217e","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/CHANGELOG_CN.md","hash":"5d13c251e8b77fd86870da50f3be98f8822edc66","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/jest.config.js","hash":"425f08cb718a56630ce61ae0686f35c55ef565df","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/package.json","hash":"542ed1125b5d072592f96c97258cda096875075f","modified":1668047032290},{"_id":"node_modules/hexo-theme-aurora/data/cn.yml","hash":"4f5dcc1e2953df7a8e4e683c1a9115f6e0041f5e","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/index.js","hash":"2a3c62a860581ee6813ca4bcaa7c952f614e818c","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/_config.yml","hash":"ac4d64b64f93c70cf1e32712e09a2ea0b49c6fde","modified":1668133601221},{"_id":"node_modules/hexo-theme-aurora/README.md","hash":"c50f58b08b75780990c18ab85761e3e24aac0d90","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/LICENSE","hash":"21cf269018b0cf04e1126b6b9b1a5e6af7c5e61f","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/features/nvwu.svg","hash":"7280a1f5d36caaa4a24d0782938f1f0b67f97eb5","modified":1668051954465},{"_id":"node_modules/hexo-theme-aurora/source/features/profile.jpg","hash":"ef3319727c30aff819283bb7a4f837e9d38932cc","modified":1668825213268},{"_id":"node_modules/hexo-theme-aurora/layout/index.ejs","hash":"94732830a65b718d2fa506b8598df44f14399fd8","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/features/zhihu.svg","hash":"9a23d09f95a1c2fe6b89de4d92927dddc7ae8f4e","modified":1668050316233},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/filters/index.js","hash":"5eacff9446dd6c9a7eb0a0c84be9187055440454","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/category.js","hash":"0ae21ffcf6e471ebfb72ac62a833991fae86ec8a","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/index.js","hash":"dfbb0fdbf990bd67684ed891a4aaa1fd8dcd23f2","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/page.js","hash":"1be54ea9cdf8e293e67bf457075fcdd8a72b8779","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/post.js","hash":"76c3268e8b6887fb1fd11c4d71004aad9dc215fc","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/search.js","hash":"a2a636e1df76efdcaca37226b490afa539ce766b","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/site.js","hash":"b5f5ce813b4b0b322eceb11b036dc65201604256","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/statistic.js","hash":"1c641956e15cec96490de16a88ccc7bec0c9d5c4","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/tag.js","hash":"975e79e73d2503a33dbc63655b948100cc46d44f","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/mapper.js","hash":"7a99508d910321b90b4afa0df02ad90f62336901","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/symbols-count-time.js","hash":"d1a81e31b2988edcdf4b4761cec7326a980f097a","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/toc.js","hash":"5c7348c550ef7f164d492847801a360cdefc60a2","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/truncate-html.js","hash":"49d4832af027eabe5b8383a24e66dceae761533e","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/utils.js","hash":"93ff75f0e35a1dc40d5406cc097f5988dd820600","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/injector/index.js","hash":"7ca562ea3af3068ee925b5a8afdce0eaa1e15e64","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/.circleci/config.yml","hash":"534051be311581f69aa8287120275a04539290e4","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/data/en.yml","hash":"7bbd6c0da0ae2f93f8a786a3be77fbe4e95a787e","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/404.1a6cd5bd.css","hash":"a7a4d83756520d8f6c410ac0ffe9a45d63868113","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/categories.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/chunk-libs.eebac533.css","hash":"41226b6c29aadcc6190fe7c2c4c37464855b8453","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/post.9f951a60.css","hash":"8e360582d745d6483fdfc18c46f75897b44721a6","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/result.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/tags.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/archives.c0d49bd5.css","hash":"c56213315c57254d0a6e6301ef24c2186fef4d2b","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/img/default-cover.df7c128c.bkp.jpg","hash":"1934ace0c6f2397d15729f9b08cc4d42e45bf437","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/features/shiliu.svg","hash":"0c05d1ccb70107dc0fb046ca5f4798905c94d8f8","modified":1668052193274},{"_id":"node_modules/hexo-theme-aurora/source/static/js/about.024aacd1.js","hash":"7ce2b3f7d232dd3b3930ac993bb841452e2cde89","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/404.00d640a8.js","hash":"74f1da9e0f953e73e4fe1a6554433f56fdcdf54d","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/archives.574ac664.js","hash":"fbb094fb4f7a01bffd6975aca27142935bfdca73","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/categories.90aa5475.js","hash":"0dde3d731fc665962a4c330338a2c663c330be26","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/page.749ad047.css","hash":"6fcf0e6f3c628954c5f8105791e0e7f3e6512da6","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/page.a02618ad.js","hash":"db775fbfbaa1cf8bbf4cc4f2b0a869519d508e3a","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/post.cebfbaa4.js","hash":"53586f9dab5886a366e9397eb17088e74af5cde1","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/result.39470350.js","hash":"f6f5ab2ca7274dad169ec600a419d1a2aeb2347c","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/tags.2ad613f5.js","hash":"4f49139e435788710115fc884dc26a5b1e0d4833","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/app.0d31776f.css","hash":"43b43acd76bd8dc22f34cc49c7e026c45c3a5004","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/app.6d2c358d.js","hash":"e176c20c22ce36e38935f463977e9b89b281c715","modified":1668602852165},{"_id":"node_modules/hexo-theme-aurora/source/static/css/about.32dfa3b0.css","hash":"614ef7c4e52877c76ffddb26192bf8fffddcb8d8","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/img/default-cover.df7c128c.jpg","hash":"0ba52f97ef6fa71a4dd78880e629804f2260c5fe","modified":1670550500194},{"_id":"node_modules/hexo-theme-aurora/source/static/js/chunk-libs.dc6146cd.js","hash":"534266637d09abf39278f4d3a21bd36728740105","modified":499162500000},{"_id":"public/api/posts/1.json","hash":"de816a5dc9d52bf2e06c3745a6420b7ce50b81cd","modified":1677216023864},{"_id":"public/api/articles/Optimize-Cache.json","hash":"a6303d8aeac866822d11ebe42eda8254512812a8","modified":1671614409679},{"_id":"public/api/articles/启程.json","hash":"88286844daa621f2344efaa42db1ef4394ce2063","modified":1677201802178},{"_id":"public/api/features.json","hash":"06bcec11e33af1348d468fcb9780bbed631a6226","modified":1677216023864},{"_id":"public/api/authors/blog-author.json","hash":"cc7a1a941be23780d097e9c52ffda05e1035efef","modified":1677216023864},{"_id":"public/api/categories.json","hash":"5a72b5c5ae7781f012afb5f74dc69e98d1043594","modified":1677201802178},{"_id":"public/api/site.json","hash":"7ace3b0f619ec127db1fd5f99d31f49bbbff0c6f","modified":1677216023864},{"_id":"public/api/categories/清浅录.json","hash":"f7eb777c2d1d67bfc5ef993124a98532bbe0a098","modified":1677201802178},{"_id":"public/api/categories/陶然集.json","hash":"492674fc146b6e04a686bf692a0ca534bd63c3d5","modified":1676197115405},{"_id":"public/api/tags.json","hash":"3ab19f6b674fce84e9995ed2f6b40c77053cb2de","modified":1677201802178},{"_id":"public/api/tags/体系结构.json","hash":"7a768a4016cd286743c971be14849ff3a51199d9","modified":1677201802178},{"_id":"public/api/tags/课程.json","hash":"bed0a326d3c143f90261f727bf84cfae94c8b522","modified":1671614409679},{"_id":"public/api/tags/存储.json","hash":"8cfebeb4d163b79f37198e879a1b05e504b26153","modified":1671614409679},{"_id":"public/api/tags/随笔.json","hash":"8a6df6019fbbb64ca21936ff844f9a9b75994413","modified":1676197115405},{"_id":"public/api/pages/about/index.json","hash":"8ecd458e38fd649bf3d6b44c397b5131e3803cf0","modified":1677201802178},{"_id":"public/api/pages/tags/index.json","hash":"317bfb36a77c2708a677364751fbca9df4bd0a66","modified":1668751189526},{"_id":"public/api/pages/friends/index.json","hash":"029504c0acda3018397beb2c6411402f76f58cb6","modified":1668751189526},{"_id":"public/api/pages/categories/index.json","hash":"cef7d307430a1da4e19f0c86b1b07542310862c5","modified":1668751189526},{"_id":"public/api/statistic.json","hash":"35f004a1e1298f72e7b17204f6dad6105a54261d","modified":1677216023864},{"_id":"public/api/search.json","hash":"c5ed12c732436808db46cd74f6d178f46cecbeae","modified":1677216023864},{"_id":"public/page/categories/index.html","hash":"5f099c4491388497a74704efba6de8a3b9165ac2","modified":1668751189526},{"_id":"public/page/friends/index.html","hash":"5f099c4491388497a74704efba6de8a3b9165ac2","modified":1668751189526},{"_id":"public/page/tags/index.html","hash":"5f099c4491388497a74704efba6de8a3b9165ac2","modified":1668751189526},{"_id":"public/tags/search/index.html","hash":"5f099c4491388497a74704efba6de8a3b9165ac2","modified":1668751189526},{"_id":"public/features/nvwu.svg","hash":"7280a1f5d36caaa4a24d0782938f1f0b67f97eb5","modified":1668751189526},{"_id":"public/features/zhihu.svg","hash":"9a23d09f95a1c2fe6b89de4d92927dddc7ae8f4e","modified":1668751189526},{"_id":"public/features/profile.jpg","hash":"ef3319727c30aff819283bb7a4f837e9d38932cc","modified":1668825221672},{"_id":"public/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":1668751189526},{"_id":"public/features/shiliu.svg","hash":"0c05d1ccb70107dc0fb046ca5f4798905c94d8f8","modified":1668751189526},{"_id":"public/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":1668751189526},{"_id":"public/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":1668751189526},{"_id":"public/static/img/default-cover.df7c128c.bkp.jpg","hash":"1934ace0c6f2397d15729f9b08cc4d42e45bf437","modified":1668751189526},{"_id":"public/static/css/404.1a6cd5bd.css","hash":"a7a4d83756520d8f6c410ac0ffe9a45d63868113","modified":1668751189526},{"_id":"public/static/css/categories.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1668751189526},{"_id":"public/static/img/default-cover.df7c128c.jpg","hash":"0ba52f97ef6fa71a4dd78880e629804f2260c5fe","modified":1670550521061},{"_id":"public/static/css/chunk-libs.eebac533.css","hash":"41226b6c29aadcc6190fe7c2c4c37464855b8453","modified":1668751189526},{"_id":"public/static/css/post.9f951a60.css","hash":"8e360582d745d6483fdfc18c46f75897b44721a6","modified":1668751189526},{"_id":"public/static/css/page.749ad047.css","hash":"6fcf0e6f3c628954c5f8105791e0e7f3e6512da6","modified":1668751189526},{"_id":"public/static/css/tags.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1668751189526},{"_id":"public/static/css/result.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1668751189526},{"_id":"public/static/css/archives.c0d49bd5.css","hash":"c56213315c57254d0a6e6301ef24c2186fef4d2b","modified":1668751189526},{"_id":"public/static/js/about.024aacd1.js","hash":"7ce2b3f7d232dd3b3930ac993bb841452e2cde89","modified":1668751189526},{"_id":"public/static/js/404.00d640a8.js","hash":"74f1da9e0f953e73e4fe1a6554433f56fdcdf54d","modified":1668751189526},{"_id":"public/static/js/archives.574ac664.js","hash":"fbb094fb4f7a01bffd6975aca27142935bfdca73","modified":1668751189526},{"_id":"public/static/js/categories.90aa5475.js","hash":"0dde3d731fc665962a4c330338a2c663c330be26","modified":1668751189526},{"_id":"public/static/js/page.a02618ad.js","hash":"db775fbfbaa1cf8bbf4cc4f2b0a869519d508e3a","modified":1668751189526},{"_id":"public/static/js/post.cebfbaa4.js","hash":"53586f9dab5886a366e9397eb17088e74af5cde1","modified":1668751189526},{"_id":"public/static/js/result.39470350.js","hash":"f6f5ab2ca7274dad169ec600a419d1a2aeb2347c","modified":1668751189526},{"_id":"public/static/js/tags.2ad613f5.js","hash":"4f49139e435788710115fc884dc26a5b1e0d4833","modified":1668751189526},{"_id":"public/static/css/about.32dfa3b0.css","hash":"614ef7c4e52877c76ffddb26192bf8fffddcb8d8","modified":1668751189526},{"_id":"public/static/css/app.0d31776f.css","hash":"43b43acd76bd8dc22f34cc49c7e026c45c3a5004","modified":1668751189526},{"_id":"public/static/js/chunk-libs.dc6146cd.js","hash":"534266637d09abf39278f4d3a21bd36728740105","modified":1668751189526},{"_id":"public/static/js/app.6d2c358d.js","hash":"e176c20c22ce36e38935f463977e9b89b281c715","modified":1668751189526},{"_id":"source/_posts/Reproducibility-Badges.md","hash":"4e06785a4247694ae0994bb655afb8cce1c6b826","modified":1668771801116},{"_id":"source/_posts/Reproducibility-Badges/1.png","hash":"6a86a81e4984b7b5301863173dcd8afe5ae0d920","modified":1668751478119},{"_id":"public/api/articles/Reproducibility-Badges.json","hash":"22a574b3ef2727102491dcd8de76c93ae8015583","modified":1677201802178},{"_id":"public/api/categories/清浅集.json","hash":"6d87cbd0346beaeb8f610d83c27dd57fb1684628","modified":1677216023864},{"_id":"public/api/tags/conference.json","hash":"4fb0cadff3136c7e304c6e1655a3c5f064a945d1","modified":1677201802178},{"_id":"public/api/tags/SC.json","hash":"ede828bee8030a18897a07d209d0213d857c6722","modified":1677201802178},{"_id":"public/post/Reproducibility-Badges.html","hash":"5f099c4491388497a74704efba6de8a3b9165ac2","modified":1668751632342},{"_id":"public/post/Reproducibility-Badges/1.png","hash":"6a86a81e4984b7b5301863173dcd8afe5ae0d920","modified":1668751632342},{"_id":"node_modules/hexo-theme-aurora/source/static/img/1.jpg","hash":"6e1666fcc2f5549d317433f2349447a8ce260ac1","modified":1668327972517},{"_id":"public/static/img/1.jpg","hash":"6e1666fcc2f5549d317433f2349447a8ce260ac1","modified":1668753142305},{"_id":"node_modules/hexo-theme-aurora/source/features/1.jpg","hash":"6e1666fcc2f5549d317433f2349447a8ce260ac1","modified":1668327972517},{"_id":"public/features/1.jpg","hash":"6e1666fcc2f5549d317433f2349447a8ce260ac1","modified":1668754589865},{"_id":"node_modules/hexo-theme-aurora/source/covers/1.jpg","hash":"6e1666fcc2f5549d317433f2349447a8ce260ac1","modified":1668327972517},{"_id":"public/covers/1.jpg","hash":"6e1666fcc2f5549d317433f2349447a8ce260ac1","modified":1668754660807},{"_id":"source/_posts/SC22-Scalable-Irregular-Parallelism-with-GPUs.md","hash":"859bcd119a37c91d77828bd954ebcac299c3d377","modified":1668850685562},{"_id":"public/api/articles/SC22-Scalable-Irregular-Parallelism-with-GPUs.json","hash":"bf4819af9405a6bc6212f7db63d40c136f4cfb9d","modified":1669002172811},{"_id":"public/post/SC22-Scalable-Irregular-Parallelism-with-GPUs.html","hash":"5f099c4491388497a74704efba6de8a3b9165ac2","modified":1668775479034},{"_id":"public/api/categories/知鱼集.json","hash":"ee39c7f693c678a03404303f156ac4038b18f441","modified":1669002172811},{"_id":"public/api/tags/SC22.json","hash":"7e166a3dce0792083c80e9e03fafbfd035674516","modified":1669002172811},{"_id":"source/_posts/RDMA技术解读.md","hash":"c8d38f920431283128053fffd4f16261221361a2","modified":1668779176671},{"_id":"source/_posts/RDMA技术解读/image-20221118211652713.png","hash":"7de51f2b86cc3e174cd9e2291bd1a2b065d4b2be","modified":1668777412743},{"_id":"source/_posts/RDMA技术解读/image-20221118211907180.png","hash":"a18ad2994d9888caea828d435b0c3c562bed4964","modified":1668777547216},{"_id":"source/_posts/RDMA技术解读/image-20221118212411801.png","hash":"d4ca777495aa5ba5499069bacc59ea818624d1f5","modified":1668777851853},{"_id":"source/_posts/RDMA技术解读/image-20221118211738044.png","hash":"302685f9d1614c62f96775eed3a2eb94b814dc7d","modified":1668777458092},{"_id":"public/api/articles/RDMA技术解读.json","hash":"f6156085455d0c123d5767747704232736d861a6","modified":1677201802178},{"_id":"public/api/tags/网络.json","hash":"41cecdc993a00d3ac463c0dcb9d5fd367d64d682","modified":1677201802178},{"_id":"public/post/RDMA技术解读.html","hash":"5f099c4491388497a74704efba6de8a3b9165ac2","modified":1668778889526},{"_id":"public/post/RDMA技术解读/image-20221118211652713.png","hash":"7de51f2b86cc3e174cd9e2291bd1a2b065d4b2be","modified":1668778889526},{"_id":"public/post/RDMA技术解读/image-20221118211907180.png","hash":"a18ad2994d9888caea828d435b0c3c562bed4964","modified":1668778889526},{"_id":"public/post/RDMA技术解读/image-20221118211738044.png","hash":"302685f9d1614c62f96775eed3a2eb94b814dc7d","modified":1668778889526},{"_id":"public/post/RDMA技术解读/image-20221118212411801.png","hash":"d4ca777495aa5ba5499069bacc59ea818624d1f5","modified":1668778889526},{"_id":"node_modules/hexo-theme-aurora/source/static/img/default-cover.df7c128c.bkp2.jpg","hash":"d48ebddbc7626fff7bd35e84dc06624275f9df36","modified":1668136076524},{"_id":"node_modules/hexo-theme-aurora/source/static/img/Combi.jpg","hash":"c75611731c2215ec5023b186cca7d0dd3bdddfa6","modified":1668780003668},{"_id":"public/static/img/default-cover.df7c128c.bkp2.jpg","hash":"d48ebddbc7626fff7bd35e84dc06624275f9df36","modified":1668780108465},{"_id":"public/static/img/Combi.jpg","hash":"c75611731c2215ec5023b186cca7d0dd3bdddfa6","modified":1668780108465},{"_id":"source/_posts/为linux设置回收站.md","hash":"d03451ef75895c6d21260b7ca5c694e9da5981ef","modified":1669002263923},{"_id":"source/_posts/SC22-Scalable-Irregular-Parallelism-with-GPUs/image-20221119103756683.png","hash":"dcd4aa662a4dbc8446eb3db2a0ba1ff35b9b3cf8","modified":1668825476689},{"_id":"source/_posts/SC22-Scalable-Irregular-Parallelism-with-GPUs/image-20221119103705866.png","hash":"9669ff8712e5eb78593b99ddd36bb344aecb77a0","modified":1668825425868},{"_id":"source/_posts/SC22-Scalable-Irregular-Parallelism-with-GPUs/image-20221119155749599.png","hash":"574991cfd489ada699aa2e65982c74105c135440","modified":1668844669642},{"_id":"public/api/articles/为linux设置回收站.json","hash":"ef5ff420eb61e93e784893e56328db1fbf09db05","modified":1677201802178},{"_id":"public/api/tags/Linux.json","hash":"7f4276cb8d5717e9096c546a9feb7aa7e397950a","modified":1677201802178},{"_id":"public/api/tags/系统管理.json","hash":"cb7d4fdf819c4518c3391da99a4d243d5e4b099d","modified":1677201802178},{"_id":"public/post/为linux设置回收站.html","hash":"5f099c4491388497a74704efba6de8a3b9165ac2","modified":1669002172811},{"_id":"public/post/SC22-Scalable-Irregular-Parallelism-with-GPUs/image-20221119103756683.png","hash":"dcd4aa662a4dbc8446eb3db2a0ba1ff35b9b3cf8","modified":1669002172811},{"_id":"public/post/SC22-Scalable-Irregular-Parallelism-with-GPUs/image-20221119103705866.png","hash":"9669ff8712e5eb78593b99ddd36bb344aecb77a0","modified":1669002172811},{"_id":"public/post/SC22-Scalable-Irregular-Parallelism-with-GPUs/image-20221119155749599.png","hash":"574991cfd489ada699aa2e65982c74105c135440","modified":1669002172811},{"_id":"source/_posts/2022-11-22随笔.md","hash":"4df5b0c2bcb6fad7220951195cfbf109201157ce","modified":1669084217907},{"_id":"source/_posts/2022-11-22随笔/22-11-22随笔.jpg","hash":"86c411ffa122a276bb4ff958fd55b26ba8b7fab8","modified":1669083793260},{"_id":"node_modules/hexo-theme-aurora/source/covers/22-11-22随笔.jpg","hash":"86c411ffa122a276bb4ff958fd55b26ba8b7fab8","modified":1669083753709},{"_id":"public/api/articles/2022-11-22随笔.json","hash":"88bab5d2e627f6dc74ca3a5677e7423f8e0bf366","modified":1677201802178},{"_id":"public/post/2022-11-22随笔.html","hash":"5f099c4491388497a74704efba6de8a3b9165ac2","modified":1669084225392},{"_id":"public/covers/22-11-22随笔.jpg","hash":"86c411ffa122a276bb4ff958fd55b26ba8b7fab8","modified":1669084225392},{"_id":"public/post/2022-11-22随笔/22-11-22随笔.jpg","hash":"86c411ffa122a276bb4ff958fd55b26ba8b7fab8","modified":1669084225392},{"_id":"source/_posts/rCUDA学习笔记.md","hash":"07cb06b5fd2b8639ec62ebfc0f5d74867ad90547","modified":1670641166581},{"_id":"source/about/index.html","hash":"645bf21ee2bd4833a6801b95516f59901d016061","modified":1669280857777},{"_id":"public/api/articles/rCUDA学习笔记.json","hash":"bafeed386c0cb90f48deca87795f0620d3e35d48","modified":1677201802178},{"_id":"public/api/pages/about/index.html","hash":"2a11a1c338b22b4fa848aae086dc6fb1abe74e0a","modified":1670549956163},{"_id":"public/post/rCUDA学习笔记.html","hash":"5f099c4491388497a74704efba6de8a3b9165ac2","modified":1670549956163},{"_id":"public/page/about/index.html","hash":"5f099c4491388497a74704efba6de8a3b9165ac2","modified":1670549956163},{"_id":"node_modules/hexo-theme-aurora/source/static/img/default-cover.df7c128c.bkp3.jpg","hash":"302fc424be1f07c0f50a34122abc1e3046511490","modified":1668779951171},{"_id":"public/static/img/default-cover.df7c128c.bkp3.jpg","hash":"302fc424be1f07c0f50a34122abc1e3046511490","modified":1670550521061},{"_id":"source/_posts/rCUDA学习笔记/image-20221210105200418.png","hash":"b40e3d105ffcc38cecca8440904bb72f1b75565e","modified":1670640720429},{"_id":"public/api/categories/索道集.json","hash":"4d537bbcc0515013cfa031e0dcc03f20d34669e1","modified":1677201802178},{"_id":"public/api/tags/GPU.json","hash":"c6dbfc0510f56f35802dd79ee806902dbd0e7e55","modified":1677201802178},{"_id":"public/api/tags/CUDA.json","hash":"797c4e9d2b140c1b0b88975bb2fea4d84bf2a7be","modified":1677201802178},{"_id":"public/post/rCUDA学习笔记/image-20221210105200418.png","hash":"b40e3d105ffcc38cecca8440904bb72f1b75565e","modified":1670640938619},{"_id":"node_modules/hexo-theme-aurora/source/covers/rCUDA学习笔记.png","hash":"b40e3d105ffcc38cecca8440904bb72f1b75565e","modified":1670640720429},{"_id":"public/covers/rCUDA学习笔记.png","hash":"b40e3d105ffcc38cecca8440904bb72f1b75565e","modified":1670641174144},{"_id":"source/_posts/世界没有变糟糕-只不过是我长大了.md","hash":"80a19f85d6e7a43ec412571b13592a43a881223c","modified":1671072777605},{"_id":"source/_posts/弱小和无知不是生存的障碍，傲慢才是.md","hash":"9744a68c89b2d621f8c53630966d3d8b62a8599a","modified":1671072677767},{"_id":"public/api/articles/弱小和无知不是生存的障碍，傲慢才是.json","hash":"a75fe71e9193314dd34fbaf7212d7b6310c7a25c","modified":1677201802178},{"_id":"public/api/articles/世界没有变糟糕-只不过是我长大了.json","hash":"a4d933cfaca884c4ff9929788cd47dc1d616d70d","modified":1677201802178},{"_id":"public/post/弱小和无知不是生存的障碍，傲慢才是.html","hash":"5f099c4491388497a74704efba6de8a3b9165ac2","modified":1671071968148},{"_id":"public/post/世界没有变糟糕-只不过是我长大了.html","hash":"5f099c4491388497a74704efba6de8a3b9165ac2","modified":1671071968148},{"_id":"node_modules/hexo-theme-aurora/source/covers/弱小和无知不是生存的障碍，傲慢才是.jpg","hash":"38ae8846f9a08873a2e359db0939126691c1b1fb","modified":1671072085329},{"_id":"public/covers/弱小和无知不是生存的障碍，傲慢才是.jpg","hash":"38ae8846f9a08873a2e359db0939126691c1b1fb","modified":1671072194745},{"_id":"node_modules/hexo-theme-aurora/source/covers/世界没有变糟糕,只不过是我长大了.jpg","hash":"8d94944f9157849dc74568ec44292032165d246b","modified":1671072754306},{"_id":"public/covers/世界没有变糟糕,只不过是我长大了.jpg","hash":"8d94944f9157849dc74568ec44292032165d246b","modified":1671072782389},{"_id":"source/_posts/Ray学习笔记.md","hash":"9d1b49e6fa8f7617743edc97fba912f58a17798d","modified":1671616046765},{"_id":"public/api/articles/Ray学习笔记.json","hash":"c5e857b509c3ad26a50dc75e3fcbadea9708a355","modified":1677201802178},{"_id":"public/api/tags/计算框架.json","hash":"570288c9cb49b6bd899e493904170c50d970e4be","modified":1677201802178},{"_id":"public/post/Ray学习笔记.html","hash":"5f099c4491388497a74704efba6de8a3b9165ac2","modified":1671614409679},{"_id":"source/_posts/Ray学习笔记/image-20221221174102006.png","hash":"5a9ec1a01dcae2b0597194aab28a77ec473be8ca","modified":1671615662026},{"_id":"public/post/Ray学习笔记/image-20221221174102006.png","hash":"5a9ec1a01dcae2b0597194aab28a77ec473be8ca","modified":1671615917487},{"_id":"source/_posts/Optimize-Cache/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1672629899572},{"_id":"source/_posts/弱小和无知不是生存的障碍，傲慢才是/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1672629899572},{"_id":"source/_posts/世界没有变糟糕-只不过是我长大了/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1672629899572},{"_id":"source/_posts/为linux设置回收站/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1672629899572},{"_id":"source/_posts/CTR-prediction.md","hash":"ed7326ce0a09330512043d4c25f72584fab68296","modified":1676008647422},{"_id":"public/api/articles/CTR-prediction.json","hash":"620630e7d9721c660d4d69fd0fcc57aca2adf487","modified":1677201802178},{"_id":"public/api/tags/推荐系统.json","hash":"43aa71cbfe3b4baa8c2d882d932a8ddc1f387247","modified":1676008655350},{"_id":"public/api/tags/机器学习.json","hash":"ff027fea64dbad7ab94d8dc81fcf90a2f6472207","modified":1676008655350},{"_id":"public/api/tags/神经网络.json","hash":"22e254734d16b5c5abe682df47375b9b79664253","modified":1676008655350},{"_id":"public/api/tags/人工智能.json","hash":"0125a9924452a9906295e413a5fe4b6b80d7571d","modified":1676008655350},{"_id":"public/post/CTR-prediction.html","hash":"5f099c4491388497a74704efba6de8a3b9165ac2","modified":1676008405715},{"_id":"public/page/2/index.html","hash":"5f099c4491388497a74704efba6de8a3b9165ac2","modified":1676008405715},{"_id":"source/about/index/image-20230212114218907.png","hash":"7d605dc8df5d35f27c11fbda360ae4f64dda0ac2","modified":1676173569831},{"_id":"public/about/index/image-20230212114218907.png","hash":"7d605dc8df5d35f27c11fbda360ae4f64dda0ac2","modified":1676173710384},{"_id":"source/_posts/Nsight-Compute使用不完全记录.md","hash":"045bd81fe96237579b70778bd85a1861aa58af7b","modified":1676196996457},{"_id":"public/api/articles/Nsight-Compute使用不完全记录.json","hash":"d1632ad220946dcb3a4b9f4dba6bf098fede33fa","modified":1677216023864},{"_id":"public/api/tags/性能测试.json","hash":"2c94d1c4ee09906c8c86d538228ae1f988c3d073","modified":1677201802178},{"_id":"public/api/tags/profile.json","hash":"a475ca801a708f5ceda49591d5484d9649163db0","modified":1677201802178},{"_id":"public/api/tags/roofline.json","hash":"c5a6a6053fa3221a8a60112e9ae3e856ec7d2cb0","modified":1677201802178},{"_id":"public/post/Nsight-Compute使用不完全记录.html","hash":"5f099c4491388497a74704efba6de8a3b9165ac2","modified":1676197115405},{"_id":"source/_posts/C-的STL容器.md","hash":"7b08a19ec18168cf7faf235712b49ef1e52d9c8f","modified":1677216009488},{"_id":"node_modules/hexo-theme-aurora/source/covers/about.png","hash":"7d605dc8df5d35f27c11fbda360ae4f64dda0ac2","modified":1676173569831},{"_id":"public/api/articles/C-的STL容器.json","hash":"9501cf0189fba6a8c3b91546d69a49fcd4be9fe1","modified":1677216023864},{"_id":"public/api/tags/cpp.json","hash":"4c1ba7105f52c9171b5ceacebb8d7b51c3a0662f","modified":1677216023864},{"_id":"public/api/tags/stl.json","hash":"63cbb93eaf7f8d2aae14b1da4a69f5ba2ab109a4","modified":1677216023864},{"_id":"public/api/tags/编程.json","hash":"c11f8078b111d81843a8ac1615fd7bacb4182c97","modified":1677216023864},{"_id":"public/post/C-的STL容器.html","hash":"5f099c4491388497a74704efba6de8a3b9165ac2","modified":1677201802178},{"_id":"public/covers/about.png","hash":"7d605dc8df5d35f27c11fbda360ae4f64dda0ac2","modified":1677201802178}],"Category":[{"name":"清浅录","_id":"clam3aij20004hwue9rhxcjf5"},{"name":"陶然集","_id":"clam3aij40008hwuebxyff2ee"},{"name":"清浅集","_id":"clam3mwmd0001youef8b408yy"},{"name":"知鱼集","_id":"clamhuksh000078uegebg5oa8"},{"name":"索道集","_id":"clbhchdju00005oue0jekds01"}],"Data":[],"Page":[{"title":"about","type":"about","layout":"about","_content":"\n# Welcome To Peles\n\nPeles是位于罗马尼亚首都布加勒斯特以北的南喀尔巴阡山小城锡纳亚，曾是卡洛尔国王的夏宫，被认为是世界上最美的城堡之一。我用Peles命名自己的博客站点，希望这里能够成为我隐秘而美好的存在。\n\n![about](covers/about.png)\n\n> 我们中的大部分，都在为理想和所爱默默耕耘\n\n","source":"about/index.md","raw":"---\ntitle: about\ntype: \"about\"\nlayout: \"about\"\n---\n\n# Welcome To Peles\n\nPeles是位于罗马尼亚首都布加勒斯特以北的南喀尔巴阡山小城锡纳亚，曾是卡洛尔国王的夏宫，被认为是世界上最美的城堡之一。我用Peles命名自己的博客站点，希望这里能够成为我隐秘而美好的存在。\n\n![about](covers/about.png)\n\n> 我们中的大部分，都在为理想和所爱默默耕耘\n\n","date":"2023-02-24T01:23:07.459Z","updated":"2023-02-24T01:23:07.459Z","path":"about/index.html","_id":"clam3aiiv0000hwuebkocdcb2","comments":1,"content":"<h1 id=\"Welcome-To-Peles\"><a href=\"#Welcome-To-Peles\" class=\"headerlink\" title=\"Welcome To Peles\"></a>Welcome To Peles</h1><p>Peles是位于罗马尼亚首都布加勒斯特以北的南喀尔巴阡山小城锡纳亚，曾是卡洛尔国王的夏宫，被认为是世界上最美的城堡之一。我用Peles命名自己的博客站点，希望这里能够成为我隐秘而美好的存在。</p>\n<p><img src=\"/covers/about.png\" alt=\"about\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>我们中的大部分，都在为理想和所爱默默耕耘</p></blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Welcome-To-Peles\"><a href=\"#Welcome-To-Peles\" class=\"headerlink\" title=\"Welcome To Peles\"></a>Welcome To Peles</h1><p>Peles是位于罗马尼亚首都布加勒斯特以北的南喀尔巴阡山小城锡纳亚，曾是卡洛尔国王的夏宫，被认为是世界上最美的城堡之一。我用Peles命名自己的博客站点，希望这里能够成为我隐秘而美好的存在。</p>\n<p><img src=\"/covers/about.png\" alt=\"about\"></p>\n<blockquote>\n<p>我们中的大部分，都在为理想和所爱默默耕耘</p>\n</blockquote>\n"},{"title":"categories","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ntype: \"categories\"\nlayout: \"categories\"\n---\n","date":"2022-11-11T02:47:18.972Z","updated":"2022-11-11T02:47:18.972Z","path":"categories/index.html","comments":1,"_id":"clam3aij00002hwue0lsygruh","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: \"tags\"\nlayout: \"tags\"\n---\n","date":"2022-11-09T07:58:12.841Z","updated":"2022-11-09T07:58:12.841Z","path":"tags/index.html","comments":1,"_id":"clam3aij30006hwue6qe64vj2","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"friends","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ntype: \"friends\"\nlayout: \"friends\"\n---","date":"2022-11-09T07:58:16.349Z","updated":"2022-11-09T07:58:16.349Z","path":"friends/index.html","comments":1,"_id":"clam3aij40007hwueb68n6xev","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"\n<!DOCTYPE html>\n<html style=\"font-size: 16px;\" lang=\"en\"><head>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta charset=\"utf-8\">\n    <meta name=\"keywords\" content=\"Profile\">\n    <meta name=\"description\" content=\"\">\n    <title>Copy of Contact 1</title>\n    <link rel=\"stylesheet\" href=\"//capp.nicepage.com/3c9198698ecc54a74b7f2fd9f895f61126296300/nicepage.css\" media=\"screen\">\n<link rel=\"stylesheet\" href=\"/nicepage-site.css\" media=\"screen\">\n<link rel=\"stylesheet\" href=\"Copy-of-Contact-1.css\" media=\"screen\">\n    <script class=\"u-script\" type=\"text/javascript\" src=\"//capp.nicepage.com/assets/jquery-3.5.1.min.js\" defer=\"\"></script>\n    <script class=\"u-script\" type=\"text/javascript\" src=\"//capp.nicepage.com/3c9198698ecc54a74b7f2fd9f895f61126296300/nicepage.js\" defer=\"\"></script>\n    <meta name=\"generator\" content=\"Nicepage 5.0.20, nicepage.com\">\n    <link id=\"u-theme-google-font\" rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:100,100i,300,300i,400,400i,500,500i,700,700i,900,900i|Open+Sans:300,300i,400,400i,500,500i,600,600i,700,700i,800,800i\">\n    <link id=\"u-page-google-font\" rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Montserrat:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i|PT+Sans:400,400i,700,700i|Allerta:400|PT+Sans+Caption:400,700\">\n    \n    \n    <script type=\"application/ld+json\">{\n\t\t\"@context\": \"http://schema.org\",\n\t\t\"@type\": \"Organization\",\n\t\t\"name\": \"Peles\",\n\t\t\"url\": \"/\",\n\t\t\"logo\": \"//images01.nicepagecdn.com/5370bda36e9fb929ee41036a/daf80ef95e605abb868ac076/shiliu.svg\"\n}</script>\n    <meta name=\"theme-color\" content=\"#478ac9\">\n    <meta property=\"og:title\" content=\"Copy of Contact 1\">\n    <meta property=\"og:description\" content=\"\">\n    <meta property=\"og:type\" content=\"website\">\n    <link rel=\"canonical\" href=\"/\">\n  </head>\n  <body data-home-page=\"https://gardeniatian.nicepage.io/Copy-of-Contact-1.html?version=ec3cbcb0-a294-4d36-bd3a-245a72ad2426\" data-home-page-title=\"Copy of Contact 1\" class=\"u-body u-xl-mode\" data-lang=\"en\"><header class=\"u-clearfix u-header u-header\" id=\"sec-5562\"><div class=\"u-clearfix u-sheet u-valign-middle u-sheet-1\">\n        <a href=\"https://nicepage.com\" class=\"u-image u-logo u-image-1\" data-image-width=\"200\" data-image-height=\"200\">\n          <img src=\"//images01.nicepagecdn.com/5370bda36e9fb929ee41036a/daf80ef95e605abb868ac076/shiliu.svg\" class=\"u-logo-image u-logo-image-1\">\n        </a>\n        <nav class=\"u-menu u-menu-one-level u-offcanvas u-menu-1\">\n          <div class=\"menu-collapse\" style=\"font-size: 1rem; letter-spacing: 0px;\">\n            <a class=\"u-button-style u-custom-left-right-menu-spacing u-custom-padding-bottom u-custom-top-bottom-menu-spacing u-nav-link u-text-active-palette-1-base u-text-hover-palette-2-base\" href=\"#\">\n              <svg class=\"u-svg-link\" viewBox=\"0 0 24 24\"><use xlink:href=\"#menu-hamburger\"></use></svg>\n              <svg class=\"u-svg-content\" version=\"1.1\" id=\"menu-hamburger\" viewBox=\"0 0 16 16\" x=\"0px\" y=\"0px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\"><g><rect y=\"1\" width=\"16\" height=\"2\"></rect><rect y=\"7\" width=\"16\" height=\"2\"></rect><rect y=\"13\" width=\"16\" height=\"2\"></rect>\n</g></svg>\n            </a>\n          </div>\n          <div class=\"u-custom-menu u-nav-container\">\n            <ul class=\"u-nav u-unstyled u-nav-1\"><li class=\"u-nav-item\"><a class=\"u-button-style u-nav-link u-text-active-palette-1-base u-text-hover-palette-2-base\" href=\"https://gardenia-tian.github.io/\" style=\"padding: 10px 20px;\">READ MORE</a>\n</li></ul>\n          </div>\n          <div class=\"u-custom-menu u-nav-container-collapse\">\n            <div class=\"u-black u-container-style u-inner-container-layout u-opacity u-opacity-95 u-sidenav\">\n              <div class=\"u-inner-container-layout u-sidenav-overflow\">\n                <div class=\"u-menu-close\"></div>\n                <ul class=\"u-align-center u-nav u-popupmenu-items u-unstyled u-nav-2\"><li class=\"u-nav-item\"><a class=\"u-button-style u-nav-link\" href=\"https://gardenia-tian.github.io/\">READ MORE</a>\n</li></ul>\n              </div>\n            </div>\n            <div class=\"u-black u-menu-overlay u-opacity u-opacity-70\"></div>\n          </div>\n        </nav>\n      </div></header>\n    <section class=\"u-align-center u-clearfix u-image u-section-1\" id=\"carousel_7c8e\" data-image-width=\"1980\" data-image-height=\"1320\">\n      <div class=\"u-clearfix u-sheet u-valign-bottom-sm u-valign-bottom-xs u-sheet-1\">\n        <h2 class=\"u-text u-text-1\">HELLO</h2>\n        <p class=\"u-large-text u-text u-text-variant u-text-2\"> Welcome to get to know me.</p>\n        <div class=\"u-clearfix u-expanded-width u-layout-wrap u-layout-wrap-1\">\n          <div class=\"u-gutter-0 u-layout\">\n            <div class=\"u-layout-row\">\n              <div class=\"u-align-center-sm u-align-center-xs u-align-left-lg u-align-left-md u-align-left-xl u-container-style u-layout-cell u-size-20 u-layout-cell-1\">\n                <div class=\"u-container-layout u-container-layout-1\">\n                  <h4 class=\"u-custom-font u-text u-text-3\">Details</h4>\n                  <p class=\"u-text u-text-4\">\n                    <span style=\"font-weight: 700;\">Name: </span>\n                    <br>Gardenia Tian<br>\n                    <span style=\"font-weight: 700;\">Age: </span>\n                    <br>24 years <span style=\"font-weight: 700;\">\n                      <br>Location: \n                    </span>\n                    <br> Harbin, Heilongjiang Province, China\n                  </p>\n                </div>\n              </div>\n              <div class=\"u-align-center-sm u-align-center-xs u-align-left-lg u-align-left-md u-align-left-xl u-container-style u-layout-cell u-size-22 u-layout-cell-2\">\n                <div class=\"u-container-layout u-valign-top u-container-layout-2\">\n                  <h4 class=\"u-custom-font u-text u-text-5\">About me</h4>\n                  <p class=\"u-align-center u-text u-text-6\">喜欢阅读，喜欢运动，喜欢吃<br>不喜欢说话，不喜欢角瓜，不喜欢蚊子<br>\n                    <br>这里是我的个人站点“Peles”<br>记录学习内容<br>也记录日常<br>这是我的小基地<br>如果你认出了我是谁<br>请装作不知道\n                  </p>\n                  <a href=\"#\" class=\"u-active-custom-color-1 u-border-3 u-border-active-custom-color-1 u-border-custom-color-1 u-border-hover-custom-color-1 u-btn u-btn-round u-button-style u-hover-custom-color-1 u-none u-radius-50 u-text-active-white u-text-black u-text-hover-white u-btn-1\">Contact Me</a>\n                </div>\n              </div>\n              <div class=\"u-align-center u-container-style u-custom-color-1 u-layout-cell u-size-18 u-layout-cell-3\">\n                <div class=\"u-container-layout u-container-layout-3\">\n                  <div class=\"u-image u-image-circle u-preserve-proportions u-image-1\" alt=\"\" data-image-width=\"1079\" data-image-height=\"1080\"></div>\n                  <h3 class=\"u-custom-font u-text u-text-default u-text-7\"> Hello, I'm Gardenia</h3>\n                  <p class=\"u-custom-font u-font-pt-sans u-text u-text-8\"> 计算机科学与技术专业<br>目前在哈尔滨佛学院就读研究生<br>是个热爱生活的科研小白\n                  </p>\n                  <div class=\"u-social-icons u-spacing-12 u-social-icons-1\">\n                    <a class=\"u-social-url\" title=\"facebook\" target=\"_blank\" href=\"https://facebook.com/name\"><span class=\"u-icon u-social-facebook u-social-icon u-text-white\"><svg class=\"u-svg-link\" preserveAspectRatio=\"xMidYMin slice\" viewBox=\"0 0 112 112\" style=\"\"><use xlink:href=\"#svg-4f8c\"></use></svg><svg class=\"u-svg-content\" viewBox=\"0 0 112 112\" x=\"0\" y=\"0\" id=\"svg-4f8c\"><path fill=\"currentColor\" d=\"M75.5,28.8H65.4c-1.5,0-4,0.9-4,4.3v9.4h13.9l-1.5,15.8H61.4v45.1H42.8V58.3h-8.8V42.4h8.8V32.2\nc0-7.4,3.4-18.8,18.8-18.8h13.8v15.4H75.5z\"></path></svg></span>\n                    </a>\n                    <a class=\"u-social-url\" title=\"twitter\" target=\"_blank\" href=\"https://twitter.com/name\"><span class=\"u-icon u-social-icon u-social-twitter u-text-white\"><svg class=\"u-svg-link\" preserveAspectRatio=\"xMidYMin slice\" viewBox=\"0 0 112 112\" style=\"\"><use xlink:href=\"#svg-e83c\"></use></svg><svg class=\"u-svg-content\" viewBox=\"0 0 112 112\" x=\"0\" y=\"0\" id=\"svg-e83c\"><path fill=\"currentColor\" d=\"M92.2,38.2c0,0.8,0,1.6,0,2.3c0,24.3-18.6,52.4-52.6,52.4c-10.6,0.1-20.2-2.9-28.5-8.2\n\tc1.4,0.2,2.9,0.2,4.4,0.2c8.7,0,16.7-2.9,23-7.9c-8.1-0.2-14.9-5.5-17.3-12.8c1.1,0.2,2.4,0.2,3.4,0.2c1.6,0,3.3-0.2,4.8-0.7\n\tc-8.4-1.6-14.9-9.2-14.9-18c0-0.2,0-0.2,0-0.2c2.5,1.4,5.4,2.2,8.4,2.3c-5-3.3-8.3-8.9-8.3-15.4c0-3.4,1-6.5,2.5-9.2\n\tc9.1,11.1,22.7,18.5,38,19.2c-0.2-1.4-0.4-2.8-0.4-4.3c0.1-10,8.3-18.2,18.5-18.2c5.4,0,10.1,2.2,13.5,5.7c4.3-0.8,8.1-2.3,11.7-4.5\n\tc-1.4,4.3-4.3,7.9-8.1,10.1c3.7-0.4,7.3-1.4,10.6-2.9C98.9,32.3,95.7,35.5,92.2,38.2z\"></path></svg></span>\n                    </a>\n                    <a class=\"u-social-url\" title=\"instagram\" target=\"_blank\" href=\"https://instagram.com/name\"><span class=\"u-icon u-social-icon u-social-instagram u-text-white\"><svg class=\"u-svg-link\" preserveAspectRatio=\"xMidYMin slice\" viewBox=\"0 0 112 112\" style=\"\"><use xlink:href=\"#svg-11e5\"></use></svg><svg class=\"u-svg-content\" viewBox=\"0 0 112 112\" x=\"0\" y=\"0\" id=\"svg-11e5\"><path fill=\"currentColor\" d=\"M55.9,32.9c-12.8,0-23.2,10.4-23.2,23.2s10.4,23.2,23.2,23.2s23.2-10.4,23.2-23.2S68.7,32.9,55.9,32.9z\n\t M55.9,69.4c-7.4,0-13.3-6-13.3-13.3c-0.1-7.4,6-13.3,13.3-13.3s13.3,6,13.3,13.3C69.3,63.5,63.3,69.4,55.9,69.4z\"></path><path fill=\"#FFFFFF\" d=\"M79.7,26.8c-3,0-5.4,2.5-5.4,5.4s2.5,5.4,5.4,5.4c3,0,5.4-2.5,5.4-5.4S82.7,26.8,79.7,26.8z\"></path><path fill=\"currentColor\" d=\"M78.2,11H33.5C21,11,10.8,21.3,10.8,33.7v44.7c0,12.6,10.2,22.8,22.7,22.8h44.7c12.6,0,22.7-10.2,22.7-22.7\n\tV33.7C100.8,21.1,90.6,11,78.2,11z M91,78.4c0,7.1-5.8,12.8-12.8,12.8H33.5c-7.1,0-12.8-5.8-12.8-12.8V33.7\n\tc0-7.1,5.8-12.8,12.8-12.8h44.7c7.1,0,12.8,5.8,12.8,12.8V78.4z\"></path></svg></span>\n                    </a>\n                    <a class=\"u-social-url\" target=\"_blank\" data-type=\"Custom\" title=\"Custom\" href=\"\"><span class=\"u-icon u-social-custom u-social-icon u-text-white u-icon-4\"><svg class=\"u-svg-link\" preserveAspectRatio=\"xMidYMin slice\" viewBox=\"0 0 512 512\" style=\"\"><use xlink:href=\"#svg-211f\"></use></svg><svg class=\"u-svg-content\" viewBox=\"0 0 512 512\" x=\"0px\" y=\"0px\" id=\"svg-211f\" style=\"enable-background:new 0 0 512 512;\"><g><g><rect y=\"160\" width=\"114.496\" height=\"352\"></rect>\n</g>\n</g><g><g><path d=\"M426.368,164.128c-1.216-0.384-2.368-0.8-3.648-1.152c-1.536-0.352-3.072-0.64-4.64-0.896    c-6.08-1.216-12.736-2.08-20.544-2.08c-66.752,0-109.088,48.544-123.04,67.296V160H160v352h114.496V320    c0,0,86.528-120.512,123.04-32c0,79.008,0,224,0,224H512V274.464C512,221.28,475.552,176.96,426.368,164.128z\"></path>\n</g>\n</g><g><g><circle cx=\"56\" cy=\"56\" r=\"56\"></circle>\n</g>\n</g></svg></span>\n                    </a>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n    \n    \n    <footer class=\"u-align-center u-clearfix u-footer u-grey-80 u-footer\" id=\"sec-7d47\"><div class=\"u-clearfix u-sheet u-valign-middle u-sheet-1\">\n        <p class=\"u-small-text u-text u-text-variant u-text-1\">学习本身就是足够幸福的过程 。&nbsp; &nbsp;——长洱</p>\n      </div></footer>\n    <section class=\"u-backlink u-clearfix u-grey-80\">\n      <a class=\"u-link\" href=\"https://nicepage.com/website-templates\" target=\"_blank\">\n        <span>Website Templates</span>\n      </a>\n      <p class=\"u-text\">\n        <span>created with</span>\n      </p>\n      <a class=\"u-link\" href=\"\" target=\"_blank\">\n        <span>Website Builder Software</span>\n      </a>. \n    </section>\n  \n</body></html>","source":"about/index.html","raw":"\n<!DOCTYPE html>\n<html style=\"font-size: 16px;\" lang=\"en\"><head>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta charset=\"utf-8\">\n    <meta name=\"keywords\" content=\"Profile\">\n    <meta name=\"description\" content=\"\">\n    <title>Copy of Contact 1</title>\n    <link rel=\"stylesheet\" href=\"//capp.nicepage.com/3c9198698ecc54a74b7f2fd9f895f61126296300/nicepage.css\" media=\"screen\">\n<link rel=\"stylesheet\" href=\"/nicepage-site.css\" media=\"screen\">\n<link rel=\"stylesheet\" href=\"Copy-of-Contact-1.css\" media=\"screen\">\n    <script class=\"u-script\" type=\"text/javascript\" src=\"//capp.nicepage.com/assets/jquery-3.5.1.min.js\" defer=\"\"></script>\n    <script class=\"u-script\" type=\"text/javascript\" src=\"//capp.nicepage.com/3c9198698ecc54a74b7f2fd9f895f61126296300/nicepage.js\" defer=\"\"></script>\n    <meta name=\"generator\" content=\"Nicepage 5.0.20, nicepage.com\">\n    <link id=\"u-theme-google-font\" rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:100,100i,300,300i,400,400i,500,500i,700,700i,900,900i|Open+Sans:300,300i,400,400i,500,500i,600,600i,700,700i,800,800i\">\n    <link id=\"u-page-google-font\" rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Montserrat:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i|PT+Sans:400,400i,700,700i|Allerta:400|PT+Sans+Caption:400,700\">\n    \n    \n    <script type=\"application/ld+json\">{\n\t\t\"@context\": \"http://schema.org\",\n\t\t\"@type\": \"Organization\",\n\t\t\"name\": \"Peles\",\n\t\t\"url\": \"/\",\n\t\t\"logo\": \"//images01.nicepagecdn.com/5370bda36e9fb929ee41036a/daf80ef95e605abb868ac076/shiliu.svg\"\n}</script>\n    <meta name=\"theme-color\" content=\"#478ac9\">\n    <meta property=\"og:title\" content=\"Copy of Contact 1\">\n    <meta property=\"og:description\" content=\"\">\n    <meta property=\"og:type\" content=\"website\">\n    <link rel=\"canonical\" href=\"/\">\n  </head>\n  <body data-home-page=\"https://gardeniatian.nicepage.io/Copy-of-Contact-1.html?version=ec3cbcb0-a294-4d36-bd3a-245a72ad2426\" data-home-page-title=\"Copy of Contact 1\" class=\"u-body u-xl-mode\" data-lang=\"en\"><header class=\"u-clearfix u-header u-header\" id=\"sec-5562\"><div class=\"u-clearfix u-sheet u-valign-middle u-sheet-1\">\n        <a href=\"https://nicepage.com\" class=\"u-image u-logo u-image-1\" data-image-width=\"200\" data-image-height=\"200\">\n          <img src=\"//images01.nicepagecdn.com/5370bda36e9fb929ee41036a/daf80ef95e605abb868ac076/shiliu.svg\" class=\"u-logo-image u-logo-image-1\">\n        </a>\n        <nav class=\"u-menu u-menu-one-level u-offcanvas u-menu-1\">\n          <div class=\"menu-collapse\" style=\"font-size: 1rem; letter-spacing: 0px;\">\n            <a class=\"u-button-style u-custom-left-right-menu-spacing u-custom-padding-bottom u-custom-top-bottom-menu-spacing u-nav-link u-text-active-palette-1-base u-text-hover-palette-2-base\" href=\"#\">\n              <svg class=\"u-svg-link\" viewBox=\"0 0 24 24\"><use xlink:href=\"#menu-hamburger\"></use></svg>\n              <svg class=\"u-svg-content\" version=\"1.1\" id=\"menu-hamburger\" viewBox=\"0 0 16 16\" x=\"0px\" y=\"0px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\"><g><rect y=\"1\" width=\"16\" height=\"2\"></rect><rect y=\"7\" width=\"16\" height=\"2\"></rect><rect y=\"13\" width=\"16\" height=\"2\"></rect>\n</g></svg>\n            </a>\n          </div>\n          <div class=\"u-custom-menu u-nav-container\">\n            <ul class=\"u-nav u-unstyled u-nav-1\"><li class=\"u-nav-item\"><a class=\"u-button-style u-nav-link u-text-active-palette-1-base u-text-hover-palette-2-base\" href=\"https://gardenia-tian.github.io/\" style=\"padding: 10px 20px;\">READ MORE</a>\n</li></ul>\n          </div>\n          <div class=\"u-custom-menu u-nav-container-collapse\">\n            <div class=\"u-black u-container-style u-inner-container-layout u-opacity u-opacity-95 u-sidenav\">\n              <div class=\"u-inner-container-layout u-sidenav-overflow\">\n                <div class=\"u-menu-close\"></div>\n                <ul class=\"u-align-center u-nav u-popupmenu-items u-unstyled u-nav-2\"><li class=\"u-nav-item\"><a class=\"u-button-style u-nav-link\" href=\"https://gardenia-tian.github.io/\">READ MORE</a>\n</li></ul>\n              </div>\n            </div>\n            <div class=\"u-black u-menu-overlay u-opacity u-opacity-70\"></div>\n          </div>\n        </nav>\n      </div></header>\n    <section class=\"u-align-center u-clearfix u-image u-section-1\" id=\"carousel_7c8e\" data-image-width=\"1980\" data-image-height=\"1320\">\n      <div class=\"u-clearfix u-sheet u-valign-bottom-sm u-valign-bottom-xs u-sheet-1\">\n        <h2 class=\"u-text u-text-1\">HELLO</h2>\n        <p class=\"u-large-text u-text u-text-variant u-text-2\"> Welcome to get to know me.</p>\n        <div class=\"u-clearfix u-expanded-width u-layout-wrap u-layout-wrap-1\">\n          <div class=\"u-gutter-0 u-layout\">\n            <div class=\"u-layout-row\">\n              <div class=\"u-align-center-sm u-align-center-xs u-align-left-lg u-align-left-md u-align-left-xl u-container-style u-layout-cell u-size-20 u-layout-cell-1\">\n                <div class=\"u-container-layout u-container-layout-1\">\n                  <h4 class=\"u-custom-font u-text u-text-3\">Details</h4>\n                  <p class=\"u-text u-text-4\">\n                    <span style=\"font-weight: 700;\">Name: </span>\n                    <br>Gardenia Tian<br>\n                    <span style=\"font-weight: 700;\">Age: </span>\n                    <br>24 years <span style=\"font-weight: 700;\">\n                      <br>Location: \n                    </span>\n                    <br> Harbin, Heilongjiang Province, China\n                  </p>\n                </div>\n              </div>\n              <div class=\"u-align-center-sm u-align-center-xs u-align-left-lg u-align-left-md u-align-left-xl u-container-style u-layout-cell u-size-22 u-layout-cell-2\">\n                <div class=\"u-container-layout u-valign-top u-container-layout-2\">\n                  <h4 class=\"u-custom-font u-text u-text-5\">About me</h4>\n                  <p class=\"u-align-center u-text u-text-6\">喜欢阅读，喜欢运动，喜欢吃<br>不喜欢说话，不喜欢角瓜，不喜欢蚊子<br>\n                    <br>这里是我的个人站点“Peles”<br>记录学习内容<br>也记录日常<br>这是我的小基地<br>如果你认出了我是谁<br>请装作不知道\n                  </p>\n                  <a href=\"#\" class=\"u-active-custom-color-1 u-border-3 u-border-active-custom-color-1 u-border-custom-color-1 u-border-hover-custom-color-1 u-btn u-btn-round u-button-style u-hover-custom-color-1 u-none u-radius-50 u-text-active-white u-text-black u-text-hover-white u-btn-1\">Contact Me</a>\n                </div>\n              </div>\n              <div class=\"u-align-center u-container-style u-custom-color-1 u-layout-cell u-size-18 u-layout-cell-3\">\n                <div class=\"u-container-layout u-container-layout-3\">\n                  <div class=\"u-image u-image-circle u-preserve-proportions u-image-1\" alt=\"\" data-image-width=\"1079\" data-image-height=\"1080\"></div>\n                  <h3 class=\"u-custom-font u-text u-text-default u-text-7\"> Hello, I'm Gardenia</h3>\n                  <p class=\"u-custom-font u-font-pt-sans u-text u-text-8\"> 计算机科学与技术专业<br>目前在哈尔滨佛学院就读研究生<br>是个热爱生活的科研小白\n                  </p>\n                  <div class=\"u-social-icons u-spacing-12 u-social-icons-1\">\n                    <a class=\"u-social-url\" title=\"facebook\" target=\"_blank\" href=\"https://facebook.com/name\"><span class=\"u-icon u-social-facebook u-social-icon u-text-white\"><svg class=\"u-svg-link\" preserveAspectRatio=\"xMidYMin slice\" viewBox=\"0 0 112 112\" style=\"\"><use xlink:href=\"#svg-4f8c\"></use></svg><svg class=\"u-svg-content\" viewBox=\"0 0 112 112\" x=\"0\" y=\"0\" id=\"svg-4f8c\"><path fill=\"currentColor\" d=\"M75.5,28.8H65.4c-1.5,0-4,0.9-4,4.3v9.4h13.9l-1.5,15.8H61.4v45.1H42.8V58.3h-8.8V42.4h8.8V32.2\nc0-7.4,3.4-18.8,18.8-18.8h13.8v15.4H75.5z\"></path></svg></span>\n                    </a>\n                    <a class=\"u-social-url\" title=\"twitter\" target=\"_blank\" href=\"https://twitter.com/name\"><span class=\"u-icon u-social-icon u-social-twitter u-text-white\"><svg class=\"u-svg-link\" preserveAspectRatio=\"xMidYMin slice\" viewBox=\"0 0 112 112\" style=\"\"><use xlink:href=\"#svg-e83c\"></use></svg><svg class=\"u-svg-content\" viewBox=\"0 0 112 112\" x=\"0\" y=\"0\" id=\"svg-e83c\"><path fill=\"currentColor\" d=\"M92.2,38.2c0,0.8,0,1.6,0,2.3c0,24.3-18.6,52.4-52.6,52.4c-10.6,0.1-20.2-2.9-28.5-8.2\n\tc1.4,0.2,2.9,0.2,4.4,0.2c8.7,0,16.7-2.9,23-7.9c-8.1-0.2-14.9-5.5-17.3-12.8c1.1,0.2,2.4,0.2,3.4,0.2c1.6,0,3.3-0.2,4.8-0.7\n\tc-8.4-1.6-14.9-9.2-14.9-18c0-0.2,0-0.2,0-0.2c2.5,1.4,5.4,2.2,8.4,2.3c-5-3.3-8.3-8.9-8.3-15.4c0-3.4,1-6.5,2.5-9.2\n\tc9.1,11.1,22.7,18.5,38,19.2c-0.2-1.4-0.4-2.8-0.4-4.3c0.1-10,8.3-18.2,18.5-18.2c5.4,0,10.1,2.2,13.5,5.7c4.3-0.8,8.1-2.3,11.7-4.5\n\tc-1.4,4.3-4.3,7.9-8.1,10.1c3.7-0.4,7.3-1.4,10.6-2.9C98.9,32.3,95.7,35.5,92.2,38.2z\"></path></svg></span>\n                    </a>\n                    <a class=\"u-social-url\" title=\"instagram\" target=\"_blank\" href=\"https://instagram.com/name\"><span class=\"u-icon u-social-icon u-social-instagram u-text-white\"><svg class=\"u-svg-link\" preserveAspectRatio=\"xMidYMin slice\" viewBox=\"0 0 112 112\" style=\"\"><use xlink:href=\"#svg-11e5\"></use></svg><svg class=\"u-svg-content\" viewBox=\"0 0 112 112\" x=\"0\" y=\"0\" id=\"svg-11e5\"><path fill=\"currentColor\" d=\"M55.9,32.9c-12.8,0-23.2,10.4-23.2,23.2s10.4,23.2,23.2,23.2s23.2-10.4,23.2-23.2S68.7,32.9,55.9,32.9z\n\t M55.9,69.4c-7.4,0-13.3-6-13.3-13.3c-0.1-7.4,6-13.3,13.3-13.3s13.3,6,13.3,13.3C69.3,63.5,63.3,69.4,55.9,69.4z\"></path><path fill=\"#FFFFFF\" d=\"M79.7,26.8c-3,0-5.4,2.5-5.4,5.4s2.5,5.4,5.4,5.4c3,0,5.4-2.5,5.4-5.4S82.7,26.8,79.7,26.8z\"></path><path fill=\"currentColor\" d=\"M78.2,11H33.5C21,11,10.8,21.3,10.8,33.7v44.7c0,12.6,10.2,22.8,22.7,22.8h44.7c12.6,0,22.7-10.2,22.7-22.7\n\tV33.7C100.8,21.1,90.6,11,78.2,11z M91,78.4c0,7.1-5.8,12.8-12.8,12.8H33.5c-7.1,0-12.8-5.8-12.8-12.8V33.7\n\tc0-7.1,5.8-12.8,12.8-12.8h44.7c7.1,0,12.8,5.8,12.8,12.8V78.4z\"></path></svg></span>\n                    </a>\n                    <a class=\"u-social-url\" target=\"_blank\" data-type=\"Custom\" title=\"Custom\" href=\"\"><span class=\"u-icon u-social-custom u-social-icon u-text-white u-icon-4\"><svg class=\"u-svg-link\" preserveAspectRatio=\"xMidYMin slice\" viewBox=\"0 0 512 512\" style=\"\"><use xlink:href=\"#svg-211f\"></use></svg><svg class=\"u-svg-content\" viewBox=\"0 0 512 512\" x=\"0px\" y=\"0px\" id=\"svg-211f\" style=\"enable-background:new 0 0 512 512;\"><g><g><rect y=\"160\" width=\"114.496\" height=\"352\"></rect>\n</g>\n</g><g><g><path d=\"M426.368,164.128c-1.216-0.384-2.368-0.8-3.648-1.152c-1.536-0.352-3.072-0.64-4.64-0.896    c-6.08-1.216-12.736-2.08-20.544-2.08c-66.752,0-109.088,48.544-123.04,67.296V160H160v352h114.496V320    c0,0,86.528-120.512,123.04-32c0,79.008,0,224,0,224H512V274.464C512,221.28,475.552,176.96,426.368,164.128z\"></path>\n</g>\n</g><g><g><circle cx=\"56\" cy=\"56\" r=\"56\"></circle>\n</g>\n</g></svg></span>\n                    </a>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n    \n    \n    <footer class=\"u-align-center u-clearfix u-footer u-grey-80 u-footer\" id=\"sec-7d47\"><div class=\"u-clearfix u-sheet u-valign-middle u-sheet-1\">\n        <p class=\"u-small-text u-text u-text-variant u-text-1\">学习本身就是足够幸福的过程 。&nbsp; &nbsp;——长洱</p>\n      </div></footer>\n    <section class=\"u-backlink u-clearfix u-grey-80\">\n      <a class=\"u-link\" href=\"https://nicepage.com/website-templates\" target=\"_blank\">\n        <span>Website Templates</span>\n      </a>\n      <p class=\"u-text\">\n        <span>created with</span>\n      </p>\n      <a class=\"u-link\" href=\"\" target=\"_blank\">\n        <span>Website Builder Software</span>\n      </a>. \n    </section>\n  \n</body></html>","date":"2022-11-24T09:07:46.477Z","updated":"2022-11-24T09:07:37.777Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"clbfub88d0001wcue8k1bfur1","content":"\n<!DOCTYPE html>\n<html style=\"font-size: 16px;\" lang=\"en\"><head>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta charset=\"utf-8\">\n    <meta name=\"keywords\" content=\"Profile\">\n    <meta name=\"description\" content>\n    <title>Copy of Contact 1</title>\n    <link rel=\"stylesheet\" href=\"//capp.nicepage.com/3c9198698ecc54a74b7f2fd9f895f61126296300/nicepage.css\" media=\"screen\">\n<link rel=\"stylesheet\" href=\"/nicepage-site.css\" media=\"screen\">\n<link rel=\"stylesheet\" href=\"Copy-of-Contact-1.css\" media=\"screen\">\n    <script class=\"u-script\" type=\"text/javascript\" src=\"//capp.nicepage.com/assets/jquery-3.5.1.min.js\" defer></script>\n    <script class=\"u-script\" type=\"text/javascript\" src=\"//capp.nicepage.com/3c9198698ecc54a74b7f2fd9f895f61126296300/nicepage.js\" defer></script>\n    <meta name=\"generator\" content=\"Nicepage 5.0.20, nicepage.com\">\n    <link id=\"u-theme-google-font\" rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:100,100i,300,300i,400,400i,500,500i,700,700i,900,900i|Open+Sans:300,300i,400,400i,500,500i,600,600i,700,700i,800,800i\">\n    <link id=\"u-page-google-font\" rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Montserrat:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i|PT+Sans:400,400i,700,700i|Allerta:400|PT+Sans+Caption:400,700\">\n    \n    \n    <script type=\"application/ld+json\">{\n\t\t\"@context\": \"http://schema.org\",\n\t\t\"@type\": \"Organization\",\n\t\t\"name\": \"Peles\",\n\t\t\"url\": \"/\",\n\t\t\"logo\": \"//images01.nicepagecdn.com/5370bda36e9fb929ee41036a/daf80ef95e605abb868ac076/shiliu.svg\"\n}</script>\n    <meta name=\"theme-color\" content=\"#478ac9\">\n    <meta property=\"og:title\" content=\"Copy of Contact 1\">\n    <meta property=\"og:description\" content>\n    <meta property=\"og:type\" content=\"website\">\n    <link rel=\"canonical\" href=\"/\">\n  </head>\n  <body data-home-page=\"https://gardeniatian.nicepage.io/Copy-of-Contact-1.html?version=ec3cbcb0-a294-4d36-bd3a-245a72ad2426\" data-home-page-title=\"Copy of Contact 1\" class=\"u-body u-xl-mode\" data-lang=\"en\"><header class=\"u-clearfix u-header u-header\" id=\"sec-5562\"><div class=\"u-clearfix u-sheet u-valign-middle u-sheet-1\">\n        <a href=\"https://nicepage.com\" class=\"u-image u-logo u-image-1\" data-image-width=\"200\" data-image-height=\"200\">\n          <img src=\"//images01.nicepagecdn.com/5370bda36e9fb929ee41036a/daf80ef95e605abb868ac076/shiliu.svg\" class=\"u-logo-image u-logo-image-1\">\n        </a>\n        <nav class=\"u-menu u-menu-one-level u-offcanvas u-menu-1\">\n          <div class=\"menu-collapse\" style=\"font-size: 1rem; letter-spacing: 0px;\">\n            <a class=\"u-button-style u-custom-left-right-menu-spacing u-custom-padding-bottom u-custom-top-bottom-menu-spacing u-nav-link u-text-active-palette-1-base u-text-hover-palette-2-base\" href=\"#\">\n              <svg class=\"u-svg-link\" viewbox=\"0 0 24 24\"><use xlink:href=\"#menu-hamburger\"/></svg>\n              <svg class=\"u-svg-content\" version=\"1.1\" id=\"menu-hamburger\" viewbox=\"0 0 16 16\" x=\"0px\" y=\"0px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\"><g><rect y=\"1\" width=\"16\" height=\"2\"/><rect y=\"7\" width=\"16\" height=\"2\"/><rect y=\"13\" width=\"16\" height=\"2\"/>\n</g></svg>\n            </a>\n          </div>\n          <div class=\"u-custom-menu u-nav-container\">\n            <ul class=\"u-nav u-unstyled u-nav-1\"><li class=\"u-nav-item\"><a class=\"u-button-style u-nav-link u-text-active-palette-1-base u-text-hover-palette-2-base\" href=\"https://gardenia-tian.github.io/\" style=\"padding: 10px 20px;\">READ MORE</a>\n</li></ul>\n          </div>\n          <div class=\"u-custom-menu u-nav-container-collapse\">\n            <div class=\"u-black u-container-style u-inner-container-layout u-opacity u-opacity-95 u-sidenav\">\n              <div class=\"u-inner-container-layout u-sidenav-overflow\">\n                <div class=\"u-menu-close\"></div>\n                <ul class=\"u-align-center u-nav u-popupmenu-items u-unstyled u-nav-2\"><li class=\"u-nav-item\"><a class=\"u-button-style u-nav-link\" href=\"https://gardenia-tian.github.io/\">READ MORE</a>\n</li></ul>\n              </div>\n            </div>\n            <div class=\"u-black u-menu-overlay u-opacity u-opacity-70\"></div>\n          </div>\n        </nav>\n      </div></header>\n    <section class=\"u-align-center u-clearfix u-image u-section-1\" id=\"carousel_7c8e\" data-image-width=\"1980\" data-image-height=\"1320\">\n      <div class=\"u-clearfix u-sheet u-valign-bottom-sm u-valign-bottom-xs u-sheet-1\">\n        <h2 class=\"u-text u-text-1\">HELLO</h2>\n        <p class=\"u-large-text u-text u-text-variant u-text-2\"> Welcome to get to know me.</p>\n        <div class=\"u-clearfix u-expanded-width u-layout-wrap u-layout-wrap-1\">\n          <div class=\"u-gutter-0 u-layout\">\n            <div class=\"u-layout-row\">\n              <div class=\"u-align-center-sm u-align-center-xs u-align-left-lg u-align-left-md u-align-left-xl u-container-style u-layout-cell u-size-20 u-layout-cell-1\">\n                <div class=\"u-container-layout u-container-layout-1\">\n                  <h4 class=\"u-custom-font u-text u-text-3\">Details</h4>\n                  <p class=\"u-text u-text-4\">\n                    <span style=\"font-weight: 700;\">Name: </span>\n                    <br>Gardenia Tian<br>\n                    <span style=\"font-weight: 700;\">Age: </span>\n                    <br>24 years <span style=\"font-weight: 700;\">\n                      <br>Location: \n                    </span>\n                    <br> Harbin, Heilongjiang Province, China\n                  </p>\n                </div>\n              </div>\n              <div class=\"u-align-center-sm u-align-center-xs u-align-left-lg u-align-left-md u-align-left-xl u-container-style u-layout-cell u-size-22 u-layout-cell-2\">\n                <div class=\"u-container-layout u-valign-top u-container-layout-2\">\n                  <h4 class=\"u-custom-font u-text u-text-5\">About me</h4>\n                  <p class=\"u-align-center u-text u-text-6\">喜欢阅读，喜欢运动，喜欢吃<br>不喜欢说话，不喜欢角瓜，不喜欢蚊子<br>\n                    <br>这里是我的个人站点“Peles”<br>记录学习内容<br>也记录日常<br>这是我的小基地<br>如果你认出了我是谁<br>请装作不知道\n                  </p>\n                  <a href=\"#\" class=\"u-active-custom-color-1 u-border-3 u-border-active-custom-color-1 u-border-custom-color-1 u-border-hover-custom-color-1 u-btn u-btn-round u-button-style u-hover-custom-color-1 u-none u-radius-50 u-text-active-white u-text-black u-text-hover-white u-btn-1\">Contact Me</a>\n                </div>\n              </div>\n              <div class=\"u-align-center u-container-style u-custom-color-1 u-layout-cell u-size-18 u-layout-cell-3\">\n                <div class=\"u-container-layout u-container-layout-3\">\n                  <div class=\"u-image u-image-circle u-preserve-proportions u-image-1\" alt data-image-width=\"1079\" data-image-height=\"1080\"></div>\n                  <h3 class=\"u-custom-font u-text u-text-default u-text-7\"> Hello, I'm Gardenia</h3>\n                  <p class=\"u-custom-font u-font-pt-sans u-text u-text-8\"> 计算机科学与技术专业<br>目前在哈尔滨佛学院就读研究生<br>是个热爱生活的科研小白\n                  </p>\n                  <div class=\"u-social-icons u-spacing-12 u-social-icons-1\">\n                    <a class=\"u-social-url\" title=\"facebook\" target=\"_blank\" href=\"https://facebook.com/name\"><span class=\"u-icon u-social-facebook u-social-icon u-text-white\"><svg class=\"u-svg-link\" preserveaspectratio=\"xMidYMin slice\" viewbox=\"0 0 112 112\" style=\"\"><use xlink:href=\"#svg-4f8c\"/></svg><svg class=\"u-svg-content\" viewbox=\"0 0 112 112\" x=\"0\" y=\"0\" id=\"svg-4f8c\"><path fill=\"currentColor\" d=\"M75.5,28.8H65.4c-1.5,0-4,0.9-4,4.3v9.4h13.9l-1.5,15.8H61.4v45.1H42.8V58.3h-8.8V42.4h8.8V32.2\nc0-7.4,3.4-18.8,18.8-18.8h13.8v15.4H75.5z\"/></svg></span>\n                    </a>\n                    <a class=\"u-social-url\" title=\"twitter\" target=\"_blank\" href=\"https://twitter.com/name\"><span class=\"u-icon u-social-icon u-social-twitter u-text-white\"><svg class=\"u-svg-link\" preserveaspectratio=\"xMidYMin slice\" viewbox=\"0 0 112 112\" style=\"\"><use xlink:href=\"#svg-e83c\"/></svg><svg class=\"u-svg-content\" viewbox=\"0 0 112 112\" x=\"0\" y=\"0\" id=\"svg-e83c\"><path fill=\"currentColor\" d=\"M92.2,38.2c0,0.8,0,1.6,0,2.3c0,24.3-18.6,52.4-52.6,52.4c-10.6,0.1-20.2-2.9-28.5-8.2\n\tc1.4,0.2,2.9,0.2,4.4,0.2c8.7,0,16.7-2.9,23-7.9c-8.1-0.2-14.9-5.5-17.3-12.8c1.1,0.2,2.4,0.2,3.4,0.2c1.6,0,3.3-0.2,4.8-0.7\n\tc-8.4-1.6-14.9-9.2-14.9-18c0-0.2,0-0.2,0-0.2c2.5,1.4,5.4,2.2,8.4,2.3c-5-3.3-8.3-8.9-8.3-15.4c0-3.4,1-6.5,2.5-9.2\n\tc9.1,11.1,22.7,18.5,38,19.2c-0.2-1.4-0.4-2.8-0.4-4.3c0.1-10,8.3-18.2,18.5-18.2c5.4,0,10.1,2.2,13.5,5.7c4.3-0.8,8.1-2.3,11.7-4.5\n\tc-1.4,4.3-4.3,7.9-8.1,10.1c3.7-0.4,7.3-1.4,10.6-2.9C98.9,32.3,95.7,35.5,92.2,38.2z\"/></svg></span>\n                    </a>\n                    <a class=\"u-social-url\" title=\"instagram\" target=\"_blank\" href=\"https://instagram.com/name\"><span class=\"u-icon u-social-icon u-social-instagram u-text-white\"><svg class=\"u-svg-link\" preserveaspectratio=\"xMidYMin slice\" viewbox=\"0 0 112 112\" style=\"\"><use xlink:href=\"#svg-11e5\"/></svg><svg class=\"u-svg-content\" viewbox=\"0 0 112 112\" x=\"0\" y=\"0\" id=\"svg-11e5\"><path fill=\"currentColor\" d=\"M55.9,32.9c-12.8,0-23.2,10.4-23.2,23.2s10.4,23.2,23.2,23.2s23.2-10.4,23.2-23.2S68.7,32.9,55.9,32.9z\n\t M55.9,69.4c-7.4,0-13.3-6-13.3-13.3c-0.1-7.4,6-13.3,13.3-13.3s13.3,6,13.3,13.3C69.3,63.5,63.3,69.4,55.9,69.4z\"/><path fill=\"#FFFFFF\" d=\"M79.7,26.8c-3,0-5.4,2.5-5.4,5.4s2.5,5.4,5.4,5.4c3,0,5.4-2.5,5.4-5.4S82.7,26.8,79.7,26.8z\"/><path fill=\"currentColor\" d=\"M78.2,11H33.5C21,11,10.8,21.3,10.8,33.7v44.7c0,12.6,10.2,22.8,22.7,22.8h44.7c12.6,0,22.7-10.2,22.7-22.7\n\tV33.7C100.8,21.1,90.6,11,78.2,11z M91,78.4c0,7.1-5.8,12.8-12.8,12.8H33.5c-7.1,0-12.8-5.8-12.8-12.8V33.7\n\tc0-7.1,5.8-12.8,12.8-12.8h44.7c7.1,0,12.8,5.8,12.8,12.8V78.4z\"/></svg></span>\n                    </a>\n                    <a class=\"u-social-url\" target=\"_blank\" data-type=\"Custom\" title=\"Custom\" href><span class=\"u-icon u-social-custom u-social-icon u-text-white u-icon-4\"><svg class=\"u-svg-link\" preserveaspectratio=\"xMidYMin slice\" viewbox=\"0 0 512 512\" style=\"\"><use xlink:href=\"#svg-211f\"/></svg><svg class=\"u-svg-content\" viewbox=\"0 0 512 512\" x=\"0px\" y=\"0px\" id=\"svg-211f\" style=\"enable-background:new 0 0 512 512;\"><g><g><rect y=\"160\" width=\"114.496\" height=\"352\"/>\n</g>\n</g><g><g><path d=\"M426.368,164.128c-1.216-0.384-2.368-0.8-3.648-1.152c-1.536-0.352-3.072-0.64-4.64-0.896    c-6.08-1.216-12.736-2.08-20.544-2.08c-66.752,0-109.088,48.544-123.04,67.296V160H160v352h114.496V320    c0,0,86.528-120.512,123.04-32c0,79.008,0,224,0,224H512V274.464C512,221.28,475.552,176.96,426.368,164.128z\"/>\n</g>\n</g><g><g><circle cx=\"56\" cy=\"56\" r=\"56\"/>\n</g>\n</g></svg></span>\n                    </a>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n    \n    \n    <footer class=\"u-align-center u-clearfix u-footer u-grey-80 u-footer\" id=\"sec-7d47\"><div class=\"u-clearfix u-sheet u-valign-middle u-sheet-1\">\n        <p class=\"u-small-text u-text u-text-variant u-text-1\">学习本身就是足够幸福的过程 。&nbsp; &nbsp;——长洱</p>\n      </div></footer>\n    <section class=\"u-backlink u-clearfix u-grey-80\">\n      <a class=\"u-link\" href=\"https://nicepage.com/website-templates\" target=\"_blank\">\n        <span>Website Templates</span>\n      </a>\n      <p class=\"u-text\">\n        <span>created with</span>\n      </p>\n      <a class=\"u-link\" href target=\"_blank\">\n        <span>Website Builder Software</span>\n      </a>. \n    </section>\n  \n</body></html>","site":{"data":{}},"excerpt":"","more":"\n<!DOCTYPE html>\n<html style=\"font-size: 16px;\" lang=\"en\"><head>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta charset=\"utf-8\">\n    <meta name=\"keywords\" content=\"Profile\">\n    <meta name=\"description\" content>\n    <title>Copy of Contact 1</title>\n    <link rel=\"stylesheet\" href=\"//capp.nicepage.com/3c9198698ecc54a74b7f2fd9f895f61126296300/nicepage.css\" media=\"screen\">\n<link rel=\"stylesheet\" href=\"/nicepage-site.css\" media=\"screen\">\n<link rel=\"stylesheet\" href=\"Copy-of-Contact-1.css\" media=\"screen\">\n    <script class=\"u-script\" type=\"text/javascript\" src=\"//capp.nicepage.com/assets/jquery-3.5.1.min.js\" defer></script>\n    <script class=\"u-script\" type=\"text/javascript\" src=\"//capp.nicepage.com/3c9198698ecc54a74b7f2fd9f895f61126296300/nicepage.js\" defer></script>\n    <meta name=\"generator\" content=\"Nicepage 5.0.20, nicepage.com\">\n    <link id=\"u-theme-google-font\" rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:100,100i,300,300i,400,400i,500,500i,700,700i,900,900i|Open+Sans:300,300i,400,400i,500,500i,600,600i,700,700i,800,800i\">\n    <link id=\"u-page-google-font\" rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Montserrat:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i|PT+Sans:400,400i,700,700i|Allerta:400|PT+Sans+Caption:400,700\">\n    \n    \n    <script type=\"application/ld+json\">{\n\t\t\"@context\": \"http://schema.org\",\n\t\t\"@type\": \"Organization\",\n\t\t\"name\": \"Peles\",\n\t\t\"url\": \"/\",\n\t\t\"logo\": \"//images01.nicepagecdn.com/5370bda36e9fb929ee41036a/daf80ef95e605abb868ac076/shiliu.svg\"\n}</script>\n    <meta name=\"theme-color\" content=\"#478ac9\">\n    <meta property=\"og:title\" content=\"Copy of Contact 1\">\n    <meta property=\"og:description\" content>\n    <meta property=\"og:type\" content=\"website\">\n    <link rel=\"canonical\" href=\"/\">\n  </head>\n  <body data-home-page=\"https://gardeniatian.nicepage.io/Copy-of-Contact-1.html?version=ec3cbcb0-a294-4d36-bd3a-245a72ad2426\" data-home-page-title=\"Copy of Contact 1\" class=\"u-body u-xl-mode\" data-lang=\"en\"><header class=\"u-clearfix u-header u-header\" id=\"sec-5562\"><div class=\"u-clearfix u-sheet u-valign-middle u-sheet-1\">\n        <a href=\"https://nicepage.com\" class=\"u-image u-logo u-image-1\" data-image-width=\"200\" data-image-height=\"200\">\n          <img src=\"//images01.nicepagecdn.com/5370bda36e9fb929ee41036a/daf80ef95e605abb868ac076/shiliu.svg\" class=\"u-logo-image u-logo-image-1\">\n        </a>\n        <nav class=\"u-menu u-menu-one-level u-offcanvas u-menu-1\">\n          <div class=\"menu-collapse\" style=\"font-size: 1rem; letter-spacing: 0px;\">\n            <a class=\"u-button-style u-custom-left-right-menu-spacing u-custom-padding-bottom u-custom-top-bottom-menu-spacing u-nav-link u-text-active-palette-1-base u-text-hover-palette-2-base\" href=\"#\">\n              <svg class=\"u-svg-link\" viewbox=\"0 0 24 24\"><use xlink:href=\"#menu-hamburger\"/></svg>\n              <svg class=\"u-svg-content\" version=\"1.1\" id=\"menu-hamburger\" viewbox=\"0 0 16 16\" x=\"0px\" y=\"0px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\"><g><rect y=\"1\" width=\"16\" height=\"2\"/><rect y=\"7\" width=\"16\" height=\"2\"/><rect y=\"13\" width=\"16\" height=\"2\"/>\n</g></svg>\n            </a>\n          </div>\n          <div class=\"u-custom-menu u-nav-container\">\n            <ul class=\"u-nav u-unstyled u-nav-1\"><li class=\"u-nav-item\"><a class=\"u-button-style u-nav-link u-text-active-palette-1-base u-text-hover-palette-2-base\" href=\"https://gardenia-tian.github.io/\" style=\"padding: 10px 20px;\">READ MORE</a>\n</li></ul>\n          </div>\n          <div class=\"u-custom-menu u-nav-container-collapse\">\n            <div class=\"u-black u-container-style u-inner-container-layout u-opacity u-opacity-95 u-sidenav\">\n              <div class=\"u-inner-container-layout u-sidenav-overflow\">\n                <div class=\"u-menu-close\"></div>\n                <ul class=\"u-align-center u-nav u-popupmenu-items u-unstyled u-nav-2\"><li class=\"u-nav-item\"><a class=\"u-button-style u-nav-link\" href=\"https://gardenia-tian.github.io/\">READ MORE</a>\n</li></ul>\n              </div>\n            </div>\n            <div class=\"u-black u-menu-overlay u-opacity u-opacity-70\"></div>\n          </div>\n        </nav>\n      </div></header>\n    <section class=\"u-align-center u-clearfix u-image u-section-1\" id=\"carousel_7c8e\" data-image-width=\"1980\" data-image-height=\"1320\">\n      <div class=\"u-clearfix u-sheet u-valign-bottom-sm u-valign-bottom-xs u-sheet-1\">\n        <h2 class=\"u-text u-text-1\">HELLO</h2>\n        <p class=\"u-large-text u-text u-text-variant u-text-2\"> Welcome to get to know me.</p>\n        <div class=\"u-clearfix u-expanded-width u-layout-wrap u-layout-wrap-1\">\n          <div class=\"u-gutter-0 u-layout\">\n            <div class=\"u-layout-row\">\n              <div class=\"u-align-center-sm u-align-center-xs u-align-left-lg u-align-left-md u-align-left-xl u-container-style u-layout-cell u-size-20 u-layout-cell-1\">\n                <div class=\"u-container-layout u-container-layout-1\">\n                  <h4 class=\"u-custom-font u-text u-text-3\">Details</h4>\n                  <p class=\"u-text u-text-4\">\n                    <span style=\"font-weight: 700;\">Name: </span>\n                    <br>Gardenia Tian<br>\n                    <span style=\"font-weight: 700;\">Age: </span>\n                    <br>24 years <span style=\"font-weight: 700;\">\n                      <br>Location: \n                    </span>\n                    <br> Harbin, Heilongjiang Province, China\n                  </p>\n                </div>\n              </div>\n              <div class=\"u-align-center-sm u-align-center-xs u-align-left-lg u-align-left-md u-align-left-xl u-container-style u-layout-cell u-size-22 u-layout-cell-2\">\n                <div class=\"u-container-layout u-valign-top u-container-layout-2\">\n                  <h4 class=\"u-custom-font u-text u-text-5\">About me</h4>\n                  <p class=\"u-align-center u-text u-text-6\">喜欢阅读，喜欢运动，喜欢吃<br>不喜欢说话，不喜欢角瓜，不喜欢蚊子<br>\n                    <br>这里是我的个人站点“Peles”<br>记录学习内容<br>也记录日常<br>这是我的小基地<br>如果你认出了我是谁<br>请装作不知道\n                  </p>\n                  <a href=\"#\" class=\"u-active-custom-color-1 u-border-3 u-border-active-custom-color-1 u-border-custom-color-1 u-border-hover-custom-color-1 u-btn u-btn-round u-button-style u-hover-custom-color-1 u-none u-radius-50 u-text-active-white u-text-black u-text-hover-white u-btn-1\">Contact Me</a>\n                </div>\n              </div>\n              <div class=\"u-align-center u-container-style u-custom-color-1 u-layout-cell u-size-18 u-layout-cell-3\">\n                <div class=\"u-container-layout u-container-layout-3\">\n                  <div class=\"u-image u-image-circle u-preserve-proportions u-image-1\" alt data-image-width=\"1079\" data-image-height=\"1080\"></div>\n                  <h3 class=\"u-custom-font u-text u-text-default u-text-7\"> Hello, I'm Gardenia</h3>\n                  <p class=\"u-custom-font u-font-pt-sans u-text u-text-8\"> 计算机科学与技术专业<br>目前在哈尔滨佛学院就读研究生<br>是个热爱生活的科研小白\n                  </p>\n                  <div class=\"u-social-icons u-spacing-12 u-social-icons-1\">\n                    <a class=\"u-social-url\" title=\"facebook\" target=\"_blank\" href=\"https://facebook.com/name\"><span class=\"u-icon u-social-facebook u-social-icon u-text-white\"><svg class=\"u-svg-link\" preserveaspectratio=\"xMidYMin slice\" viewbox=\"0 0 112 112\" style=\"\"><use xlink:href=\"#svg-4f8c\"/></svg><svg class=\"u-svg-content\" viewbox=\"0 0 112 112\" x=\"0\" y=\"0\" id=\"svg-4f8c\"><path fill=\"currentColor\" d=\"M75.5,28.8H65.4c-1.5,0-4,0.9-4,4.3v9.4h13.9l-1.5,15.8H61.4v45.1H42.8V58.3h-8.8V42.4h8.8V32.2\nc0-7.4,3.4-18.8,18.8-18.8h13.8v15.4H75.5z\"/></svg></span>\n                    </a>\n                    <a class=\"u-social-url\" title=\"twitter\" target=\"_blank\" href=\"https://twitter.com/name\"><span class=\"u-icon u-social-icon u-social-twitter u-text-white\"><svg class=\"u-svg-link\" preserveaspectratio=\"xMidYMin slice\" viewbox=\"0 0 112 112\" style=\"\"><use xlink:href=\"#svg-e83c\"/></svg><svg class=\"u-svg-content\" viewbox=\"0 0 112 112\" x=\"0\" y=\"0\" id=\"svg-e83c\"><path fill=\"currentColor\" d=\"M92.2,38.2c0,0.8,0,1.6,0,2.3c0,24.3-18.6,52.4-52.6,52.4c-10.6,0.1-20.2-2.9-28.5-8.2\n\tc1.4,0.2,2.9,0.2,4.4,0.2c8.7,0,16.7-2.9,23-7.9c-8.1-0.2-14.9-5.5-17.3-12.8c1.1,0.2,2.4,0.2,3.4,0.2c1.6,0,3.3-0.2,4.8-0.7\n\tc-8.4-1.6-14.9-9.2-14.9-18c0-0.2,0-0.2,0-0.2c2.5,1.4,5.4,2.2,8.4,2.3c-5-3.3-8.3-8.9-8.3-15.4c0-3.4,1-6.5,2.5-9.2\n\tc9.1,11.1,22.7,18.5,38,19.2c-0.2-1.4-0.4-2.8-0.4-4.3c0.1-10,8.3-18.2,18.5-18.2c5.4,0,10.1,2.2,13.5,5.7c4.3-0.8,8.1-2.3,11.7-4.5\n\tc-1.4,4.3-4.3,7.9-8.1,10.1c3.7-0.4,7.3-1.4,10.6-2.9C98.9,32.3,95.7,35.5,92.2,38.2z\"/></svg></span>\n                    </a>\n                    <a class=\"u-social-url\" title=\"instagram\" target=\"_blank\" href=\"https://instagram.com/name\"><span class=\"u-icon u-social-icon u-social-instagram u-text-white\"><svg class=\"u-svg-link\" preserveaspectratio=\"xMidYMin slice\" viewbox=\"0 0 112 112\" style=\"\"><use xlink:href=\"#svg-11e5\"/></svg><svg class=\"u-svg-content\" viewbox=\"0 0 112 112\" x=\"0\" y=\"0\" id=\"svg-11e5\"><path fill=\"currentColor\" d=\"M55.9,32.9c-12.8,0-23.2,10.4-23.2,23.2s10.4,23.2,23.2,23.2s23.2-10.4,23.2-23.2S68.7,32.9,55.9,32.9z\n\t M55.9,69.4c-7.4,0-13.3-6-13.3-13.3c-0.1-7.4,6-13.3,13.3-13.3s13.3,6,13.3,13.3C69.3,63.5,63.3,69.4,55.9,69.4z\"/><path fill=\"#FFFFFF\" d=\"M79.7,26.8c-3,0-5.4,2.5-5.4,5.4s2.5,5.4,5.4,5.4c3,0,5.4-2.5,5.4-5.4S82.7,26.8,79.7,26.8z\"/><path fill=\"currentColor\" d=\"M78.2,11H33.5C21,11,10.8,21.3,10.8,33.7v44.7c0,12.6,10.2,22.8,22.7,22.8h44.7c12.6,0,22.7-10.2,22.7-22.7\n\tV33.7C100.8,21.1,90.6,11,78.2,11z M91,78.4c0,7.1-5.8,12.8-12.8,12.8H33.5c-7.1,0-12.8-5.8-12.8-12.8V33.7\n\tc0-7.1,5.8-12.8,12.8-12.8h44.7c7.1,0,12.8,5.8,12.8,12.8V78.4z\"/></svg></span>\n                    </a>\n                    <a class=\"u-social-url\" target=\"_blank\" data-type=\"Custom\" title=\"Custom\" href><span class=\"u-icon u-social-custom u-social-icon u-text-white u-icon-4\"><svg class=\"u-svg-link\" preserveaspectratio=\"xMidYMin slice\" viewbox=\"0 0 512 512\" style=\"\"><use xlink:href=\"#svg-211f\"/></svg><svg class=\"u-svg-content\" viewbox=\"0 0 512 512\" x=\"0px\" y=\"0px\" id=\"svg-211f\" style=\"enable-background:new 0 0 512 512;\"><g><g><rect y=\"160\" width=\"114.496\" height=\"352\"/>\n</g>\n</g><g><g><path d=\"M426.368,164.128c-1.216-0.384-2.368-0.8-3.648-1.152c-1.536-0.352-3.072-0.64-4.64-0.896    c-6.08-1.216-12.736-2.08-20.544-2.08c-66.752,0-109.088,48.544-123.04,67.296V160H160v352h114.496V320    c0,0,86.528-120.512,123.04-32c0,79.008,0,224,0,224H512V274.464C512,221.28,475.552,176.96,426.368,164.128z\"/>\n</g>\n</g><g><g><circle cx=\"56\" cy=\"56\" r=\"56\"/>\n</g>\n</g></svg></span>\n                    </a>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n    \n    \n    <footer class=\"u-align-center u-clearfix u-footer u-grey-80 u-footer\" id=\"sec-7d47\"><div class=\"u-clearfix u-sheet u-valign-middle u-sheet-1\">\n        <p class=\"u-small-text u-text u-text-variant u-text-1\">学习本身就是足够幸福的过程 。&nbsp; &nbsp;——长洱</p>\n      </div></footer>\n    <section class=\"u-backlink u-clearfix u-grey-80\">\n      <a class=\"u-link\" href=\"https://nicepage.com/website-templates\" target=\"_blank\">\n        <span>Website Templates</span>\n      </a>\n      <p class=\"u-text\">\n        <span>created with</span>\n      </p>\n      <a class=\"u-link\" href target=\"_blank\">\n        <span>Website Builder Software</span>\n      </a>. \n    </section>\n  \n</body></html>"}],"Post":[{"title":"第一篇博客","date":"2022-11-09T09:39:28.000Z","description":"博客生活正式启航~","cover":"/covers/1.jpg","typora-root-url":"启程","_content":"\n# 年轻人的第一篇博客\n\nGitHub的博客仓库很早就创立了, 但是拖了很久都没有部署. 总是因为各种原因退缩, 这次终于把界面什么的都配置了一下, 算是勉勉强强能看了, 还有很多功能还没有开发, 这些还需要日后一点一点探索, 不过有了GitHub博客也终于向一名合格的程序员迈进了一步, 希望以后能在这里记录一下自己的学习笔记, 日常心得, 生活碎片, 也希望能给浏览到博客的朋友带来一点点帮助.\n\n![](1.jpg)\n","source":"_posts/启程.md","raw":"---\ntitle: 第一篇博客\ndate: 2022-11-09 17:39:28\ntags: [随笔]\ncategories: [陶然集]\ndescription: 博客生活正式启航~\ncover: /covers/1.jpg\ntypora-root-url: 启程\n---\n\n# 年轻人的第一篇博客\n\nGitHub的博客仓库很早就创立了, 但是拖了很久都没有部署. 总是因为各种原因退缩, 这次终于把界面什么的都配置了一下, 算是勉勉强强能看了, 还有很多功能还没有开发, 这些还需要日后一点一点探索, 不过有了GitHub博客也终于向一名合格的程序员迈进了一步, 希望以后能在这里记录一下自己的学习笔记, 日常心得, 生活碎片, 也希望能给浏览到博客的朋友带来一点点帮助.\n\n![](1.jpg)\n","slug":"启程","published":1,"updated":"2022-11-18T06:57:31.934Z","_id":"clam3aij00003hwue87bkf2nn","comments":1,"layout":"post","photos":[],"link":"","content":"<h1>年轻人的第一篇博客</h1>\n<p>GitHub的博客仓库很早就创立了, 但是拖了很久都没有部署. 总是因为各种原因退缩, 这次终于把界面什么的都配置了一下, 算是勉勉强强能看了, 还有很多功能还没有开发, 这些还需要日后一点一点探索, 不过有了GitHub博客也终于向一名合格的程序员迈进了一步, 希望以后能在这里记录一下自己的学习笔记, 日常心得, 生活碎片, 也希望能给浏览到博客的朋友带来一点点帮助.</p>\n<p><img src=\"/post/1.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<h1>年轻人的第一篇博客</h1>\n<p>GitHub的博客仓库很早就创立了, 但是拖了很久都没有部署. 总是因为各种原因退缩, 这次终于把界面什么的都配置了一下, 算是勉勉强强能看了, 还有很多功能还没有开发, 这些还需要日后一点一点探索, 不过有了GitHub博客也终于向一名合格的程序员迈进了一步, 希望以后能在这里记录一下自己的学习笔记, 日常心得, 生活碎片, 也希望能给浏览到博客的朋友带来一点点帮助.</p>\n<p><img src=\"/post/1.jpg\" alt></p>\n"},{"title":"Reproducibility Badges","date":"2022-11-18T06:01:56.000Z","cover":"https://www.acm.org/binaries/content/gallery/acm/publications/artifact-review-v1_1-badges/artifacts_evaluated_functional_v1_1.png","typora-root-url":"Reproducibility-Badges","_content":"\n# Reproducibility Badges\n\n最近SC22正在如火如荼地进行, 作为一个科研小白, 我也有简单地远程围观这次会议. 在阅读SC会议的论文的时候, 我们会发现论文上总是有三个圆形的小标志, 所以不禁好奇这个是个什么东西, 经过一番查阅资料这里简单一下这个标志的含义.\n\n![](1.png)\n\n这三个标志是Reproducibility Badges, 也就是再现性徽章. ACM定义了几个再现性徽章，涵盖从轻到强的再现性参与的几个级别，\n\n## Artifacts Evaluated\n\n此徽章适用于相关工件已成功完成独立审核的论文。此徽章不需要公开物品。然而，它们确实需要提供给审阅者。区分了两个级别，在任何情况下只能应用其中一个级别.\n\n### Artifacts Evaluated – Functional v1.1\n\n与研究相关的人工制品被发现是有记录的、一致的、完整的、可操作的，并且包括适当的验证和确认证据.\n\n![img](https://www.acm.org/binaries/content/gallery/acm/publications/artifact-review-v1_1-badges/artifacts_evaluated_functional_v1_1.png)\n\n### Artifacts Evaluated – Reusable v1.1\n\n与论文相关的工件的质量大大超过了最小功能。也就是说，它们具有已评估工件的所有质量——功能级别，但除此之外，它们都经过了非常仔细的记录和良好的结构，以便于重用和重新调整用途。特别是，严格遵守研究界对这类文物的规范和标准。\n\n![img](https://www.acm.org/binaries/content/gallery/acm/publications/artifact-review-v1_1-badges/artifacts_evaluated_reusable_v1_1.png)\n\n## Artifacts Available\n\n此徽章适用于相关工件已永久可供检索的论文。\n\n### Artifacts Available v1.1\n\n作者创建的与本文相关的工件已放置在可公开访问的档案库中。提供了指向该存储库的DOI或链接以及对象的唯一标识符。\n\n![img](https://www.acm.org/binaries/content/gallery/acm/publications/artifact-review-v1_1-badges/artifacts_available_v1_1.png)\n\n## Results Validated \n\n此徽章适用于作者以外的个人或团队成功获得论文主要结果的论文。区分两个级别.\n\n### Results Reproduced v1.1\n\n![img](https://www.acm.org/binaries/content/gallery/acm/publications/artifact-review-v1_1-badges/results_reproduced_v1_1.png)\n\n论文的主要结果是由作者以外的个人或团队进行的后续研究，部分使用作者提供的产品。\n\n### Results Replicated v1.1\n\n论文的主要结果是由作者以外的个人或团队在后续研究中独立获得的，没有使用作者提供的产品。\n\n![img](https://www.acm.org/binaries/content/gallery/acm/publications/artifact-review-v1_1-badges/results_replicated_v1_1.png)\n","source":"_posts/Reproducibility-Badges.md","raw":"---\ntitle: Reproducibility Badges\ndate: 2022-11-18 14:01:56\ntags: [conference, SC]\ncategories: [清浅录]\ncover: https://www.acm.org/binaries/content/gallery/acm/publications/artifact-review-v1_1-badges/artifacts_evaluated_functional_v1_1.png\ntypora-root-url: Reproducibility-Badges\n---\n\n# Reproducibility Badges\n\n最近SC22正在如火如荼地进行, 作为一个科研小白, 我也有简单地远程围观这次会议. 在阅读SC会议的论文的时候, 我们会发现论文上总是有三个圆形的小标志, 所以不禁好奇这个是个什么东西, 经过一番查阅资料这里简单一下这个标志的含义.\n\n![](1.png)\n\n这三个标志是Reproducibility Badges, 也就是再现性徽章. ACM定义了几个再现性徽章，涵盖从轻到强的再现性参与的几个级别，\n\n## Artifacts Evaluated\n\n此徽章适用于相关工件已成功完成独立审核的论文。此徽章不需要公开物品。然而，它们确实需要提供给审阅者。区分了两个级别，在任何情况下只能应用其中一个级别.\n\n### Artifacts Evaluated – Functional v1.1\n\n与研究相关的人工制品被发现是有记录的、一致的、完整的、可操作的，并且包括适当的验证和确认证据.\n\n![img](https://www.acm.org/binaries/content/gallery/acm/publications/artifact-review-v1_1-badges/artifacts_evaluated_functional_v1_1.png)\n\n### Artifacts Evaluated – Reusable v1.1\n\n与论文相关的工件的质量大大超过了最小功能。也就是说，它们具有已评估工件的所有质量——功能级别，但除此之外，它们都经过了非常仔细的记录和良好的结构，以便于重用和重新调整用途。特别是，严格遵守研究界对这类文物的规范和标准。\n\n![img](https://www.acm.org/binaries/content/gallery/acm/publications/artifact-review-v1_1-badges/artifacts_evaluated_reusable_v1_1.png)\n\n## Artifacts Available\n\n此徽章适用于相关工件已永久可供检索的论文。\n\n### Artifacts Available v1.1\n\n作者创建的与本文相关的工件已放置在可公开访问的档案库中。提供了指向该存储库的DOI或链接以及对象的唯一标识符。\n\n![img](https://www.acm.org/binaries/content/gallery/acm/publications/artifact-review-v1_1-badges/artifacts_available_v1_1.png)\n\n## Results Validated \n\n此徽章适用于作者以外的个人或团队成功获得论文主要结果的论文。区分两个级别.\n\n### Results Reproduced v1.1\n\n![img](https://www.acm.org/binaries/content/gallery/acm/publications/artifact-review-v1_1-badges/results_reproduced_v1_1.png)\n\n论文的主要结果是由作者以外的个人或团队进行的后续研究，部分使用作者提供的产品。\n\n### Results Replicated v1.1\n\n论文的主要结果是由作者以外的个人或团队在后续研究中独立获得的，没有使用作者提供的产品。\n\n![img](https://www.acm.org/binaries/content/gallery/acm/publications/artifact-review-v1_1-badges/results_replicated_v1_1.png)\n","slug":"Reproducibility-Badges","published":1,"updated":"2022-11-18T11:43:21.116Z","_id":"clam3mwm90000youe7oye35gn","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Reproducibility-Badges\"><a href=\"#Reproducibility-Badges\" class=\"headerlink\" title=\"Reproducibility Badges\"></a>Reproducibility Badges</h1><p>最近SC22正在如火如荼地进行, 作为一个科研小白, 我也有简单地远程围观这次会议. 在阅读SC会议的论文的时候, 我们会发现论文上总是有三个圆形的小标志, 所以不禁好奇这个是个什么东西, 经过一番查阅资料这里简单一下这个标志的含义.</p>\n<p><img src=\"/post/Reproducibility-Badges/1.png\"></p>\n<p>这三个标志是Reproducibility Badges, 也就是再现性徽章. ACM定义了几个再现性徽章，涵盖从轻到强的再现性参与的几个级别，</p>\n<h2 id=\"Artifacts-Evaluated\"><a href=\"#Artifacts-Evaluated\" class=\"headerlink\" title=\"Artifacts Evaluated\"></a>Artifacts Evaluated</h2><p>此徽章适用于相关工件已成功完成独立审核的论文。此徽章不需要公开物品。然而，它们确实需要提供给审阅者。区分了两个级别，在任何情况下只能应用其中一个级别.</p>\n<h3 id=\"Artifacts-Evaluated-–-Functional-v1-1\"><a href=\"#Artifacts-Evaluated-–-Functional-v1-1\" class=\"headerlink\" title=\"Artifacts Evaluated – Functional v1.1\"></a>Artifacts Evaluated – Functional v1.1</h3><p>与研究相关的人工制品被发现是有记录的、一致的、完整的、可操作的，并且包括适当的验证和确认证据.</p>\n<p><img src=\"https://www.acm.org/binaries/content/gallery/acm/publications/artifact-review-v1_1-badges/artifacts_evaluated_functional_v1_1.png\" alt=\"img\"></p>\n<h3 id=\"Artifacts-Evaluated-–-Reusable-v1-1\"><a href=\"#Artifacts-Evaluated-–-Reusable-v1-1\" class=\"headerlink\" title=\"Artifacts Evaluated – Reusable v1.1\"></a>Artifacts Evaluated – Reusable v1.1</h3><p>与论文相关的工件的质量大大超过了最小功能。也就是说，它们具有已评估工件的所有质量——功能级别，但除此之外，它们都经过了非常仔细的记录和良好的结构，以便于重用和重新调整用途。特别是，严格遵守研究界对这类文物的规范和标准。</p>\n<p><img src=\"https://www.acm.org/binaries/content/gallery/acm/publications/artifact-review-v1_1-badges/artifacts_evaluated_reusable_v1_1.png\" alt=\"img\"></p>\n<h2 id=\"Artifacts-Available\"><a href=\"#Artifacts-Available\" class=\"headerlink\" title=\"Artifacts Available\"></a>Artifacts Available</h2><p>此徽章适用于相关工件已永久可供检索的论文。</p>\n<h3 id=\"Artifacts-Available-v1-1\"><a href=\"#Artifacts-Available-v1-1\" class=\"headerlink\" title=\"Artifacts Available v1.1\"></a>Artifacts Available v1.1</h3><p>作者创建的与本文相关的工件已放置在可公开访问的档案库中。提供了指向该存储库的DOI或链接以及对象的唯一标识符。</p>\n<p><img src=\"https://www.acm.org/binaries/content/gallery/acm/publications/artifact-review-v1_1-badges/artifacts_available_v1_1.png\" alt=\"img\"></p>\n<h2 id=\"Results-Validated\"><a href=\"#Results-Validated\" class=\"headerlink\" title=\"Results Validated\"></a>Results Validated</h2><p>此徽章适用于作者以外的个人或团队成功获得论文主要结果的论文。区分两个级别.</p>\n<h3 id=\"Results-Reproduced-v1-1\"><a href=\"#Results-Reproduced-v1-1\" class=\"headerlink\" title=\"Results Reproduced v1.1\"></a>Results Reproduced v1.1</h3><p><img src=\"https://www.acm.org/binaries/content/gallery/acm/publications/artifact-review-v1_1-badges/results_reproduced_v1_1.png\" alt=\"img\"></p>\n<p>论文的主要结果是由作者以外的个人或团队进行的后续研究，部分使用作者提供的产品。</p>\n<h3 id=\"Results-Replicated-v1-1\"><a href=\"#Results-Replicated-v1-1\" class=\"headerlink\" title=\"Results Replicated v1.1\"></a>Results Replicated v1.1</h3><p>论文的主要结果是由作者以外的个人或团队在后续研究中独立获得的，没有使用作者提供的产品。</p>\n<p><img src=\"https://www.acm.org/binaries/content/gallery/acm/publications/artifact-review-v1_1-badges/results_replicated_v1_1.png\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Reproducibility-Badges\"><a href=\"#Reproducibility-Badges\" class=\"headerlink\" title=\"Reproducibility Badges\"></a>Reproducibility Badges</h1><p>最近SC22正在如火如荼地进行, 作为一个科研小白, 我也有简单地远程围观这次会议. 在阅读SC会议的论文的时候, 我们会发现论文上总是有三个圆形的小标志, 所以不禁好奇这个是个什么东西, 经过一番查阅资料这里简单一下这个标志的含义.</p>\n<p><img src=\"/post/Reproducibility-Badges/1.png\"></p>\n<p>这三个标志是Reproducibility Badges, 也就是再现性徽章. ACM定义了几个再现性徽章，涵盖从轻到强的再现性参与的几个级别，</p>\n<h2 id=\"Artifacts-Evaluated\"><a href=\"#Artifacts-Evaluated\" class=\"headerlink\" title=\"Artifacts Evaluated\"></a>Artifacts Evaluated</h2><p>此徽章适用于相关工件已成功完成独立审核的论文。此徽章不需要公开物品。然而，它们确实需要提供给审阅者。区分了两个级别，在任何情况下只能应用其中一个级别.</p>\n<h3 id=\"Artifacts-Evaluated-–-Functional-v1-1\"><a href=\"#Artifacts-Evaluated-–-Functional-v1-1\" class=\"headerlink\" title=\"Artifacts Evaluated – Functional v1.1\"></a>Artifacts Evaluated – Functional v1.1</h3><p>与研究相关的人工制品被发现是有记录的、一致的、完整的、可操作的，并且包括适当的验证和确认证据.</p>\n<p><img src=\"https://www.acm.org/binaries/content/gallery/acm/publications/artifact-review-v1_1-badges/artifacts_evaluated_functional_v1_1.png\" alt=\"img\"></p>\n<h3 id=\"Artifacts-Evaluated-–-Reusable-v1-1\"><a href=\"#Artifacts-Evaluated-–-Reusable-v1-1\" class=\"headerlink\" title=\"Artifacts Evaluated – Reusable v1.1\"></a>Artifacts Evaluated – Reusable v1.1</h3><p>与论文相关的工件的质量大大超过了最小功能。也就是说，它们具有已评估工件的所有质量——功能级别，但除此之外，它们都经过了非常仔细的记录和良好的结构，以便于重用和重新调整用途。特别是，严格遵守研究界对这类文物的规范和标准。</p>\n<p><img src=\"https://www.acm.org/binaries/content/gallery/acm/publications/artifact-review-v1_1-badges/artifacts_evaluated_reusable_v1_1.png\" alt=\"img\"></p>\n<h2 id=\"Artifacts-Available\"><a href=\"#Artifacts-Available\" class=\"headerlink\" title=\"Artifacts Available\"></a>Artifacts Available</h2><p>此徽章适用于相关工件已永久可供检索的论文。</p>\n<h3 id=\"Artifacts-Available-v1-1\"><a href=\"#Artifacts-Available-v1-1\" class=\"headerlink\" title=\"Artifacts Available v1.1\"></a>Artifacts Available v1.1</h3><p>作者创建的与本文相关的工件已放置在可公开访问的档案库中。提供了指向该存储库的DOI或链接以及对象的唯一标识符。</p>\n<p><img src=\"https://www.acm.org/binaries/content/gallery/acm/publications/artifact-review-v1_1-badges/artifacts_available_v1_1.png\" alt=\"img\"></p>\n<h2 id=\"Results-Validated\"><a href=\"#Results-Validated\" class=\"headerlink\" title=\"Results Validated\"></a>Results Validated</h2><p>此徽章适用于作者以外的个人或团队成功获得论文主要结果的论文。区分两个级别.</p>\n<h3 id=\"Results-Reproduced-v1-1\"><a href=\"#Results-Reproduced-v1-1\" class=\"headerlink\" title=\"Results Reproduced v1.1\"></a>Results Reproduced v1.1</h3><p><img src=\"https://www.acm.org/binaries/content/gallery/acm/publications/artifact-review-v1_1-badges/results_reproduced_v1_1.png\" alt=\"img\"></p>\n<p>论文的主要结果是由作者以外的个人或团队进行的后续研究，部分使用作者提供的产品。</p>\n<h3 id=\"Results-Replicated-v1-1\"><a href=\"#Results-Replicated-v1-1\" class=\"headerlink\" title=\"Results Replicated v1.1\"></a>Results Replicated v1.1</h3><p>论文的主要结果是由作者以外的个人或团队在后续研究中独立获得的，没有使用作者提供的产品。</p>\n<p><img src=\"https://www.acm.org/binaries/content/gallery/acm/publications/artifact-review-v1_1-badges/results_replicated_v1_1.png\" alt=\"img\"></p>\n"},{"title":"RDMA技术解读","date":"2022-11-18T13:11:09.000Z","cover":"https://img-blog.csdnimg.cn/1b2704ac4511494e8c4c1348d7ad4529.png","typora-root-url":"RDMA技术解读","_content":"\n# RDMA技术解读\n\n本文参考[技术蛋老师讲解RDMA的视频]([揭秘网络技术中的“爱马仕”，12分钟看懂RDMA_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1ZY4y1L7Xq/?spm_id_from=333.337.search-card.all.click&vd_source=aad0e5152e96b4bf095d0017d639153b)), [It_server技术分享的视频]([学习分享：浅谈RDMA技术_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1QL411G7wo/?spm_id_from=333.337.search-card.all.click&vd_source=aad0e5152e96b4bf095d0017d639153b))侵删\n\n## 传统Socket通信\n\n![image-20221118211738044](image-20221118211738044.png)\n\n用户将应用发送出去, 需要先到操作系统内核, 再到网络接口, 然后在接收方收到信息再次经过操作系统内核, 并在用户态分析数据.\n\n## RDMA通信模式\n\n![image-20221118211907180](image-20221118211907180.png)\n\n绕过内核态, 直接发送数据给硬件. 可以满足高带宽, 低延迟, 低CPU消耗的需求.\n\nRDMA可以释放CPU的负载, 减少数据拷贝, 内存访问, 实现零拷贝和内核旁路.\n\n- 零拷贝:应用程序能够直接执行数据传输, 无需涉及到网络软件栈的情况下, 数据能够被直接发送到缓冲区或者能够直接从缓冲区里被接收\n- 内核旁路: 应用程序可以直接在用户态执行数据传输, 不需要在内核态与用户态之间做上下文切换\n\n### IB\n\nRDMA的原生网络协议, 通过专用硬件实现最优的性能, 但是由于专用硬件的原因, InifiniBand要求从L到L4 需要使用自己专用的硬件, 设备成本非常高\n\n\n\n### RoCE\n\nRDMA跑在以太网上的一种网络, RoCE v1还没有摆脱Infiniband的束缚, RoCE v2使用UDP+IP, 既可以使用以太网交换机, 可以兼容现有以太网, IP协议使得数据可以被路由.\n\n![image-20221118212411801](image-20221118212411801.png)\n\n### iWARP\n\n可以更大规模的部署和组网, iWARP是基于TCP的, 传统的iWARP厂商实现时需要兼容的完整的协议栈, 设计和实现成本很高, 不需要交换机支持无损以太网传输, 虽然适用于当前的互联网传输, 但是性能比RoCE要差.\n\n![img](https://img-blog.csdnimg.cn/1b2704ac4511494e8c4c1348d7ad4529.png)\n\n","source":"_posts/RDMA技术解读.md","raw":"---\ntitle: RDMA技术解读\ndate: 2022-11-18 21:11:09\ntags: [体系结构, 网络]\ncategories: [清浅录]\ncover: https://img-blog.csdnimg.cn/1b2704ac4511494e8c4c1348d7ad4529.png\ntypora-root-url: RDMA技术解读\n---\n\n# RDMA技术解读\n\n本文参考[技术蛋老师讲解RDMA的视频]([揭秘网络技术中的“爱马仕”，12分钟看懂RDMA_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1ZY4y1L7Xq/?spm_id_from=333.337.search-card.all.click&vd_source=aad0e5152e96b4bf095d0017d639153b)), [It_server技术分享的视频]([学习分享：浅谈RDMA技术_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1QL411G7wo/?spm_id_from=333.337.search-card.all.click&vd_source=aad0e5152e96b4bf095d0017d639153b))侵删\n\n## 传统Socket通信\n\n![image-20221118211738044](image-20221118211738044.png)\n\n用户将应用发送出去, 需要先到操作系统内核, 再到网络接口, 然后在接收方收到信息再次经过操作系统内核, 并在用户态分析数据.\n\n## RDMA通信模式\n\n![image-20221118211907180](image-20221118211907180.png)\n\n绕过内核态, 直接发送数据给硬件. 可以满足高带宽, 低延迟, 低CPU消耗的需求.\n\nRDMA可以释放CPU的负载, 减少数据拷贝, 内存访问, 实现零拷贝和内核旁路.\n\n- 零拷贝:应用程序能够直接执行数据传输, 无需涉及到网络软件栈的情况下, 数据能够被直接发送到缓冲区或者能够直接从缓冲区里被接收\n- 内核旁路: 应用程序可以直接在用户态执行数据传输, 不需要在内核态与用户态之间做上下文切换\n\n### IB\n\nRDMA的原生网络协议, 通过专用硬件实现最优的性能, 但是由于专用硬件的原因, InifiniBand要求从L到L4 需要使用自己专用的硬件, 设备成本非常高\n\n\n\n### RoCE\n\nRDMA跑在以太网上的一种网络, RoCE v1还没有摆脱Infiniband的束缚, RoCE v2使用UDP+IP, 既可以使用以太网交换机, 可以兼容现有以太网, IP协议使得数据可以被路由.\n\n![image-20221118212411801](image-20221118212411801.png)\n\n### iWARP\n\n可以更大规模的部署和组网, iWARP是基于TCP的, 传统的iWARP厂商实现时需要兼容的完整的协议栈, 设计和实现成本很高, 不需要交换机支持无损以太网传输, 虽然适用于当前的互联网传输, 但是性能比RoCE要差.\n\n![img](https://img-blog.csdnimg.cn/1b2704ac4511494e8c4c1348d7ad4529.png)\n\n","slug":"RDMA技术解读","published":1,"updated":"2022-11-18T13:46:16.671Z","_id":"clamjv4f60000qwueg3fr7d2l","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"RDMA技术解读\"><a href=\"#RDMA技术解读\" class=\"headerlink\" title=\"RDMA技术解读\"></a>RDMA技术解读</h1><p>本文参考<a href=\"%5B%E6%8F%AD%E7%A7%98%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF%E4%B8%AD%E7%9A%84%E2%80%9C%E7%88%B1%E9%A9%AC%E4%BB%95%E2%80%9D%EF%BC%8C12%E5%88%86%E9%92%9F%E7%9C%8B%E6%87%82RDMA_%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9_bilibili%5D(https://www.bilibili.com/video/BV1ZY4y1L7Xq/?spm_id_from=333.337.search-card.all.click&vd_source=aad0e5152e96b4bf095d0017d639153b)\">技术蛋老师讲解RDMA的视频</a>, <a href=\"%5B%E5%AD%A6%E4%B9%A0%E5%88%86%E4%BA%AB%EF%BC%9A%E6%B5%85%E8%B0%88RDMA%E6%8A%80%E6%9C%AF_%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9_bilibili%5D(https://www.bilibili.com/video/BV1QL411G7wo/?spm_id_from=333.337.search-card.all.click&vd_source=aad0e5152e96b4bf095d0017d639153b)\">It_server技术分享的视频</a>侵删</p>\n<h2 id=\"传统Socket通信\"><a href=\"#传统Socket通信\" class=\"headerlink\" title=\"传统Socket通信\"></a>传统Socket通信</h2><p><img src=\"/post/RDMA%E6%8A%80%E6%9C%AF%E8%A7%A3%E8%AF%BB/image-20221118211738044.png\" alt=\"image-20221118211738044\"></p>\n<p>用户将应用发送出去, 需要先到操作系统内核, 再到网络接口, 然后在接收方收到信息再次经过操作系统内核, 并在用户态分析数据.</p>\n<h2 id=\"RDMA通信模式\"><a href=\"#RDMA通信模式\" class=\"headerlink\" title=\"RDMA通信模式\"></a>RDMA通信模式</h2><p><img src=\"/post/RDMA%E6%8A%80%E6%9C%AF%E8%A7%A3%E8%AF%BB/image-20221118211907180.png\" alt=\"image-20221118211907180\"></p>\n<p>绕过内核态, 直接发送数据给硬件. 可以满足高带宽, 低延迟, 低CPU消耗的需求.</p>\n<p>RDMA可以释放CPU的负载, 减少数据拷贝, 内存访问, 实现零拷贝和内核旁路.</p>\n<ul>\n<li>零拷贝:应用程序能够直接执行数据传输, 无需涉及到网络软件栈的情况下, 数据能够被直接发送到缓冲区或者能够直接从缓冲区里被接收</li>\n<li>内核旁路: 应用程序可以直接在用户态执行数据传输, 不需要在内核态与用户态之间做上下文切换</li>\n</ul>\n<h3 id=\"IB\"><a href=\"#IB\" class=\"headerlink\" title=\"IB\"></a>IB</h3><p>RDMA的原生网络协议, 通过专用硬件实现最优的性能, 但是由于专用硬件的原因, InifiniBand要求从L到L4 需要使用自己专用的硬件, 设备成本非常高</p>\n<h3 id=\"RoCE\"><a href=\"#RoCE\" class=\"headerlink\" title=\"RoCE\"></a>RoCE</h3><p>RDMA跑在以太网上的一种网络, RoCE v1还没有摆脱Infiniband的束缚, RoCE v2使用UDP+IP, 既可以使用以太网交换机, 可以兼容现有以太网, IP协议使得数据可以被路由.</p>\n<p><img src=\"/post/RDMA%E6%8A%80%E6%9C%AF%E8%A7%A3%E8%AF%BB/image-20221118212411801.png\" alt=\"image-20221118212411801\"></p>\n<h3 id=\"iWARP\"><a href=\"#iWARP\" class=\"headerlink\" title=\"iWARP\"></a>iWARP</h3><p>可以更大规模的部署和组网, iWARP是基于TCP的, 传统的iWARP厂商实现时需要兼容的完整的协议栈, 设计和实现成本很高, 不需要交换机支持无损以太网传输, 虽然适用于当前的互联网传输, 但是性能比RoCE要差.</p>\n<p><img src=\"https://img-blog.csdnimg.cn/1b2704ac4511494e8c4c1348d7ad4529.png\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"RDMA技术解读\"><a href=\"#RDMA技术解读\" class=\"headerlink\" title=\"RDMA技术解读\"></a>RDMA技术解读</h1><p>本文参考<a href=\"%5B%E6%8F%AD%E7%A7%98%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF%E4%B8%AD%E7%9A%84%E2%80%9C%E7%88%B1%E9%A9%AC%E4%BB%95%E2%80%9D%EF%BC%8C12%E5%88%86%E9%92%9F%E7%9C%8B%E6%87%82RDMA_%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9_bilibili%5D(https://www.bilibili.com/video/BV1ZY4y1L7Xq/?spm_id_from=333.337.search-card.all.click&vd_source=aad0e5152e96b4bf095d0017d639153b)\">技术蛋老师讲解RDMA的视频</a>, <a href=\"%5B%E5%AD%A6%E4%B9%A0%E5%88%86%E4%BA%AB%EF%BC%9A%E6%B5%85%E8%B0%88RDMA%E6%8A%80%E6%9C%AF_%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9_bilibili%5D(https://www.bilibili.com/video/BV1QL411G7wo/?spm_id_from=333.337.search-card.all.click&vd_source=aad0e5152e96b4bf095d0017d639153b)\">It_server技术分享的视频</a>侵删</p>\n<h2 id=\"传统Socket通信\"><a href=\"#传统Socket通信\" class=\"headerlink\" title=\"传统Socket通信\"></a>传统Socket通信</h2><p><img src=\"/post/RDMA%E6%8A%80%E6%9C%AF%E8%A7%A3%E8%AF%BB/image-20221118211738044.png\" alt=\"image-20221118211738044\"></p>\n<p>用户将应用发送出去, 需要先到操作系统内核, 再到网络接口, 然后在接收方收到信息再次经过操作系统内核, 并在用户态分析数据.</p>\n<h2 id=\"RDMA通信模式\"><a href=\"#RDMA通信模式\" class=\"headerlink\" title=\"RDMA通信模式\"></a>RDMA通信模式</h2><p><img src=\"/post/RDMA%E6%8A%80%E6%9C%AF%E8%A7%A3%E8%AF%BB/image-20221118211907180.png\" alt=\"image-20221118211907180\"></p>\n<p>绕过内核态, 直接发送数据给硬件. 可以满足高带宽, 低延迟, 低CPU消耗的需求.</p>\n<p>RDMA可以释放CPU的负载, 减少数据拷贝, 内存访问, 实现零拷贝和内核旁路.</p>\n<ul>\n<li>零拷贝:应用程序能够直接执行数据传输, 无需涉及到网络软件栈的情况下, 数据能够被直接发送到缓冲区或者能够直接从缓冲区里被接收</li>\n<li>内核旁路: 应用程序可以直接在用户态执行数据传输, 不需要在内核态与用户态之间做上下文切换</li>\n</ul>\n<h3 id=\"IB\"><a href=\"#IB\" class=\"headerlink\" title=\"IB\"></a>IB</h3><p>RDMA的原生网络协议, 通过专用硬件实现最优的性能, 但是由于专用硬件的原因, InifiniBand要求从L到L4 需要使用自己专用的硬件, 设备成本非常高</p>\n<h3 id=\"RoCE\"><a href=\"#RoCE\" class=\"headerlink\" title=\"RoCE\"></a>RoCE</h3><p>RDMA跑在以太网上的一种网络, RoCE v1还没有摆脱Infiniband的束缚, RoCE v2使用UDP+IP, 既可以使用以太网交换机, 可以兼容现有以太网, IP协议使得数据可以被路由.</p>\n<p><img src=\"/post/RDMA%E6%8A%80%E6%9C%AF%E8%A7%A3%E8%AF%BB/image-20221118212411801.png\" alt=\"image-20221118212411801\"></p>\n<h3 id=\"iWARP\"><a href=\"#iWARP\" class=\"headerlink\" title=\"iWARP\"></a>iWARP</h3><p>可以更大规模的部署和组网, iWARP是基于TCP的, 传统的iWARP厂商实现时需要兼容的完整的协议栈, 设计和实现成本很高, 不需要交换机支持无损以太网传输, 虽然适用于当前的互联网传输, 但是性能比RoCE要差.</p>\n<p><img src=\"https://img-blog.csdnimg.cn/1b2704ac4511494e8c4c1348d7ad4529.png\" alt=\"img\"></p>\n"},{"title":"为linux设置回收站","date":"2022-11-21T03:12:03.000Z","cover":"https://ts1.cn.mm.bing.net/th/id/R-C.958dfd89335c457ac3916a3874a0cc97?rik=3hj8iuWAzDhHCw&riu=http%3a%2f%2fimg.aiimg.com%2fuploads%2fallimg%2f150527%2f280082-15052G05152.jpg&ehk=5BcTxGdDzwrborjiw%2b5Fpj34Y7eyHyc19fgRChPG4YI%3d&risl=&pid=ImgRaw&r=0","_content":"\n# 为Linux设置回收站\n\n昨天手快误删了一个很重要的文件夹, 经过一系列的操作最后发现确实是找不回来了, 所以痛定思痛一定要为Linux搭建一个回收站, 参考了网上很多教程, 现在来记录一下搭建过程.\n\n## 原理\n\n原理其实很简单, 就是自定义一个回收站文件夹, 然后将删除指令自定义成将文件移动到回收站里, 再设置一个定时来定期清空回收站文件夹.\n\n## 操作流程\n\n### 创建回收站文件夹\n\n我把回收站创建在我的账号的根目录下了, 并且希望平时隐藏, 所以指令如下\n\n```shell\nmkdir ~/.trash\n```\n\n###  回收站相关的命令进行定义\n\n```shell\nvim ~/.bashrc_trash\n```\n\n创建好`bashrc_trash`文件之后, 在里面添加如下内容\n\n```shell\n# 为rm重定位为trash的命令, 当执行rm的时候自动执行trash函数\nalias rm=trash\n# 同上\nalias r=trash\n# 列出回收站的内容\nalias rl='ls ~/.trash'\n# 撤销删除\nalias ur=undelfile\n\n# 撤销删除, 就是将回收站中的内容移动回去\nundelfile()\n{\n mv -i ~/.trash/\\$@ ./\n}\n\n# 删除, 就是将当前文件夹移到回收站里, 注意mv指令没有-r参数, 所以使用的时候不用rm -rf, 直接rm -f或者rm就可以\ntrash()\n{\n mv $@ ~/.trash/\n}\n\n# 清空回收站, 添加确认操作\ncleartrash()\n{\n read -p \"clear sure?[n]\" confirm;\n [ $confirm == 'y' ] || [ $confirm == 'Y' ] && /bin/rm -rf ~/.trash/*\n}\n\n# 不需要确认的清空回收站, 用于定时清空, 事实上也可以给cleartrash()配一个参数, 这个以后要是有时间可以再搞一下\nCLEARTRASH()\n{\n /bin/rm -rf ~/.trash/*\n}\n```\n\n### 将自定义的指令添加到.bashrc\n\n```shell\nvim ~/.bashrc\n```\n\n打开`~/.bashrc`之后在其中添加如下指令\n\n```shell\n# add trash\nif [ ! -f \"~/.bashrc_trash\" ]; then\n    . ~/.bashrc_trash\nfi\n```\n\n这样每次启动一个终端就会自动加载我们自定义的指令\n\n### 定期清空文件夹\n\n其实到上一步就已经可以使用回收站了, 但是我们希望回收站更完善一点, 能够定时清空回收站, 这样就不用我们手动管理回收站中的内容了, 所以再设置一个定时清空功能. 这个功能要用到`crontab `指令, Linux `crontab` 是用来定期执行程序的命令, `-e`参数可以执行文字编辑器来设定时程表。首先输入如下指令\n\n```shell\ncrontab -e\n```\n\n 之后会进入到/tmp/crontab.xFcuCa/crontab, 这个如果不指定用户默认是为自己的用户配置的.\n\n之后在里面添加\n\n```shel\n0 0 * * 0 CLEARTRASH\n```\n\n这句话的含义是每周日零点清空回收站, 前面的五位数字用来指定时间, 含义如下\n\n```\n*    *    *    *    *\n-    -    -    -    -\n|    |    |    |    |\n|    |    |    |    +----- 星期中星期几 (0 - 6) (星期天 为0)\n|    |    |    +---------- 月份 (1 - 12) \n|    |    +--------------- 一个月中的第几天 (1 - 31)\n|    +-------------------- 小时 (0 - 23)\n+------------------------- 分钟 (0 - 59)\n```\n\n那么到此位置我们回收站的配置就完成了, 其实还有更好的方式, 可以让回收站定期清空指定日期以前的数据, 这样安全性会更好一点, 如果以后有时间, 我们就再折腾一下那个方案, 现在的版本也可以实现一个较为安全的`rm`操作, 妈妈再也不用担心我手快啦!\n","source":"_posts/为linux设置回收站.md","raw":"---\ntitle: 为linux设置回收站\ndate: 2022-11-21 11:12:03\ntags: [Linux, 系统管理]\ncategories: [清浅录]\ncover: https://ts1.cn.mm.bing.net/th/id/R-C.958dfd89335c457ac3916a3874a0cc97?rik=3hj8iuWAzDhHCw&riu=http%3a%2f%2fimg.aiimg.com%2fuploads%2fallimg%2f150527%2f280082-15052G05152.jpg&ehk=5BcTxGdDzwrborjiw%2b5Fpj34Y7eyHyc19fgRChPG4YI%3d&risl=&pid=ImgRaw&r=0\n---\n\n# 为Linux设置回收站\n\n昨天手快误删了一个很重要的文件夹, 经过一系列的操作最后发现确实是找不回来了, 所以痛定思痛一定要为Linux搭建一个回收站, 参考了网上很多教程, 现在来记录一下搭建过程.\n\n## 原理\n\n原理其实很简单, 就是自定义一个回收站文件夹, 然后将删除指令自定义成将文件移动到回收站里, 再设置一个定时来定期清空回收站文件夹.\n\n## 操作流程\n\n### 创建回收站文件夹\n\n我把回收站创建在我的账号的根目录下了, 并且希望平时隐藏, 所以指令如下\n\n```shell\nmkdir ~/.trash\n```\n\n###  回收站相关的命令进行定义\n\n```shell\nvim ~/.bashrc_trash\n```\n\n创建好`bashrc_trash`文件之后, 在里面添加如下内容\n\n```shell\n# 为rm重定位为trash的命令, 当执行rm的时候自动执行trash函数\nalias rm=trash\n# 同上\nalias r=trash\n# 列出回收站的内容\nalias rl='ls ~/.trash'\n# 撤销删除\nalias ur=undelfile\n\n# 撤销删除, 就是将回收站中的内容移动回去\nundelfile()\n{\n mv -i ~/.trash/\\$@ ./\n}\n\n# 删除, 就是将当前文件夹移到回收站里, 注意mv指令没有-r参数, 所以使用的时候不用rm -rf, 直接rm -f或者rm就可以\ntrash()\n{\n mv $@ ~/.trash/\n}\n\n# 清空回收站, 添加确认操作\ncleartrash()\n{\n read -p \"clear sure?[n]\" confirm;\n [ $confirm == 'y' ] || [ $confirm == 'Y' ] && /bin/rm -rf ~/.trash/*\n}\n\n# 不需要确认的清空回收站, 用于定时清空, 事实上也可以给cleartrash()配一个参数, 这个以后要是有时间可以再搞一下\nCLEARTRASH()\n{\n /bin/rm -rf ~/.trash/*\n}\n```\n\n### 将自定义的指令添加到.bashrc\n\n```shell\nvim ~/.bashrc\n```\n\n打开`~/.bashrc`之后在其中添加如下指令\n\n```shell\n# add trash\nif [ ! -f \"~/.bashrc_trash\" ]; then\n    . ~/.bashrc_trash\nfi\n```\n\n这样每次启动一个终端就会自动加载我们自定义的指令\n\n### 定期清空文件夹\n\n其实到上一步就已经可以使用回收站了, 但是我们希望回收站更完善一点, 能够定时清空回收站, 这样就不用我们手动管理回收站中的内容了, 所以再设置一个定时清空功能. 这个功能要用到`crontab `指令, Linux `crontab` 是用来定期执行程序的命令, `-e`参数可以执行文字编辑器来设定时程表。首先输入如下指令\n\n```shell\ncrontab -e\n```\n\n 之后会进入到/tmp/crontab.xFcuCa/crontab, 这个如果不指定用户默认是为自己的用户配置的.\n\n之后在里面添加\n\n```shel\n0 0 * * 0 CLEARTRASH\n```\n\n这句话的含义是每周日零点清空回收站, 前面的五位数字用来指定时间, 含义如下\n\n```\n*    *    *    *    *\n-    -    -    -    -\n|    |    |    |    |\n|    |    |    |    +----- 星期中星期几 (0 - 6) (星期天 为0)\n|    |    |    +---------- 月份 (1 - 12) \n|    |    +--------------- 一个月中的第几天 (1 - 31)\n|    +-------------------- 小时 (0 - 23)\n+------------------------- 分钟 (0 - 59)\n```\n\n那么到此位置我们回收站的配置就完成了, 其实还有更好的方式, 可以让回收站定期清空指定日期以前的数据, 这样安全性会更好一点, 如果以后有时间, 我们就再折腾一下那个方案, 现在的版本也可以实现一个较为安全的`rm`操作, 妈妈再也不用担心我手快啦!\n","slug":"为linux设置回收站","published":1,"updated":"2022-11-21T03:44:23.923Z","_id":"claq8suz60000owuedudpbgp5","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"为Linux设置回收站\"><a href=\"#为Linux设置回收站\" class=\"headerlink\" title=\"为Linux设置回收站\"></a>为Linux设置回收站</h1><p>昨天手快误删了一个很重要的文件夹, 经过一系列的操作最后发现确实是找不回来了, 所以痛定思痛一定要为Linux搭建一个回收站, 参考了网上很多教程, 现在来记录一下搭建过程.</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>原理其实很简单, 就是自定义一个回收站文件夹, 然后将删除指令自定义成将文件移动到回收站里, 再设置一个定时来定期清空回收站文件夹.</p>\n<h2 id=\"操作流程\"><a href=\"#操作流程\" class=\"headerlink\" title=\"操作流程\"></a>操作流程</h2><h3 id=\"创建回收站文件夹\"><a href=\"#创建回收站文件夹\" class=\"headerlink\" title=\"创建回收站文件夹\"></a>创建回收站文件夹</h3><p>我把回收站创建在我的账号的根目录下了, 并且希望平时隐藏, 所以指令如下</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> ~/.trash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"回收站相关的命令进行定义\"><a href=\"#回收站相关的命令进行定义\" class=\"headerlink\" title=\"回收站相关的命令进行定义\"></a>回收站相关的命令进行定义</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> ~/.bashrc_trash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>创建好<code>bashrc_trash</code>文件之后, 在里面添加如下内容</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 为rm重定位为trash的命令, 当执行rm的时候自动执行trash函数</span>\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">rm</span><span class=\"token operator\">=</span>trash\n<span class=\"token comment\"># 同上</span>\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">r</span><span class=\"token operator\">=</span>trash\n<span class=\"token comment\"># 列出回收站的内容</span>\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">rl</span><span class=\"token operator\">=</span><span class=\"token string\">'ls ~/.trash'</span>\n<span class=\"token comment\"># 撤销删除</span>\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">ur</span><span class=\"token operator\">=</span>undelfile\n\n<span class=\"token comment\"># 撤销删除, 就是将回收站中的内容移动回去</span>\n<span class=\"token function-name function\">undelfile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n <span class=\"token function\">mv</span> <span class=\"token parameter variable\">-i</span> ~/.trash/<span class=\"token punctuation\">\\</span><span class=\"token variable\">$@</span> ./\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\"># 删除, 就是将当前文件夹移到回收站里, 注意mv指令没有-r参数, 所以使用的时候不用rm -rf, 直接rm -f或者rm就可以</span>\n<span class=\"token function-name function\">trash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n <span class=\"token function\">mv</span> <span class=\"token variable\">$@</span> ~/.trash/\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\"># 清空回收站, 添加确认操作</span>\n<span class=\"token function-name function\">cleartrash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n <span class=\"token builtin class-name\">read</span> <span class=\"token parameter variable\">-p</span> <span class=\"token string\">\"clear sure?[n]\"</span> confirm<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">[</span> <span class=\"token variable\">$confirm</span> <span class=\"token operator\">==</span> <span class=\"token string\">'y'</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$confirm</span> <span class=\"token operator\">==</span> <span class=\"token string\">'Y'</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> /bin/rm <span class=\"token parameter variable\">-rf</span> ~/.trash/*\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\"># 不需要确认的清空回收站, 用于定时清空, 事实上也可以给cleartrash()配一个参数, 这个以后要是有时间可以再搞一下</span>\n<span class=\"token function-name function\">CLEARTRASH</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n /bin/rm <span class=\"token parameter variable\">-rf</span> ~/.trash/*\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"将自定义的指令添加到-bashrc\"><a href=\"#将自定义的指令添加到-bashrc\" class=\"headerlink\" title=\"将自定义的指令添加到.bashrc\"></a>将自定义的指令添加到.bashrc</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> ~/.bashrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>打开<code>~/.bashrc</code>之后在其中添加如下指令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># add trash</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> <span class=\"token parameter variable\">-f</span> <span class=\"token string\">\"~/.bashrc_trash\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">.</span> ~/.bashrc_trash\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样每次启动一个终端就会自动加载我们自定义的指令</p>\n<h3 id=\"定期清空文件夹\"><a href=\"#定期清空文件夹\" class=\"headerlink\" title=\"定期清空文件夹\"></a>定期清空文件夹</h3><p>其实到上一步就已经可以使用回收站了, 但是我们希望回收站更完善一点, 能够定时清空回收站, 这样就不用我们手动管理回收站中的内容了, 所以再设置一个定时清空功能. 这个功能要用到<code>crontab </code>指令, Linux <code>crontab</code> 是用来定期执行程序的命令, <code>-e</code>参数可以执行文字编辑器来设定时程表。首先输入如下指令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">crontab</span> <span class=\"token parameter variable\">-e</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p> 之后会进入到&#x2F;tmp&#x2F;crontab.xFcuCa&#x2F;crontab, 这个如果不指定用户默认是为自己的用户配置的.</p>\n<p>之后在里面添加</p>\n<pre class=\"line-numbers language-shel\" data-language=\"shel\"><code class=\"language-shel\">0 0 * * 0 CLEARTRASH<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这句话的含义是每周日零点清空回收站, 前面的五位数字用来指定时间, 含义如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">*    *    *    *    *\n-    -    -    -    -\n|    |    |    |    |\n|    |    |    |    +----- 星期中星期几 (0 - 6) (星期天 为0)\n|    |    |    +---------- 月份 (1 - 12) \n|    |    +--------------- 一个月中的第几天 (1 - 31)\n|    +-------------------- 小时 (0 - 23)\n+------------------------- 分钟 (0 - 59)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>那么到此位置我们回收站的配置就完成了, 其实还有更好的方式, 可以让回收站定期清空指定日期以前的数据, 这样安全性会更好一点, 如果以后有时间, 我们就再折腾一下那个方案, 现在的版本也可以实现一个较为安全的<code>rm</code>操作, 妈妈再也不用担心我手快啦!</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"为Linux设置回收站\"><a href=\"#为Linux设置回收站\" class=\"headerlink\" title=\"为Linux设置回收站\"></a>为Linux设置回收站</h1><p>昨天手快误删了一个很重要的文件夹, 经过一系列的操作最后发现确实是找不回来了, 所以痛定思痛一定要为Linux搭建一个回收站, 参考了网上很多教程, 现在来记录一下搭建过程.</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>原理其实很简单, 就是自定义一个回收站文件夹, 然后将删除指令自定义成将文件移动到回收站里, 再设置一个定时来定期清空回收站文件夹.</p>\n<h2 id=\"操作流程\"><a href=\"#操作流程\" class=\"headerlink\" title=\"操作流程\"></a>操作流程</h2><h3 id=\"创建回收站文件夹\"><a href=\"#创建回收站文件夹\" class=\"headerlink\" title=\"创建回收站文件夹\"></a>创建回收站文件夹</h3><p>我把回收站创建在我的账号的根目录下了, 并且希望平时隐藏, 所以指令如下</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> ~/.trash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"回收站相关的命令进行定义\"><a href=\"#回收站相关的命令进行定义\" class=\"headerlink\" title=\"回收站相关的命令进行定义\"></a>回收站相关的命令进行定义</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> ~/.bashrc_trash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>创建好<code>bashrc_trash</code>文件之后, 在里面添加如下内容</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 为rm重定位为trash的命令, 当执行rm的时候自动执行trash函数</span>\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">rm</span><span class=\"token operator\">=</span>trash\n<span class=\"token comment\"># 同上</span>\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">r</span><span class=\"token operator\">=</span>trash\n<span class=\"token comment\"># 列出回收站的内容</span>\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">rl</span><span class=\"token operator\">=</span><span class=\"token string\">'ls ~/.trash'</span>\n<span class=\"token comment\"># 撤销删除</span>\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">ur</span><span class=\"token operator\">=</span>undelfile\n\n<span class=\"token comment\"># 撤销删除, 就是将回收站中的内容移动回去</span>\n<span class=\"token function-name function\">undelfile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n <span class=\"token function\">mv</span> <span class=\"token parameter variable\">-i</span> ~/.trash/<span class=\"token punctuation\">\\</span><span class=\"token variable\">$@</span> ./\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\"># 删除, 就是将当前文件夹移到回收站里, 注意mv指令没有-r参数, 所以使用的时候不用rm -rf, 直接rm -f或者rm就可以</span>\n<span class=\"token function-name function\">trash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n <span class=\"token function\">mv</span> <span class=\"token variable\">$@</span> ~/.trash/\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\"># 清空回收站, 添加确认操作</span>\n<span class=\"token function-name function\">cleartrash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n <span class=\"token builtin class-name\">read</span> <span class=\"token parameter variable\">-p</span> <span class=\"token string\">\"clear sure?[n]\"</span> confirm<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">[</span> <span class=\"token variable\">$confirm</span> <span class=\"token operator\">==</span> <span class=\"token string\">'y'</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$confirm</span> <span class=\"token operator\">==</span> <span class=\"token string\">'Y'</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> /bin/rm <span class=\"token parameter variable\">-rf</span> ~/.trash/*\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\"># 不需要确认的清空回收站, 用于定时清空, 事实上也可以给cleartrash()配一个参数, 这个以后要是有时间可以再搞一下</span>\n<span class=\"token function-name function\">CLEARTRASH</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n /bin/rm <span class=\"token parameter variable\">-rf</span> ~/.trash/*\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"将自定义的指令添加到-bashrc\"><a href=\"#将自定义的指令添加到-bashrc\" class=\"headerlink\" title=\"将自定义的指令添加到.bashrc\"></a>将自定义的指令添加到.bashrc</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> ~/.bashrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>打开<code>~/.bashrc</code>之后在其中添加如下指令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># add trash</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> <span class=\"token parameter variable\">-f</span> <span class=\"token string\">\"~/.bashrc_trash\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">.</span> ~/.bashrc_trash\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样每次启动一个终端就会自动加载我们自定义的指令</p>\n<h3 id=\"定期清空文件夹\"><a href=\"#定期清空文件夹\" class=\"headerlink\" title=\"定期清空文件夹\"></a>定期清空文件夹</h3><p>其实到上一步就已经可以使用回收站了, 但是我们希望回收站更完善一点, 能够定时清空回收站, 这样就不用我们手动管理回收站中的内容了, 所以再设置一个定时清空功能. 这个功能要用到<code>crontab </code>指令, Linux <code>crontab</code> 是用来定期执行程序的命令, <code>-e</code>参数可以执行文字编辑器来设定时程表。首先输入如下指令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">crontab</span> <span class=\"token parameter variable\">-e</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p> 之后会进入到&#x2F;tmp&#x2F;crontab.xFcuCa&#x2F;crontab, 这个如果不指定用户默认是为自己的用户配置的.</p>\n<p>之后在里面添加</p>\n<pre class=\"line-numbers language-shel\" data-language=\"shel\"><code class=\"language-shel\">0 0 * * 0 CLEARTRASH<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这句话的含义是每周日零点清空回收站, 前面的五位数字用来指定时间, 含义如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">*    *    *    *    *\n-    -    -    -    -\n|    |    |    |    |\n|    |    |    |    +----- 星期中星期几 (0 - 6) (星期天 为0)\n|    |    |    +---------- 月份 (1 - 12) \n|    |    +--------------- 一个月中的第几天 (1 - 31)\n|    +-------------------- 小时 (0 - 23)\n+------------------------- 分钟 (0 - 59)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>那么到此位置我们回收站的配置就完成了, 其实还有更好的方式, 可以让回收站定期清空指定日期以前的数据, 这样安全性会更好一点, 如果以后有时间, 我们就再折腾一下那个方案, 现在的版本也可以实现一个较为安全的<code>rm</code>操作, 妈妈再也不用担心我手快啦!</p>\n"},{"title":"2022-11-22随笔","date":"2022-11-22T01:48:09.000Z","cover":"/covers/22-11-22随笔.jpg","typora-root-url":"2022-11-22随笔","_content":"\n# 22-11-22随笔\n\n最近有一点点不开心, 觉得自己的状态特别拧巴. 课题被同学批评，说问题没有想清楚，怎么做，做什么都没有搞清楚就贸然上手了。说自己搞这个很难出成果，而且基本做不下去，总之就是各种被批评。更难受的是我不知道怎么反驳他们，我很想为自己的课题争取，为他辩解，但是我什么也说不出来，我只觉得他们说的对。我想我应该把不懂的地方问出来，可是又不好意思又不敢。我应该静下心来好好想想同学们的意见，可是心里满满的都是大家的批评，又不能好好去思考究竟是哪里的问题。\n\n所以就陷入了这样非常拧巴的状态：<font style=\"background-color:#8bc34a\">觉得应该动手去改但是又不真正的去行动；只能坐在这里焦虑不断内耗。</font>\n\n昨天和同学们聊了一下现在这种状态，大家也是各种安慰，告诉我明天会好的，但是自己觉得心里一直都没有想清楚，我找不到问题的根源，我没办法解决这种心态。仔细想想自己这样的状态应该是因为：\n\n1. 被批评了，心里不开心\n2. 想得太多而做的太少，导致想反驳但是肚子里没有墨水，反驳不出来\n3. 觉得大家说的很对，这个课题做不下去，但是也没有新课题可以做，时间又很紧张了，担心自己毕不了业\n4. 觉得自己不是科研这块料，觉得身边的人都太强了，我不配待在这，我插不上他们的话，他们说的我都不懂，我什么也不会\n5. 明明什么都不会，还装出一副什么都会的样子，想问又不问，故作一副大佬的样子，其实外强中干\n\n那现在就来分析一下每一点，争取解决问题，从最好分析的开始：\n\n- 第二点：其实解决方案已经列出来了，想的太多而做的太少。想的多了，问题就多了；做的多了，答案就多了。既然觉得可做，既然觉得有办法，那就去做，去动手，去实践，既然觉得他们不对，那就努力去辩驳，去为自己发声！\n\n- 第四点：还是自己内心戏太足了，只是被批评了一下，有什么就不是这块料的地方呢，以后路还长着呢，怎么能因为一点小挫折就放弃呢。而且大部分人还没有努力到要拼天赋的地步，等你足够努力然后发现自己还是不够敏锐再来评价自己是不是科研这块料，如果你不够努力，你会发现自己不是任何一块料。\n\n- 第三点：和第二点同解。但是这一点还多了一种心理的因素。但是永远要牢记，学习是为了快乐。`学习本身就是足够幸福的过程，享受知识的同时，不要畏惧挑战。`各种毕业的评价标准，本质是由整个社会制定的残酷淘汰标准，它可以要求很多人，但如果你不在意，那它也没那么重要。`与探索未知的美妙相比，世界上大部分噩运，都不再重要。`所以，不管这条路走不走得通，能不能可行，其实也没有那么重要，你做出了重要的探索，这一路上的风景，你都没有错过。\n\n- 第一点：哪有不被批评的呢。要不是他们，你也不会这样审视自己，也不会更加坚定自己的想法，也不会更加明确问题的方向，要是没有批评，你现在还在浑浑噩噩无所事事呢，多亏了他们，才没让你偏航太远。\n\n- 第五点：这一点的答案是和同学的聊天中找到的。我现在还是一个二十多岁的年轻人，是一个刚上研一的学生，以前没有科研经历，没有竞赛经历，没读过什么论文，没什么实习经验，什么都不会，实在太正常了。究竟是什么让我觉得自己很厉害呢？究竟是什么让我觉得自己高人一等呢？不能放低自己的姿态，永远以一副高高在上的状态，那就只能永远什么也学不到。放低自己的姿态，允许自己犯错，因为自己本身就不是什么很厉害的人，但这不丢人，因为自己扎实地走在成为很厉害的人的路上。二十多岁什么都不会，总好过三十多岁什么都不会。\n\n  这就好像达克尔效应描述的一样：越是无知的人就越自信。当一个人知识越来越多，自信心会下降，但是突破临界点以后，自信心会回升，但之后不论怎么回升，都不如一开始一无所知时那么自信。即越是知识丰富的人越能意识到自己的不足，也越能发现、承认与学习别人的优点。\n\n![22-11-22随笔](22-11-22随笔.jpg)\n\n或许现在就是自己走向*绝望之谷*的过程，也可能是在走向*愚昧之巅*的过程，但是无论如何，要知道自己的能力是在提升的。我更希望现在的状态是走向*绝望之谷*的过程，因此，勇于接受自己的无知，勇于向他人学习，才是你应该做的，这个过程，就是成长的过程啊。\n\n所以，加油呀，就像博客的简介那样，是La La Land里的一句台词\n\n> People love what other people are passionate about.                   ——《La La Land》\n>\n","source":"_posts/2022-11-22随笔.md","raw":"---\ntitle: 2022-11-22随笔\ndate: 2022-11-22 09:48:09\ntags: [随笔]\ncategories: [陶然集]\ncover: /covers/22-11-22随笔.jpg\ntypora-root-url: 2022-11-22随笔\n---\n\n# 22-11-22随笔\n\n最近有一点点不开心, 觉得自己的状态特别拧巴. 课题被同学批评，说问题没有想清楚，怎么做，做什么都没有搞清楚就贸然上手了。说自己搞这个很难出成果，而且基本做不下去，总之就是各种被批评。更难受的是我不知道怎么反驳他们，我很想为自己的课题争取，为他辩解，但是我什么也说不出来，我只觉得他们说的对。我想我应该把不懂的地方问出来，可是又不好意思又不敢。我应该静下心来好好想想同学们的意见，可是心里满满的都是大家的批评，又不能好好去思考究竟是哪里的问题。\n\n所以就陷入了这样非常拧巴的状态：<font style=\"background-color:#8bc34a\">觉得应该动手去改但是又不真正的去行动；只能坐在这里焦虑不断内耗。</font>\n\n昨天和同学们聊了一下现在这种状态，大家也是各种安慰，告诉我明天会好的，但是自己觉得心里一直都没有想清楚，我找不到问题的根源，我没办法解决这种心态。仔细想想自己这样的状态应该是因为：\n\n1. 被批评了，心里不开心\n2. 想得太多而做的太少，导致想反驳但是肚子里没有墨水，反驳不出来\n3. 觉得大家说的很对，这个课题做不下去，但是也没有新课题可以做，时间又很紧张了，担心自己毕不了业\n4. 觉得自己不是科研这块料，觉得身边的人都太强了，我不配待在这，我插不上他们的话，他们说的我都不懂，我什么也不会\n5. 明明什么都不会，还装出一副什么都会的样子，想问又不问，故作一副大佬的样子，其实外强中干\n\n那现在就来分析一下每一点，争取解决问题，从最好分析的开始：\n\n- 第二点：其实解决方案已经列出来了，想的太多而做的太少。想的多了，问题就多了；做的多了，答案就多了。既然觉得可做，既然觉得有办法，那就去做，去动手，去实践，既然觉得他们不对，那就努力去辩驳，去为自己发声！\n\n- 第四点：还是自己内心戏太足了，只是被批评了一下，有什么就不是这块料的地方呢，以后路还长着呢，怎么能因为一点小挫折就放弃呢。而且大部分人还没有努力到要拼天赋的地步，等你足够努力然后发现自己还是不够敏锐再来评价自己是不是科研这块料，如果你不够努力，你会发现自己不是任何一块料。\n\n- 第三点：和第二点同解。但是这一点还多了一种心理的因素。但是永远要牢记，学习是为了快乐。`学习本身就是足够幸福的过程，享受知识的同时，不要畏惧挑战。`各种毕业的评价标准，本质是由整个社会制定的残酷淘汰标准，它可以要求很多人，但如果你不在意，那它也没那么重要。`与探索未知的美妙相比，世界上大部分噩运，都不再重要。`所以，不管这条路走不走得通，能不能可行，其实也没有那么重要，你做出了重要的探索，这一路上的风景，你都没有错过。\n\n- 第一点：哪有不被批评的呢。要不是他们，你也不会这样审视自己，也不会更加坚定自己的想法，也不会更加明确问题的方向，要是没有批评，你现在还在浑浑噩噩无所事事呢，多亏了他们，才没让你偏航太远。\n\n- 第五点：这一点的答案是和同学的聊天中找到的。我现在还是一个二十多岁的年轻人，是一个刚上研一的学生，以前没有科研经历，没有竞赛经历，没读过什么论文，没什么实习经验，什么都不会，实在太正常了。究竟是什么让我觉得自己很厉害呢？究竟是什么让我觉得自己高人一等呢？不能放低自己的姿态，永远以一副高高在上的状态，那就只能永远什么也学不到。放低自己的姿态，允许自己犯错，因为自己本身就不是什么很厉害的人，但这不丢人，因为自己扎实地走在成为很厉害的人的路上。二十多岁什么都不会，总好过三十多岁什么都不会。\n\n  这就好像达克尔效应描述的一样：越是无知的人就越自信。当一个人知识越来越多，自信心会下降，但是突破临界点以后，自信心会回升，但之后不论怎么回升，都不如一开始一无所知时那么自信。即越是知识丰富的人越能意识到自己的不足，也越能发现、承认与学习别人的优点。\n\n![22-11-22随笔](22-11-22随笔.jpg)\n\n或许现在就是自己走向*绝望之谷*的过程，也可能是在走向*愚昧之巅*的过程，但是无论如何，要知道自己的能力是在提升的。我更希望现在的状态是走向*绝望之谷*的过程，因此，勇于接受自己的无知，勇于向他人学习，才是你应该做的，这个过程，就是成长的过程啊。\n\n所以，加油呀，就像博客的简介那样，是La La Land里的一句台词\n\n> People love what other people are passionate about.                   ——《La La Land》\n>\n","slug":"2022-11-22随笔","published":1,"updated":"2022-11-22T02:30:17.907Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clarlnj22000028uegzfq1ve8","content":"<h1 id=\"22-11-22随笔\"><a href=\"#22-11-22随笔\" class=\"headerlink\" title=\"22-11-22随笔\"></a>22-11-22随笔</h1><p>最近有一点点不开心, 觉得自己的状态特别拧巴. 课题被同学批评，说问题没有想清楚，怎么做，做什么都没有搞清楚就贸然上手了。说自己搞这个很难出成果，而且基本做不下去，总之就是各种被批评。更难受的是我不知道怎么反驳他们，我很想为自己的课题争取，为他辩解，但是我什么也说不出来，我只觉得他们说的对。我想我应该把不懂的地方问出来，可是又不好意思又不敢。我应该静下心来好好想想同学们的意见，可是心里满满的都是大家的批评，又不能好好去思考究竟是哪里的问题。</p>\n<p>所以就陷入了这样非常拧巴的状态：<font style=\"background-color:#8bc34a\">觉得应该动手去改但是又不真正的去行动；只能坐在这里焦虑不断内耗。</font></p>\n<p>昨天和同学们聊了一下现在这种状态，大家也是各种安慰，告诉我明天会好的，但是自己觉得心里一直都没有想清楚，我找不到问题的根源，我没办法解决这种心态。仔细想想自己这样的状态应该是因为：</p>\n<ol>\n<li>被批评了，心里不开心</li>\n<li>想得太多而做的太少，导致想反驳但是肚子里没有墨水，反驳不出来</li>\n<li>觉得大家说的很对，这个课题做不下去，但是也没有新课题可以做，时间又很紧张了，担心自己毕不了业</li>\n<li>觉得自己不是科研这块料，觉得身边的人都太强了，我不配待在这，我插不上他们的话，他们说的我都不懂，我什么也不会</li>\n<li>明明什么都不会，还装出一副什么都会的样子，想问又不问，故作一副大佬的样子，其实外强中干</li>\n</ol>\n<p>那现在就来分析一下每一点，争取解决问题，从最好分析的开始：</p>\n<ul>\n<li><p>第二点：其实解决方案已经列出来了，想的太多而做的太少。想的多了，问题就多了；做的多了，答案就多了。既然觉得可做，既然觉得有办法，那就去做，去动手，去实践，既然觉得他们不对，那就努力去辩驳，去为自己发声！</p>\n</li>\n<li><p>第四点：还是自己内心戏太足了，只是被批评了一下，有什么就不是这块料的地方呢，以后路还长着呢，怎么能因为一点小挫折就放弃呢。而且大部分人还没有努力到要拼天赋的地步，等你足够努力然后发现自己还是不够敏锐再来评价自己是不是科研这块料，如果你不够努力，你会发现自己不是任何一块料。</p>\n</li>\n<li><p>第三点：和第二点同解。但是这一点还多了一种心理的因素。但是永远要牢记，学习是为了快乐。<code>学习本身就是足够幸福的过程，享受知识的同时，不要畏惧挑战。</code>各种毕业的评价标准，本质是由整个社会制定的残酷淘汰标准，它可以要求很多人，但如果你不在意，那它也没那么重要。<code>与探索未知的美妙相比，世界上大部分噩运，都不再重要。</code>所以，不管这条路走不走得通，能不能可行，其实也没有那么重要，你做出了重要的探索，这一路上的风景，你都没有错过。</p>\n</li>\n<li><p>第一点：哪有不被批评的呢。要不是他们，你也不会这样审视自己，也不会更加坚定自己的想法，也不会更加明确问题的方向，要是没有批评，你现在还在浑浑噩噩无所事事呢，多亏了他们，才没让你偏航太远。</p>\n</li>\n<li><p>第五点：这一点的答案是和同学的聊天中找到的。我现在还是一个二十多岁的年轻人，是一个刚上研一的学生，以前没有科研经历，没有竞赛经历，没读过什么论文，没什么实习经验，什么都不会，实在太正常了。究竟是什么让我觉得自己很厉害呢？究竟是什么让我觉得自己高人一等呢？不能放低自己的姿态，永远以一副高高在上的状态，那就只能永远什么也学不到。放低自己的姿态，允许自己犯错，因为自己本身就不是什么很厉害的人，但这不丢人，因为自己扎实地走在成为很厉害的人的路上。二十多岁什么都不会，总好过三十多岁什么都不会。</p>\n<p>这就好像达克尔效应描述的一样：越是无知的人就越自信。当一个人知识越来越多，自信心会下降，但是突破临界点以后，自信心会回升，但之后不论怎么回升，都不如一开始一无所知时那么自信。即越是知识丰富的人越能意识到自己的不足，也越能发现、承认与学习别人的优点。</p>\n</li>\n</ul>\n<p><img src=\"/post/2022-11-22%E9%9A%8F%E7%AC%94/22-11-22%E9%9A%8F%E7%AC%94.jpg\" alt=\"22-11-22随笔\"></p>\n<p>或许现在就是自己走向<em>绝望之谷</em>的过程，也可能是在走向<em>愚昧之巅</em>的过程，但是无论如何，要知道自己的能力是在提升的。我更希望现在的状态是走向<em>绝望之谷</em>的过程，因此，勇于接受自己的无知，勇于向他人学习，才是你应该做的，这个过程，就是成长的过程啊。</p>\n<p>所以，加油呀，就像博客的简介那样，是La La Land里的一句台词</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>People love what other people are passionate about.                   ——《La La Land》</p></blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"22-11-22随笔\"><a href=\"#22-11-22随笔\" class=\"headerlink\" title=\"22-11-22随笔\"></a>22-11-22随笔</h1><p>最近有一点点不开心, 觉得自己的状态特别拧巴. 课题被同学批评，说问题没有想清楚，怎么做，做什么都没有搞清楚就贸然上手了。说自己搞这个很难出成果，而且基本做不下去，总之就是各种被批评。更难受的是我不知道怎么反驳他们，我很想为自己的课题争取，为他辩解，但是我什么也说不出来，我只觉得他们说的对。我想我应该把不懂的地方问出来，可是又不好意思又不敢。我应该静下心来好好想想同学们的意见，可是心里满满的都是大家的批评，又不能好好去思考究竟是哪里的问题。</p>\n<p>所以就陷入了这样非常拧巴的状态：<font style=\"background-color:#8bc34a\">觉得应该动手去改但是又不真正的去行动；只能坐在这里焦虑不断内耗。</font></p>\n<p>昨天和同学们聊了一下现在这种状态，大家也是各种安慰，告诉我明天会好的，但是自己觉得心里一直都没有想清楚，我找不到问题的根源，我没办法解决这种心态。仔细想想自己这样的状态应该是因为：</p>\n<ol>\n<li>被批评了，心里不开心</li>\n<li>想得太多而做的太少，导致想反驳但是肚子里没有墨水，反驳不出来</li>\n<li>觉得大家说的很对，这个课题做不下去，但是也没有新课题可以做，时间又很紧张了，担心自己毕不了业</li>\n<li>觉得自己不是科研这块料，觉得身边的人都太强了，我不配待在这，我插不上他们的话，他们说的我都不懂，我什么也不会</li>\n<li>明明什么都不会，还装出一副什么都会的样子，想问又不问，故作一副大佬的样子，其实外强中干</li>\n</ol>\n<p>那现在就来分析一下每一点，争取解决问题，从最好分析的开始：</p>\n<ul>\n<li><p>第二点：其实解决方案已经列出来了，想的太多而做的太少。想的多了，问题就多了；做的多了，答案就多了。既然觉得可做，既然觉得有办法，那就去做，去动手，去实践，既然觉得他们不对，那就努力去辩驳，去为自己发声！</p>\n</li>\n<li><p>第四点：还是自己内心戏太足了，只是被批评了一下，有什么就不是这块料的地方呢，以后路还长着呢，怎么能因为一点小挫折就放弃呢。而且大部分人还没有努力到要拼天赋的地步，等你足够努力然后发现自己还是不够敏锐再来评价自己是不是科研这块料，如果你不够努力，你会发现自己不是任何一块料。</p>\n</li>\n<li><p>第三点：和第二点同解。但是这一点还多了一种心理的因素。但是永远要牢记，学习是为了快乐。<code>学习本身就是足够幸福的过程，享受知识的同时，不要畏惧挑战。</code>各种毕业的评价标准，本质是由整个社会制定的残酷淘汰标准，它可以要求很多人，但如果你不在意，那它也没那么重要。<code>与探索未知的美妙相比，世界上大部分噩运，都不再重要。</code>所以，不管这条路走不走得通，能不能可行，其实也没有那么重要，你做出了重要的探索，这一路上的风景，你都没有错过。</p>\n</li>\n<li><p>第一点：哪有不被批评的呢。要不是他们，你也不会这样审视自己，也不会更加坚定自己的想法，也不会更加明确问题的方向，要是没有批评，你现在还在浑浑噩噩无所事事呢，多亏了他们，才没让你偏航太远。</p>\n</li>\n<li><p>第五点：这一点的答案是和同学的聊天中找到的。我现在还是一个二十多岁的年轻人，是一个刚上研一的学生，以前没有科研经历，没有竞赛经历，没读过什么论文，没什么实习经验，什么都不会，实在太正常了。究竟是什么让我觉得自己很厉害呢？究竟是什么让我觉得自己高人一等呢？不能放低自己的姿态，永远以一副高高在上的状态，那就只能永远什么也学不到。放低自己的姿态，允许自己犯错，因为自己本身就不是什么很厉害的人，但这不丢人，因为自己扎实地走在成为很厉害的人的路上。二十多岁什么都不会，总好过三十多岁什么都不会。</p>\n<p>这就好像达克尔效应描述的一样：越是无知的人就越自信。当一个人知识越来越多，自信心会下降，但是突破临界点以后，自信心会回升，但之后不论怎么回升，都不如一开始一无所知时那么自信。即越是知识丰富的人越能意识到自己的不足，也越能发现、承认与学习别人的优点。</p>\n</li>\n</ul>\n<p><img src=\"/post/2022-11-22%E9%9A%8F%E7%AC%94/22-11-22%E9%9A%8F%E7%AC%94.jpg\" alt=\"22-11-22随笔\"></p>\n<p>或许现在就是自己走向<em>绝望之谷</em>的过程，也可能是在走向<em>愚昧之巅</em>的过程，但是无论如何，要知道自己的能力是在提升的。我更希望现在的状态是走向<em>绝望之谷</em>的过程，因此，勇于接受自己的无知，勇于向他人学习，才是你应该做的，这个过程，就是成长的过程啊。</p>\n<p>所以，加油呀，就像博客的简介那样，是La La Land里的一句台词</p>\n<blockquote>\n<p>People love what other people are passionate about.                   ——《La La Land》</p>\n</blockquote>\n"},{"title":"rCUDA学习笔记","date":"2022-12-09T01:31:02.000Z","cover":"/covers/rCUDA学习笔记.png","typora-root-url":"rCUDA学习笔记","_content":"\n# rCUDA学习笔记\n\n## 工作背景\n\n人CUDA是巴仑西亚理工大学和西班牙海梅一世大学开发的一个工作, 到现在已经有十余年的历史, 并且目前仍在维护. 欧洲的很多工作都是这样子默默无闻, 但是能坚持开发很久的工作, 并且在很久以后突然产生它的用途被大家所瞩目, 这一点真的很值得敬佩. 感觉这样的精神就是我所理解的学者精神.\n\n## 主要内容\n\n核心思想是类似远程过程调用, 将使用GPU的核函数发送到远程的GPU端供GPU使用, 这样做主要的开销在数据传输的通信上, 作者在文中对数据传输部分做了很大的优化. 但最终的运行效果差强人意, 相对于本地未初始化的节点表现得还挺好的, 但是如果本地已经初始化, 远程还是比不过本地的, \n\n![image-20221210105200418](image-20221210105200418.png)\n\n不过思想还是可以借鉴, 将GPU任务发送给目标进程执行, 减少显存的占用同时实现隔离, 但是这样扩展性仍然受限, 有多少个GPU就有多少个进程, 这些进程之间并行执行, 但是进程内部是串行的.\n","source":"_posts/rCUDA学习笔记.md","raw":"---\ntitle: rCUDA学习笔记\ndate: 2022-12-09 09:31:02\ntags: [体系结构, GPU, CUDA]\ncategories: [索道集]\ncover: /covers/rCUDA学习笔记.png\ntypora-root-url: rCUDA学习笔记\n---\n\n# rCUDA学习笔记\n\n## 工作背景\n\n人CUDA是巴仑西亚理工大学和西班牙海梅一世大学开发的一个工作, 到现在已经有十余年的历史, 并且目前仍在维护. 欧洲的很多工作都是这样子默默无闻, 但是能坚持开发很久的工作, 并且在很久以后突然产生它的用途被大家所瞩目, 这一点真的很值得敬佩. 感觉这样的精神就是我所理解的学者精神.\n\n## 主要内容\n\n核心思想是类似远程过程调用, 将使用GPU的核函数发送到远程的GPU端供GPU使用, 这样做主要的开销在数据传输的通信上, 作者在文中对数据传输部分做了很大的优化. 但最终的运行效果差强人意, 相对于本地未初始化的节点表现得还挺好的, 但是如果本地已经初始化, 远程还是比不过本地的, \n\n![image-20221210105200418](image-20221210105200418.png)\n\n不过思想还是可以借鉴, 将GPU任务发送给目标进程执行, 减少显存的占用同时实现隔离, 但是这样扩展性仍然受限, 有多少个GPU就有多少个进程, 这些进程之间并行执行, 但是进程内部是串行的.\n","slug":"rCUDA学习笔记","published":1,"updated":"2022-12-10T02:59:26.581Z","_id":"clbfub88b0000wcue2l26hpq6","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"rCUDA学习笔记\"><a href=\"#rCUDA学习笔记\" class=\"headerlink\" title=\"rCUDA学习笔记\"></a>rCUDA学习笔记</h1><h2 id=\"工作背景\"><a href=\"#工作背景\" class=\"headerlink\" title=\"工作背景\"></a>工作背景</h2><p>人CUDA是巴仑西亚理工大学和西班牙海梅一世大学开发的一个工作, 到现在已经有十余年的历史, 并且目前仍在维护. 欧洲的很多工作都是这样子默默无闻, 但是能坚持开发很久的工作, 并且在很久以后突然产生它的用途被大家所瞩目, 这一点真的很值得敬佩. 感觉这样的精神就是我所理解的学者精神.</p>\n<h2 id=\"主要内容\"><a href=\"#主要内容\" class=\"headerlink\" title=\"主要内容\"></a>主要内容</h2><p>核心思想是类似远程过程调用, 将使用GPU的核函数发送到远程的GPU端供GPU使用, 这样做主要的开销在数据传输的通信上, 作者在文中对数据传输部分做了很大的优化. 但最终的运行效果差强人意, 相对于本地未初始化的节点表现得还挺好的, 但是如果本地已经初始化, 远程还是比不过本地的, </p>\n<p><img src=\"/post/rCUDA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20221210105200418.png\" alt=\"image-20221210105200418\"></p>\n<p>不过思想还是可以借鉴, 将GPU任务发送给目标进程执行, 减少显存的占用同时实现隔离, 但是这样扩展性仍然受限, 有多少个GPU就有多少个进程, 这些进程之间并行执行, 但是进程内部是串行的.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"rCUDA学习笔记\"><a href=\"#rCUDA学习笔记\" class=\"headerlink\" title=\"rCUDA学习笔记\"></a>rCUDA学习笔记</h1><h2 id=\"工作背景\"><a href=\"#工作背景\" class=\"headerlink\" title=\"工作背景\"></a>工作背景</h2><p>人CUDA是巴仑西亚理工大学和西班牙海梅一世大学开发的一个工作, 到现在已经有十余年的历史, 并且目前仍在维护. 欧洲的很多工作都是这样子默默无闻, 但是能坚持开发很久的工作, 并且在很久以后突然产生它的用途被大家所瞩目, 这一点真的很值得敬佩. 感觉这样的精神就是我所理解的学者精神.</p>\n<h2 id=\"主要内容\"><a href=\"#主要内容\" class=\"headerlink\" title=\"主要内容\"></a>主要内容</h2><p>核心思想是类似远程过程调用, 将使用GPU的核函数发送到远程的GPU端供GPU使用, 这样做主要的开销在数据传输的通信上, 作者在文中对数据传输部分做了很大的优化. 但最终的运行效果差强人意, 相对于本地未初始化的节点表现得还挺好的, 但是如果本地已经初始化, 远程还是比不过本地的, </p>\n<p><img src=\"/post/rCUDA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20221210105200418.png\" alt=\"image-20221210105200418\"></p>\n<p>不过思想还是可以借鉴, 将GPU任务发送给目标进程执行, 减少显存的占用同时实现隔离, 但是这样扩展性仍然受限, 有多少个GPU就有多少个进程, 这些进程之间并行执行, 但是进程内部是串行的.</p>\n"},{"title":"世界没有变糟糕, 只不过是我长大了","date":"2022-12-15T01:55:20.000Z","cover":"covers/世界没有变糟糕,只不过是我长大了.jpg","_content":"\n# 世界没有变糟糕, 只不过是我长大了\n\n国内疫情全面放开了, 身边的人一个接一个变成阳性, 父母也不能幸免, 所幸症状不是十分严重, 母亲已经没什么严重的症状了, 父亲现在虽然退烧但是浑身疼, 胸胁胀痛, 头痛这些症状都还没有缓解, 哥哥今天也嗓子疼了, 甚至生不出任何一丝侥幸心理, 我们心里都清楚, 跑不掉的, 基本就是阳了. \n\n 我远在学校回不去家里, 看着他们一个个变阳除了跟着着急什么也做不了, 只能再加紧保护好自己. 学校里也出现了很多阳性, 但是学校彻底放开, 根本管不住这些. 每天看着新闻上的报道完全不知道什么该信什么不该信, 不知道这样的情况什么时候会缓解, 什么时候能变好. 人类会不会永远和新冠共存, 新冠还会不会产生更加难缠的变异, 究竟有没有后遗症, 会不会未来几十年的人类都是病怏怏的. 为什么我的青春岁月里会经历这样的事情, 为什么世界会变成这样......\n\n","source":"_posts/世界没有变糟糕-只不过是我长大了.md","raw":"---\ntitle: '世界没有变糟糕, 只不过是我长大了'\ndate: 2022-12-15 09:55:20\ntags: [随笔]\ncategories: [陶然集]\ncover: covers/世界没有变糟糕,只不过是我长大了.jpg\n---\n\n# 世界没有变糟糕, 只不过是我长大了\n\n国内疫情全面放开了, 身边的人一个接一个变成阳性, 父母也不能幸免, 所幸症状不是十分严重, 母亲已经没什么严重的症状了, 父亲现在虽然退烧但是浑身疼, 胸胁胀痛, 头痛这些症状都还没有缓解, 哥哥今天也嗓子疼了, 甚至生不出任何一丝侥幸心理, 我们心里都清楚, 跑不掉的, 基本就是阳了. \n\n 我远在学校回不去家里, 看着他们一个个变阳除了跟着着急什么也做不了, 只能再加紧保护好自己. 学校里也出现了很多阳性, 但是学校彻底放开, 根本管不住这些. 每天看着新闻上的报道完全不知道什么该信什么不该信, 不知道这样的情况什么时候会缓解, 什么时候能变好. 人类会不会永远和新冠共存, 新冠还会不会产生更加难缠的变异, 究竟有没有后遗症, 会不会未来几十年的人类都是病怏怏的. 为什么我的青春岁月里会经历这样的事情, 为什么世界会变成这样......\n\n","slug":"世界没有变糟糕-只不过是我长大了","published":1,"updated":"2022-12-15T02:52:57.605Z","_id":"clboh3r88000008ue1s9i6mfo","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"世界没有变糟糕-只不过是我长大了\"><a href=\"#世界没有变糟糕-只不过是我长大了\" class=\"headerlink\" title=\"世界没有变糟糕, 只不过是我长大了\"></a>世界没有变糟糕, 只不过是我长大了</h1><p>国内疫情全面放开了, 身边的人一个接一个变成阳性, 父母也不能幸免, 所幸症状不是十分严重, 母亲已经没什么严重的症状了, 父亲现在虽然退烧但是浑身疼, 胸胁胀痛, 头痛这些症状都还没有缓解, 哥哥今天也嗓子疼了, 甚至生不出任何一丝侥幸心理, 我们心里都清楚, 跑不掉的, 基本就是阳了. </p>\n<p> 我远在学校回不去家里, 看着他们一个个变阳除了跟着着急什么也做不了, 只能再加紧保护好自己. 学校里也出现了很多阳性, 但是学校彻底放开, 根本管不住这些. 每天看着新闻上的报道完全不知道什么该信什么不该信, 不知道这样的情况什么时候会缓解, 什么时候能变好. 人类会不会永远和新冠共存, 新冠还会不会产生更加难缠的变异, 究竟有没有后遗症, 会不会未来几十年的人类都是病怏怏的. 为什么我的青春岁月里会经历这样的事情, 为什么世界会变成这样……</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"世界没有变糟糕-只不过是我长大了\"><a href=\"#世界没有变糟糕-只不过是我长大了\" class=\"headerlink\" title=\"世界没有变糟糕, 只不过是我长大了\"></a>世界没有变糟糕, 只不过是我长大了</h1><p>国内疫情全面放开了, 身边的人一个接一个变成阳性, 父母也不能幸免, 所幸症状不是十分严重, 母亲已经没什么严重的症状了, 父亲现在虽然退烧但是浑身疼, 胸胁胀痛, 头痛这些症状都还没有缓解, 哥哥今天也嗓子疼了, 甚至生不出任何一丝侥幸心理, 我们心里都清楚, 跑不掉的, 基本就是阳了. </p>\n<p> 我远在学校回不去家里, 看着他们一个个变阳除了跟着着急什么也做不了, 只能再加紧保护好自己. 学校里也出现了很多阳性, 但是学校彻底放开, 根本管不住这些. 每天看着新闻上的报道完全不知道什么该信什么不该信, 不知道这样的情况什么时候会缓解, 什么时候能变好. 人类会不会永远和新冠共存, 新冠还会不会产生更加难缠的变异, 究竟有没有后遗症, 会不会未来几十年的人类都是病怏怏的. 为什么我的青春岁月里会经历这样的事情, 为什么世界会变成这样……</p>\n"},{"title":"弱小和无知不是生存的障碍，傲慢才是","date":"2022-12-15T02:25:21.000Z","cover":"/covers/弱小和无知不是生存的障碍，傲慢才是.jpg","_content":"\n# 弱小和无知不是生存的障碍，傲慢才是\n\n## 前言\n\n在科研的道路上总是有各种各样的心态起伏, 也遇到各种各样的困难, 我希望能够在这里记录下自己一路上的心路历程, 让自己回望来路的时候, 能看到来时的方向.\n\n## 2022-12-15\n\n> 弱小和无知不是生存的障碍，傲慢才是。       ——刘慈欣\n\n刚开始接触科研的时候每天都很焦虑的找课题, 但是一直都没有什么收获, 后来老师给了一个方向, 就在这个方向上摸索, 简单做了几个小实验, 觉得这个方向上可做的事情很多, 明明没读过什么文献, 却冒出了一大堆的想法, 觉得这个也可以, 那个也可以. 现在想想这些想法真的很幼稚. 因为有了课题, 就觉得自己有了方向, 每天也不认真搞科研, 觉得已经有想法的, 随便弄弄就可以发论文, 不着急不着急, 甚至觉得这些东西做出来了就可以发顶会, 所以开始快乐摆烂. 直到后来上手做了几个小实验, 发现这些个想法根本就站不住脚, 而且很多想过的东西其实都已经被实现了. 然后突然觉得, 自己前段时间都是在干什么, 明明没有真正深入的了解过一个领域, 却好高骛远的觉得自己什么都会了. 明明看到多少师兄反复改稿改了几年都没能被顶会接收, 却傲慢的觉得自己一投就中。然后就不可避免的想到大刘的话，“弱小和无知不是生存的障碍，傲慢才是”。\n\n决定纠正自己着急的心态，不要好高骛远，不要眼高手低，真正多读一些论文，多做一些实验，夯实自己的基础，让学习变得水到渠成。还有要记得自己的初心，读研是为了快乐，是为了探索人类知识的边界，不是为了发论文，永远不要将学习变成一件很功利的事情，因为知识远比那些物质要高贵。\n\n要记住，一个优秀的成果背后的努力不是简简单单的，需要的汗水，思考，努力，远比你能想象到的要多得多。但也不要害怕，只要在这个过程中，倾注了热情与心血，如论结果如何，都很值得。\n","source":"_posts/弱小和无知不是生存的障碍，傲慢才是.md","raw":"---\ntitle: 弱小和无知不是生存的障碍，傲慢才是\ndate: 2022-12-15 10:25:21\ntags: [随笔]\ncategories: [陶然集]\ncover: /covers/弱小和无知不是生存的障碍，傲慢才是.jpg\n---\n\n# 弱小和无知不是生存的障碍，傲慢才是\n\n## 前言\n\n在科研的道路上总是有各种各样的心态起伏, 也遇到各种各样的困难, 我希望能够在这里记录下自己一路上的心路历程, 让自己回望来路的时候, 能看到来时的方向.\n\n## 2022-12-15\n\n> 弱小和无知不是生存的障碍，傲慢才是。       ——刘慈欣\n\n刚开始接触科研的时候每天都很焦虑的找课题, 但是一直都没有什么收获, 后来老师给了一个方向, 就在这个方向上摸索, 简单做了几个小实验, 觉得这个方向上可做的事情很多, 明明没读过什么文献, 却冒出了一大堆的想法, 觉得这个也可以, 那个也可以. 现在想想这些想法真的很幼稚. 因为有了课题, 就觉得自己有了方向, 每天也不认真搞科研, 觉得已经有想法的, 随便弄弄就可以发论文, 不着急不着急, 甚至觉得这些东西做出来了就可以发顶会, 所以开始快乐摆烂. 直到后来上手做了几个小实验, 发现这些个想法根本就站不住脚, 而且很多想过的东西其实都已经被实现了. 然后突然觉得, 自己前段时间都是在干什么, 明明没有真正深入的了解过一个领域, 却好高骛远的觉得自己什么都会了. 明明看到多少师兄反复改稿改了几年都没能被顶会接收, 却傲慢的觉得自己一投就中。然后就不可避免的想到大刘的话，“弱小和无知不是生存的障碍，傲慢才是”。\n\n决定纠正自己着急的心态，不要好高骛远，不要眼高手低，真正多读一些论文，多做一些实验，夯实自己的基础，让学习变得水到渠成。还有要记得自己的初心，读研是为了快乐，是为了探索人类知识的边界，不是为了发论文，永远不要将学习变成一件很功利的事情，因为知识远比那些物质要高贵。\n\n要记住，一个优秀的成果背后的努力不是简简单单的，需要的汗水，思考，努力，远比你能想象到的要多得多。但也不要害怕，只要在这个过程中，倾注了热情与心血，如论结果如何，都很值得。\n","slug":"弱小和无知不是生存的障碍，傲慢才是","published":1,"updated":"2022-12-15T02:51:17.767Z","_id":"clboh3r8a000108uedigcfqke","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"弱小和无知不是生存的障碍，傲慢才是\"><a href=\"#弱小和无知不是生存的障碍，傲慢才是\" class=\"headerlink\" title=\"弱小和无知不是生存的障碍，傲慢才是\"></a>弱小和无知不是生存的障碍，傲慢才是</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在科研的道路上总是有各种各样的心态起伏, 也遇到各种各样的困难, 我希望能够在这里记录下自己一路上的心路历程, 让自己回望来路的时候, 能看到来时的方向.</p>\n<h2 id=\"2022-12-15\"><a href=\"#2022-12-15\" class=\"headerlink\" title=\"2022-12-15\"></a>2022-12-15</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>弱小和无知不是生存的障碍，傲慢才是。       ——刘慈欣</p></blockquote>\n<p>刚开始接触科研的时候每天都很焦虑的找课题, 但是一直都没有什么收获, 后来老师给了一个方向, 就在这个方向上摸索, 简单做了几个小实验, 觉得这个方向上可做的事情很多, 明明没读过什么文献, 却冒出了一大堆的想法, 觉得这个也可以, 那个也可以. 现在想想这些想法真的很幼稚. 因为有了课题, 就觉得自己有了方向, 每天也不认真搞科研, 觉得已经有想法的, 随便弄弄就可以发论文, 不着急不着急, 甚至觉得这些东西做出来了就可以发顶会, 所以开始快乐摆烂. 直到后来上手做了几个小实验, 发现这些个想法根本就站不住脚, 而且很多想过的东西其实都已经被实现了. 然后突然觉得, 自己前段时间都是在干什么, 明明没有真正深入的了解过一个领域, 却好高骛远的觉得自己什么都会了. 明明看到多少师兄反复改稿改了几年都没能被顶会接收, 却傲慢的觉得自己一投就中。然后就不可避免的想到大刘的话，“弱小和无知不是生存的障碍，傲慢才是”。</p>\n<p>决定纠正自己着急的心态，不要好高骛远，不要眼高手低，真正多读一些论文，多做一些实验，夯实自己的基础，让学习变得水到渠成。还有要记得自己的初心，读研是为了快乐，是为了探索人类知识的边界，不是为了发论文，永远不要将学习变成一件很功利的事情，因为知识远比那些物质要高贵。</p>\n<p>要记住，一个优秀的成果背后的努力不是简简单单的，需要的汗水，思考，努力，远比你能想象到的要多得多。但也不要害怕，只要在这个过程中，倾注了热情与心血，如论结果如何，都很值得。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"弱小和无知不是生存的障碍，傲慢才是\"><a href=\"#弱小和无知不是生存的障碍，傲慢才是\" class=\"headerlink\" title=\"弱小和无知不是生存的障碍，傲慢才是\"></a>弱小和无知不是生存的障碍，傲慢才是</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在科研的道路上总是有各种各样的心态起伏, 也遇到各种各样的困难, 我希望能够在这里记录下自己一路上的心路历程, 让自己回望来路的时候, 能看到来时的方向.</p>\n<h2 id=\"2022-12-15\"><a href=\"#2022-12-15\" class=\"headerlink\" title=\"2022-12-15\"></a>2022-12-15</h2><blockquote>\n<p>弱小和无知不是生存的障碍，傲慢才是。       ——刘慈欣</p>\n</blockquote>\n<p>刚开始接触科研的时候每天都很焦虑的找课题, 但是一直都没有什么收获, 后来老师给了一个方向, 就在这个方向上摸索, 简单做了几个小实验, 觉得这个方向上可做的事情很多, 明明没读过什么文献, 却冒出了一大堆的想法, 觉得这个也可以, 那个也可以. 现在想想这些想法真的很幼稚. 因为有了课题, 就觉得自己有了方向, 每天也不认真搞科研, 觉得已经有想法的, 随便弄弄就可以发论文, 不着急不着急, 甚至觉得这些东西做出来了就可以发顶会, 所以开始快乐摆烂. 直到后来上手做了几个小实验, 发现这些个想法根本就站不住脚, 而且很多想过的东西其实都已经被实现了. 然后突然觉得, 自己前段时间都是在干什么, 明明没有真正深入的了解过一个领域, 却好高骛远的觉得自己什么都会了. 明明看到多少师兄反复改稿改了几年都没能被顶会接收, 却傲慢的觉得自己一投就中。然后就不可避免的想到大刘的话，“弱小和无知不是生存的障碍，傲慢才是”。</p>\n<p>决定纠正自己着急的心态，不要好高骛远，不要眼高手低，真正多读一些论文，多做一些实验，夯实自己的基础，让学习变得水到渠成。还有要记得自己的初心，读研是为了快乐，是为了探索人类知识的边界，不是为了发论文，永远不要将学习变成一件很功利的事情，因为知识远比那些物质要高贵。</p>\n<p>要记住，一个优秀的成果背后的努力不是简简单单的，需要的汗水，思考，努力，远比你能想象到的要多得多。但也不要害怕，只要在这个过程中，倾注了热情与心血，如论结果如何，都很值得。</p>\n"},{"title":"Ray学习笔记","date":"2022-12-21T09:14:02.000Z","cover":"https://docs.ray.io/en/latest/_images/what-is-ray-padded.svg","_content":"\n# Ray学习笔记\n\n## 概念\n\n| 概念                     | 含义                                                         |\n| ------------------------ | ------------------------------------------------------------ |\n| tasks                    | 在Ray中, 任务是很轻量级的, 一个task指的实际上是一个remote函数 |\n| worker                   | 可以理解成一个python进程                                     |\n| actors                   | 将task从函数扩展到了类, 当创建一个actor的时候, 同时还会创建一个新的worker, 类的方法被绑定在这个特定的worker上, worker可以访问和修改类的状态 |\n| objects                  | 一个worker或者一个actor实例被创建出来之后就变成了object, 这些object可以存在在集群中的任何位置, 可以通过ref来访问 |\n| placement groups         | 允许用户跨多个节点自动保留资源, 往往用于两种情况:<br />(1)组调度, 我们需要一组任务同时开始; (2)最大化数据局部性, 减少数据移动的开销 |\n| environment dependencies | 因为tasks或者actors可能在环境中的任何一个节点执行, 所以需要解决不同节点之间的环境依赖问题, 这个问题要么要用户提前在节点上都准备好需要的环境, 或者使用Ray的[runtime environments](https://docs.ray.io/en/latest/ray-core/handling-dependencies.html#runtime-environments)动态安装这些环境. |\n\n## 资源管理\n\nRay允许用户指定资源, \n\n![image-20221221174102006](Ray学习笔记/image-20221221174102006.png)\n","source":"_posts/Ray学习笔记.md","raw":"---\ntitle: Ray学习笔记\ndate: 2022-12-21 17:14:02\ntags: [系统管理, 体系结构, 计算框架]\ncategories: [索道集]\ncover: https://docs.ray.io/en/latest/_images/what-is-ray-padded.svg\n---\n\n# Ray学习笔记\n\n## 概念\n\n| 概念                     | 含义                                                         |\n| ------------------------ | ------------------------------------------------------------ |\n| tasks                    | 在Ray中, 任务是很轻量级的, 一个task指的实际上是一个remote函数 |\n| worker                   | 可以理解成一个python进程                                     |\n| actors                   | 将task从函数扩展到了类, 当创建一个actor的时候, 同时还会创建一个新的worker, 类的方法被绑定在这个特定的worker上, worker可以访问和修改类的状态 |\n| objects                  | 一个worker或者一个actor实例被创建出来之后就变成了object, 这些object可以存在在集群中的任何位置, 可以通过ref来访问 |\n| placement groups         | 允许用户跨多个节点自动保留资源, 往往用于两种情况:<br />(1)组调度, 我们需要一组任务同时开始; (2)最大化数据局部性, 减少数据移动的开销 |\n| environment dependencies | 因为tasks或者actors可能在环境中的任何一个节点执行, 所以需要解决不同节点之间的环境依赖问题, 这个问题要么要用户提前在节点上都准备好需要的环境, 或者使用Ray的[runtime environments](https://docs.ray.io/en/latest/ray-core/handling-dependencies.html#runtime-environments)动态安装这些环境. |\n\n## 资源管理\n\nRay允许用户指定资源, \n\n![image-20221221174102006](Ray学习笔记/image-20221221174102006.png)\n","slug":"Ray学习笔记","published":1,"updated":"2022-12-21T09:47:26.765Z","_id":"clbxg25si00003gue8cry2dmx","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Ray学习笔记\"><a href=\"#Ray学习笔记\" class=\"headerlink\" title=\"Ray学习笔记\"></a>Ray学习笔记</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><table>\n<thead>\n<tr>\n<th>概念</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>tasks</td>\n<td>在Ray中, 任务是很轻量级的, 一个task指的实际上是一个remote函数</td>\n</tr>\n<tr>\n<td>worker</td>\n<td>可以理解成一个python进程</td>\n</tr>\n<tr>\n<td>actors</td>\n<td>将task从函数扩展到了类, 当创建一个actor的时候, 同时还会创建一个新的worker, 类的方法被绑定在这个特定的worker上, worker可以访问和修改类的状态</td>\n</tr>\n<tr>\n<td>objects</td>\n<td>一个worker或者一个actor实例被创建出来之后就变成了object, 这些object可以存在在集群中的任何位置, 可以通过ref来访问</td>\n</tr>\n<tr>\n<td>placement groups</td>\n<td>允许用户跨多个节点自动保留资源, 往往用于两种情况:<br>(1)组调度, 我们需要一组任务同时开始; (2)最大化数据局部性, 减少数据移动的开销</td>\n</tr>\n<tr>\n<td>environment dependencies</td>\n<td>因为tasks或者actors可能在环境中的任何一个节点执行, 所以需要解决不同节点之间的环境依赖问题, 这个问题要么要用户提前在节点上都准备好需要的环境, 或者使用Ray的<a href=\"https://docs.ray.io/en/latest/ray-core/handling-dependencies.html#runtime-environments\">runtime environments</a>动态安装这些环境.</td>\n</tr>\n</tbody></table>\n<h2 id=\"资源管理\"><a href=\"#资源管理\" class=\"headerlink\" title=\"资源管理\"></a>资源管理</h2><p>Ray允许用户指定资源, </p>\n<p><img src=\"/Ray%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20221221174102006.png\" alt=\"image-20221221174102006\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Ray学习笔记\"><a href=\"#Ray学习笔记\" class=\"headerlink\" title=\"Ray学习笔记\"></a>Ray学习笔记</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><table>\n<thead>\n<tr>\n<th>概念</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>tasks</td>\n<td>在Ray中, 任务是很轻量级的, 一个task指的实际上是一个remote函数</td>\n</tr>\n<tr>\n<td>worker</td>\n<td>可以理解成一个python进程</td>\n</tr>\n<tr>\n<td>actors</td>\n<td>将task从函数扩展到了类, 当创建一个actor的时候, 同时还会创建一个新的worker, 类的方法被绑定在这个特定的worker上, worker可以访问和修改类的状态</td>\n</tr>\n<tr>\n<td>objects</td>\n<td>一个worker或者一个actor实例被创建出来之后就变成了object, 这些object可以存在在集群中的任何位置, 可以通过ref来访问</td>\n</tr>\n<tr>\n<td>placement groups</td>\n<td>允许用户跨多个节点自动保留资源, 往往用于两种情况:<br>(1)组调度, 我们需要一组任务同时开始; (2)最大化数据局部性, 减少数据移动的开销</td>\n</tr>\n<tr>\n<td>environment dependencies</td>\n<td>因为tasks或者actors可能在环境中的任何一个节点执行, 所以需要解决不同节点之间的环境依赖问题, 这个问题要么要用户提前在节点上都准备好需要的环境, 或者使用Ray的<a href=\"https://docs.ray.io/en/latest/ray-core/handling-dependencies.html#runtime-environments\">runtime environments</a>动态安装这些环境.</td>\n</tr>\n</tbody></table>\n<h2 id=\"资源管理\"><a href=\"#资源管理\" class=\"headerlink\" title=\"资源管理\"></a>资源管理</h2><p>Ray允许用户指定资源, </p>\n<p><img src=\"/Ray%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20221221174102006.png\" alt=\"image-20221221174102006\"></p>\n"},{"title":"CTR prediction","date":"2023-02-09T11:33:09.000Z","cover":"https://github.com/PaddlePaddle/PaddleRec/raw/master/doc/imgs/rec-overview.png","typora-root-url":"CTR-prediction","_content":"\n# CTR Prediction\n\n> 本文参考:\n>\n> [BarsCTR:]: https://arxiv.org/abs/2009.05794\t\"《BarsCTR: Open Benchmarking for Click-Through Rate Prediction》\"\n>\n> \n\nClick-through rate (CTR) prediction点击率预测的目标是预测用户点击给定商品的概率。如何提高CTR预测的准确性仍然是一个具有挑战性的研究问题。与其他数据类型(如图像和文本)相比，CTR预测问题中的数据通常采用表格格式，由多个不同字段的数值、类别或多值(或序列)特征组成。**样本量通常很大，但特征空间高度稀疏。**例如，Google Play中的应用推荐涉及数十亿个样本和数百万个特征。\n\n### CTR预测模型的组成\n\n一般来说，CTR预测模型由以下几个关键部分组成:\n\n1. Feature Embedding: CTR预测的输入实例通常包含三组特征，即，用户简介，项目简介，以及上下文信息. 每组特征都有一些字段，如下所示:\n\n   - 用户简介:年龄、性别、城市、职业、兴趣等\n   - 商品简介:商品ID、类别、标签、品牌、卖家、价格等。\n   - 上下文:工作日、时间、位置、槽位号等。\n\n   每个字段中的特征可以是类别、数值或多值的(例如，单个项目的多个标记)。由于大多数特征非常稀疏，经过one-hot或multi-hot编码后形成高维特征空间，通常采用特征嵌入将这些特征映射到低维密集向量中。下面我们总结了类别，数值，多值这三种特征的嵌入过程。\n\n   - 类别：对于类别`i`,给定one-hot特征向量$x_i$, 嵌入矩阵$V_i \\in R^{d\\times n}$, `d`是嵌入维度, `n`是字母表个数(类别个数). 嵌入后的向量是`d * 1`的. \n   - 数值: 对于数值特征`j`, 我们有多种嵌入方式:\n     - 通过手动设计(例如，将13 ~ 19岁的年龄分组为青少年)或通过在数字特征上训练决策树(例如，GBDT)，然后将它们以类别特征的方式嵌入;\n     - 给定一个规范化的标量值$x_j$, $e_j = v_j x_j, \\quad v_j \\in R^d$是所有特征`j`共享的嵌入向量; \n     -  除了将每个值存储到一个类别中或为每个数值字段分配一个向量, 还可以利用`AutoDis`, 一种数值特征嵌入方法，利用元嵌入矩阵对数值特征进行动态类别化和嵌入计算。\n   - 多值: 对于多值特征`h`, 每个特征都可以表示为一个序列. $e_h = V_h[x_{h_1},x_{h_2},x_{h_3},...,x_{h_k}] \\in R^{d \\times k}$, 其中$x_{h_k}$是一个one-hot向量, `k`表示序列的最大长度, 嵌入结果$e_h$可以被进一步嵌入为一个`d`维向量(均值池化/求和池化). 进一步的潜在改进是应用序列模型，如DIN中的目标注意力和DIEN中的GRU，来聚合多值行为序列特征。\n\n2. Feature Interaction: 在特征嵌入后，可以直接应用任何分类模型进行CTR预测。然而，对于CTR预测任务，特征之间的相互作用(又称特征连接, feature conjunctions)是提高分类性能的核心。在因子分解机(factorization machines, FM)中指明，内积为捕获成对特征相互作用的简单而有效的方法。自从FM的成功以来，大量的研究都致力于以不同的方式捕捉特征之间的相互作用。自从FM的成功以来，大量的研究都致力于以不同的方式捕捉特征之间的相互作用。此外，目前大多数工作研究一种将显式和隐式特征交互与普通全连接网络(即mlp)结合起来的方法。\n\n3. Loss Function: 二元交叉熵损失在CTR预测任务中被广泛应用，其定义如下;\n   $$\n   L = -\\frac{1}{N}\\Sigma_D (y\\ log\\hat y + (1-y)log(1-\\hat y))\n   $$\n   其中`D`是有`N`个样本的数据集, `y`和$\\hat y$分别表示真实的和估计的点击概率, $\\hat y = \\sigma (\\phi (x)),\\quad \\phi(x)$代表模型函数, CTR预测建模的核心在于如何构建模型$\\phi(x)$, 并通过训练数据学习模型参数. \n\n### 经典模型\n\n本节详见参考论文\n\n1. Shallow Models: 工业CTR预测任务通常具有大规模的数据。因此，浅层模型因其简单高效而得到了广泛的应用。即使在今天，LR[40]和FM[39]仍然是工业中部署的两个强大的基线模型。(e.g. LR, FM, FFM, HOFM, FwFM, LorentzFM)\n2. Deep Models: 目前，深度神经网络在CTR预测方面得到了广泛的研究和应用。与浅模型相比，深度模型在利用非线性激活函数捕捉复杂的高阶特征交互方面更强大，通常会产生更好的性能。然而，在实际应用中，效率已成为深度模型规模化的主要瓶颈。(e.g. DNN, CCPM, Wide&Deep, IPNN, DeepCross, NFM, AFM, DeepFM, DCN, xDeepFM, HFM+, FGCNN, AutoInt+, FiGNN, ONN, FiBiNET, AFN+, InterHAt)\n","source":"_posts/CTR-prediction.md","raw":"---\ntitle: CTR prediction\ndate: 2023-02-09 19:33:09\ntags: [推荐系统, 机器学习, 神经网络, 人工智能]\ncategories: [索道集]\ncover: https://github.com/PaddlePaddle/PaddleRec/raw/master/doc/imgs/rec-overview.png\ntypora-root-url: CTR-prediction\n---\n\n# CTR Prediction\n\n> 本文参考:\n>\n> [BarsCTR:]: https://arxiv.org/abs/2009.05794\t\"《BarsCTR: Open Benchmarking for Click-Through Rate Prediction》\"\n>\n> \n\nClick-through rate (CTR) prediction点击率预测的目标是预测用户点击给定商品的概率。如何提高CTR预测的准确性仍然是一个具有挑战性的研究问题。与其他数据类型(如图像和文本)相比，CTR预测问题中的数据通常采用表格格式，由多个不同字段的数值、类别或多值(或序列)特征组成。**样本量通常很大，但特征空间高度稀疏。**例如，Google Play中的应用推荐涉及数十亿个样本和数百万个特征。\n\n### CTR预测模型的组成\n\n一般来说，CTR预测模型由以下几个关键部分组成:\n\n1. Feature Embedding: CTR预测的输入实例通常包含三组特征，即，用户简介，项目简介，以及上下文信息. 每组特征都有一些字段，如下所示:\n\n   - 用户简介:年龄、性别、城市、职业、兴趣等\n   - 商品简介:商品ID、类别、标签、品牌、卖家、价格等。\n   - 上下文:工作日、时间、位置、槽位号等。\n\n   每个字段中的特征可以是类别、数值或多值的(例如，单个项目的多个标记)。由于大多数特征非常稀疏，经过one-hot或multi-hot编码后形成高维特征空间，通常采用特征嵌入将这些特征映射到低维密集向量中。下面我们总结了类别，数值，多值这三种特征的嵌入过程。\n\n   - 类别：对于类别`i`,给定one-hot特征向量$x_i$, 嵌入矩阵$V_i \\in R^{d\\times n}$, `d`是嵌入维度, `n`是字母表个数(类别个数). 嵌入后的向量是`d * 1`的. \n   - 数值: 对于数值特征`j`, 我们有多种嵌入方式:\n     - 通过手动设计(例如，将13 ~ 19岁的年龄分组为青少年)或通过在数字特征上训练决策树(例如，GBDT)，然后将它们以类别特征的方式嵌入;\n     - 给定一个规范化的标量值$x_j$, $e_j = v_j x_j, \\quad v_j \\in R^d$是所有特征`j`共享的嵌入向量; \n     -  除了将每个值存储到一个类别中或为每个数值字段分配一个向量, 还可以利用`AutoDis`, 一种数值特征嵌入方法，利用元嵌入矩阵对数值特征进行动态类别化和嵌入计算。\n   - 多值: 对于多值特征`h`, 每个特征都可以表示为一个序列. $e_h = V_h[x_{h_1},x_{h_2},x_{h_3},...,x_{h_k}] \\in R^{d \\times k}$, 其中$x_{h_k}$是一个one-hot向量, `k`表示序列的最大长度, 嵌入结果$e_h$可以被进一步嵌入为一个`d`维向量(均值池化/求和池化). 进一步的潜在改进是应用序列模型，如DIN中的目标注意力和DIEN中的GRU，来聚合多值行为序列特征。\n\n2. Feature Interaction: 在特征嵌入后，可以直接应用任何分类模型进行CTR预测。然而，对于CTR预测任务，特征之间的相互作用(又称特征连接, feature conjunctions)是提高分类性能的核心。在因子分解机(factorization machines, FM)中指明，内积为捕获成对特征相互作用的简单而有效的方法。自从FM的成功以来，大量的研究都致力于以不同的方式捕捉特征之间的相互作用。自从FM的成功以来，大量的研究都致力于以不同的方式捕捉特征之间的相互作用。此外，目前大多数工作研究一种将显式和隐式特征交互与普通全连接网络(即mlp)结合起来的方法。\n\n3. Loss Function: 二元交叉熵损失在CTR预测任务中被广泛应用，其定义如下;\n   $$\n   L = -\\frac{1}{N}\\Sigma_D (y\\ log\\hat y + (1-y)log(1-\\hat y))\n   $$\n   其中`D`是有`N`个样本的数据集, `y`和$\\hat y$分别表示真实的和估计的点击概率, $\\hat y = \\sigma (\\phi (x)),\\quad \\phi(x)$代表模型函数, CTR预测建模的核心在于如何构建模型$\\phi(x)$, 并通过训练数据学习模型参数. \n\n### 经典模型\n\n本节详见参考论文\n\n1. Shallow Models: 工业CTR预测任务通常具有大规模的数据。因此，浅层模型因其简单高效而得到了广泛的应用。即使在今天，LR[40]和FM[39]仍然是工业中部署的两个强大的基线模型。(e.g. LR, FM, FFM, HOFM, FwFM, LorentzFM)\n2. Deep Models: 目前，深度神经网络在CTR预测方面得到了广泛的研究和应用。与浅模型相比，深度模型在利用非线性激活函数捕捉复杂的高阶特征交互方面更强大，通常会产生更好的性能。然而，在实际应用中，效率已成为深度模型规模化的主要瓶颈。(e.g. DNN, CCPM, Wide&Deep, IPNN, DeepCross, NFM, AFM, DeepFM, DCN, xDeepFM, HFM+, FGCNN, AutoInt+, FiGNN, ONN, FiBiNET, AFN+, InterHAt)\n","slug":"CTR-prediction","published":1,"updated":"2023-02-10T05:57:27.422Z","_id":"cldy44quc0000eguecyw5d845","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"CTR-Prediction\"><a href=\"#CTR-Prediction\" class=\"headerlink\" title=\"CTR Prediction\"></a>CTR Prediction</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>本文参考:</p>\n<p>[BarsCTR:]: <a href=\"https://arxiv.org/abs/2009.05794\">https://arxiv.org/abs/2009.05794</a>\t“《BarsCTR: Open Benchmarking for Click-Through Rate Prediction》”</p></blockquote>\n<p>Click-through rate (CTR) prediction点击率预测的目标是预测用户点击给定商品的概率。如何提高CTR预测的准确性仍然是一个具有挑战性的研究问题。与其他数据类型(如图像和文本)相比，CTR预测问题中的数据通常采用表格格式，由多个不同字段的数值、类别或多值(或序列)特征组成。<strong>样本量通常很大，但特征空间高度稀疏。</strong>例如，Google Play中的应用推荐涉及数十亿个样本和数百万个特征。</p>\n<h3 id=\"CTR预测模型的组成\"><a href=\"#CTR预测模型的组成\" class=\"headerlink\" title=\"CTR预测模型的组成\"></a>CTR预测模型的组成</h3><p>一般来说，CTR预测模型由以下几个关键部分组成:</p>\n<ol>\n<li><p>Feature Embedding: CTR预测的输入实例通常包含三组特征，即，用户简介，项目简介，以及上下文信息. 每组特征都有一些字段，如下所示:</p>\n<ul>\n<li>用户简介:年龄、性别、城市、职业、兴趣等</li>\n<li>商品简介:商品ID、类别、标签、品牌、卖家、价格等。</li>\n<li>上下文:工作日、时间、位置、槽位号等。</li>\n</ul>\n<p>每个字段中的特征可以是类别、数值或多值的(例如，单个项目的多个标记)。由于大多数特征非常稀疏，经过one-hot或multi-hot编码后形成高维特征空间，通常采用特征嵌入将这些特征映射到低维密集向量中。下面我们总结了类别，数值，多值这三种特征的嵌入过程。</p>\n<ul>\n<li>类别：对于类别<code>i</code>,给定one-hot特征向量$x_i$, 嵌入矩阵$V_i \\in R^{d\\times n}$, <code>d</code>是嵌入维度, <code>n</code>是字母表个数(类别个数). 嵌入后的向量是<code>d * 1</code>的. </li>\n<li>数值: 对于数值特征<code>j</code>, 我们有多种嵌入方式:<ul>\n<li>通过手动设计(例如，将13 ~ 19岁的年龄分组为青少年)或通过在数字特征上训练决策树(例如，GBDT)，然后将它们以类别特征的方式嵌入;</li>\n<li>给定一个规范化的标量值$x_j$, $e_j &#x3D; v_j x_j, \\quad v_j \\in R^d$是所有特征<code>j</code>共享的嵌入向量; </li>\n<li>除了将每个值存储到一个类别中或为每个数值字段分配一个向量, 还可以利用<code>AutoDis</code>, 一种数值特征嵌入方法，利用元嵌入矩阵对数值特征进行动态类别化和嵌入计算。</li>\n</ul>\n</li>\n<li>多值: 对于多值特征<code>h</code>, 每个特征都可以表示为一个序列. $e_h &#x3D; V_h[x_{h_1},x_{h_2},x_{h_3},…,x_{h_k}] \\in R^{d \\times k}$, 其中$x_{h_k}$是一个one-hot向量, <code>k</code>表示序列的最大长度, 嵌入结果$e_h$可以被进一步嵌入为一个<code>d</code>维向量(均值池化&#x2F;求和池化). 进一步的潜在改进是应用序列模型，如DIN中的目标注意力和DIEN中的GRU，来聚合多值行为序列特征。</li>\n</ul>\n</li>\n<li><p>Feature Interaction: 在特征嵌入后，可以直接应用任何分类模型进行CTR预测。然而，对于CTR预测任务，特征之间的相互作用(又称特征连接, feature conjunctions)是提高分类性能的核心。在因子分解机(factorization machines, FM)中指明，内积为捕获成对特征相互作用的简单而有效的方法。自从FM的成功以来，大量的研究都致力于以不同的方式捕捉特征之间的相互作用。自从FM的成功以来，大量的研究都致力于以不同的方式捕捉特征之间的相互作用。此外，目前大多数工作研究一种将显式和隐式特征交互与普通全连接网络(即mlp)结合起来的方法。</p>\n</li>\n<li><p>Loss Function: 二元交叉熵损失在CTR预测任务中被广泛应用，其定义如下;<br>$$<br>L &#x3D; -\\frac{1}{N}\\Sigma_D (y\\ log\\hat y + (1-y)log(1-\\hat y))<br>$$<br>其中<code>D</code>是有<code>N</code>个样本的数据集, <code>y</code>和$\\hat y$分别表示真实的和估计的点击概率, $\\hat y &#x3D; \\sigma (\\phi (x)),\\quad \\phi(x)$代表模型函数, CTR预测建模的核心在于如何构建模型$\\phi(x)$, 并通过训练数据学习模型参数.</p>\n</li>\n</ol>\n<h3 id=\"经典模型\"><a href=\"#经典模型\" class=\"headerlink\" title=\"经典模型\"></a>经典模型</h3><p>本节详见参考论文</p>\n<ol>\n<li>Shallow Models: 工业CTR预测任务通常具有大规模的数据。因此，浅层模型因其简单高效而得到了广泛的应用。即使在今天，LR[40]和FM[39]仍然是工业中部署的两个强大的基线模型。(e.g. LR, FM, FFM, HOFM, FwFM, LorentzFM)</li>\n<li>Deep Models: 目前，深度神经网络在CTR预测方面得到了广泛的研究和应用。与浅模型相比，深度模型在利用非线性激活函数捕捉复杂的高阶特征交互方面更强大，通常会产生更好的性能。然而，在实际应用中，效率已成为深度模型规模化的主要瓶颈。(e.g. DNN, CCPM, Wide&amp;Deep, IPNN, DeepCross, NFM, AFM, DeepFM, DCN, xDeepFM, HFM+, FGCNN, AutoInt+, FiGNN, ONN, FiBiNET, AFN+, InterHAt)</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CTR-Prediction\"><a href=\"#CTR-Prediction\" class=\"headerlink\" title=\"CTR Prediction\"></a>CTR Prediction</h1><blockquote>\n<p>本文参考:</p>\n<p>[BarsCTR:]: <a href=\"https://arxiv.org/abs/2009.05794\">https://arxiv.org/abs/2009.05794</a>\t“《BarsCTR: Open Benchmarking for Click-Through Rate Prediction》”</p>\n</blockquote>\n<p>Click-through rate (CTR) prediction点击率预测的目标是预测用户点击给定商品的概率。如何提高CTR预测的准确性仍然是一个具有挑战性的研究问题。与其他数据类型(如图像和文本)相比，CTR预测问题中的数据通常采用表格格式，由多个不同字段的数值、类别或多值(或序列)特征组成。<strong>样本量通常很大，但特征空间高度稀疏。</strong>例如，Google Play中的应用推荐涉及数十亿个样本和数百万个特征。</p>\n<h3 id=\"CTR预测模型的组成\"><a href=\"#CTR预测模型的组成\" class=\"headerlink\" title=\"CTR预测模型的组成\"></a>CTR预测模型的组成</h3><p>一般来说，CTR预测模型由以下几个关键部分组成:</p>\n<ol>\n<li><p>Feature Embedding: CTR预测的输入实例通常包含三组特征，即，用户简介，项目简介，以及上下文信息. 每组特征都有一些字段，如下所示:</p>\n<ul>\n<li>用户简介:年龄、性别、城市、职业、兴趣等</li>\n<li>商品简介:商品ID、类别、标签、品牌、卖家、价格等。</li>\n<li>上下文:工作日、时间、位置、槽位号等。</li>\n</ul>\n<p>每个字段中的特征可以是类别、数值或多值的(例如，单个项目的多个标记)。由于大多数特征非常稀疏，经过one-hot或multi-hot编码后形成高维特征空间，通常采用特征嵌入将这些特征映射到低维密集向量中。下面我们总结了类别，数值，多值这三种特征的嵌入过程。</p>\n<ul>\n<li>类别：对于类别<code>i</code>,给定one-hot特征向量$x_i$, 嵌入矩阵$V_i \\in R^{d\\times n}$, <code>d</code>是嵌入维度, <code>n</code>是字母表个数(类别个数). 嵌入后的向量是<code>d * 1</code>的. </li>\n<li>数值: 对于数值特征<code>j</code>, 我们有多种嵌入方式:<ul>\n<li>通过手动设计(例如，将13 ~ 19岁的年龄分组为青少年)或通过在数字特征上训练决策树(例如，GBDT)，然后将它们以类别特征的方式嵌入;</li>\n<li>给定一个规范化的标量值$x_j$, $e_j &#x3D; v_j x_j, \\quad v_j \\in R^d$是所有特征<code>j</code>共享的嵌入向量; </li>\n<li>除了将每个值存储到一个类别中或为每个数值字段分配一个向量, 还可以利用<code>AutoDis</code>, 一种数值特征嵌入方法，利用元嵌入矩阵对数值特征进行动态类别化和嵌入计算。</li>\n</ul>\n</li>\n<li>多值: 对于多值特征<code>h</code>, 每个特征都可以表示为一个序列. $e_h &#x3D; V_h[x_{h_1},x_{h_2},x_{h_3},…,x_{h_k}] \\in R^{d \\times k}$, 其中$x_{h_k}$是一个one-hot向量, <code>k</code>表示序列的最大长度, 嵌入结果$e_h$可以被进一步嵌入为一个<code>d</code>维向量(均值池化&#x2F;求和池化). 进一步的潜在改进是应用序列模型，如DIN中的目标注意力和DIEN中的GRU，来聚合多值行为序列特征。</li>\n</ul>\n</li>\n<li><p>Feature Interaction: 在特征嵌入后，可以直接应用任何分类模型进行CTR预测。然而，对于CTR预测任务，特征之间的相互作用(又称特征连接, feature conjunctions)是提高分类性能的核心。在因子分解机(factorization machines, FM)中指明，内积为捕获成对特征相互作用的简单而有效的方法。自从FM的成功以来，大量的研究都致力于以不同的方式捕捉特征之间的相互作用。自从FM的成功以来，大量的研究都致力于以不同的方式捕捉特征之间的相互作用。此外，目前大多数工作研究一种将显式和隐式特征交互与普通全连接网络(即mlp)结合起来的方法。</p>\n</li>\n<li><p>Loss Function: 二元交叉熵损失在CTR预测任务中被广泛应用，其定义如下;<br>$$<br>L &#x3D; -\\frac{1}{N}\\Sigma_D (y\\ log\\hat y + (1-y)log(1-\\hat y))<br>$$<br>其中<code>D</code>是有<code>N</code>个样本的数据集, <code>y</code>和$\\hat y$分别表示真实的和估计的点击概率, $\\hat y &#x3D; \\sigma (\\phi (x)),\\quad \\phi(x)$代表模型函数, CTR预测建模的核心在于如何构建模型$\\phi(x)$, 并通过训练数据学习模型参数.</p>\n</li>\n</ol>\n<h3 id=\"经典模型\"><a href=\"#经典模型\" class=\"headerlink\" title=\"经典模型\"></a>经典模型</h3><p>本节详见参考论文</p>\n<ol>\n<li>Shallow Models: 工业CTR预测任务通常具有大规模的数据。因此，浅层模型因其简单高效而得到了广泛的应用。即使在今天，LR[40]和FM[39]仍然是工业中部署的两个强大的基线模型。(e.g. LR, FM, FFM, HOFM, FwFM, LorentzFM)</li>\n<li>Deep Models: 目前，深度神经网络在CTR预测方面得到了广泛的研究和应用。与浅模型相比，深度模型在利用非线性激活函数捕捉复杂的高阶特征交互方面更强大，通常会产生更好的性能。然而，在实际应用中，效率已成为深度模型规模化的主要瓶颈。(e.g. DNN, CCPM, Wide&amp;Deep, IPNN, DeepCross, NFM, AFM, DeepFM, DCN, xDeepFM, HFM+, FGCNN, AutoInt+, FiGNN, ONN, FiBiNET, AFN+, InterHAt)</li>\n</ol>\n"},{"title":"Nsight Compute使用不完全记录","date":"2023-02-12T03:55:25.000Z","cover":"https://developer.nvidia.com/sites/default/files/akamai/nsight-systems-850x480.jpg","_content":"\n# Nsight Compute使用不完全记录\n\nNsight System是Nvidai推出的一款性能分析工具,  对于高性能计算工作者来说是一个分析利器. 但是网上并没有找到非常清晰的使用指南, 官方文档虽然书写的很清晰, 但是内容过于繁杂, 所以这里记录一下自己的使用经历, 方便自己以后的使用的同时, 希望能给其他朋友做一个参考.\n","source":"_posts/Nsight-Compute使用不完全记录.md","raw":"---\ntitle: Nsight Compute使用不完全记录\ndate: 2023-02-12 11:55:25\ntags: [GPU, 性能测试, profile, roofline]\ncategories: [清浅集]\ncover: https://developer.nvidia.com/sites/default/files/akamai/nsight-systems-850x480.jpg\n---\n\n# Nsight Compute使用不完全记录\n\nNsight System是Nvidai推出的一款性能分析工具,  对于高性能计算工作者来说是一个分析利器. 但是网上并没有找到非常清晰的使用指南, 官方文档虽然书写的很清晰, 但是内容过于繁杂, 所以这里记录一下自己的使用经历, 方便自己以后的使用的同时, 希望能给其他朋友做一个参考.\n","slug":"Nsight-Compute使用不完全记录","published":1,"updated":"2023-02-12T10:16:36.457Z","_id":"cle187e760000s4ue8muj8m79","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Nsight-Compute使用不完全记录\"><a href=\"#Nsight-Compute使用不完全记录\" class=\"headerlink\" title=\"Nsight Compute使用不完全记录\"></a>Nsight Compute使用不完全记录</h1><p>Nsight System是Nvidai推出的一款性能分析工具,  对于高性能计算工作者来说是一个分析利器. 但是网上并没有找到非常清晰的使用指南, 官方文档虽然书写的很清晰, 但是内容过于繁杂, 所以这里记录一下自己的使用经历, 方便自己以后的使用的同时, 希望能给其他朋友做一个参考.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Nsight-Compute使用不完全记录\"><a href=\"#Nsight-Compute使用不完全记录\" class=\"headerlink\" title=\"Nsight Compute使用不完全记录\"></a>Nsight Compute使用不完全记录</h1><p>Nsight System是Nvidai推出的一款性能分析工具,  对于高性能计算工作者来说是一个分析利器. 但是网上并没有找到非常清晰的使用指南, 官方文档虽然书写的很清晰, 但是内容过于繁杂, 所以这里记录一下自己的使用经历, 方便自己以后的使用的同时, 希望能给其他朋友做一个参考.</p>\n"},{"title":"C++的STL容器","date":"2023-02-24T01:17:03.000Z","ccover":"https://picx.zhimg.com/v2-ca4e5a8efa7a08812468d7fdc778174d_1440w.jpg?source=172ae18b","_content":"\n# C++的STL容器\n\n> 本文参考自《C语言中文网》中的[STL](http://c.biancheng.net/stl/)部分，侵删。\n\nC++的标准模板库(STL)的容器主要可以分为序列式容器, 关联式容器, 无序关联式容器. \n\n1. 序列式容器:  包括 array、vector、deque、list 和 forward_list 容器。\n\n   所谓STL序列式容器，其共同的特点是不会对存储的元素进行排序，元素排列的顺序取决于存储它们的顺序。\n\n2. 关联式容器: 包括map, multimap, set以及multiset这四种容器. 和序列式容器不同的是, 关联式容器在存储容器时, 还会为每个元素配备一个间, 整体以键值对的方式存储在容器中. 相比于前者, 关联式容器可以通过键值直接找到对应的元素, 而无需遍历整个容器. 另外, 关联式容器在存储元素, 默认会根据各元素键值的大小做升序排序.\n\n3. 无序关联式容器: 包括unordered_map, unordered_multimap, unordered_set, unordered_multiset. 又称哈希容器. 和关联式容器一样, 此类容器存储的也是键值对元素, 关联式容器默认情况下会对存储的元素做升序排序, 而无序关联式容器不会. 和其他类容器相比, 无序关联容器擅长通过指定键查找对应的值, 而遍历容器中存储元素的效率不如关联式容器. \n\n4. 容器适配器: 包括 stack、queue、priority_queue. 容器适配器是一个封装了序列容器的类模板，它在一般序列容器的基础上提供了一些不同的功能。之所以称作适配器类，是因为它可以通过适配容器现有的接口来提供不同的功能。\n\n## 序列式容器\n\n由于本文主要是自用, 因此在成员函数部分仅记录了一些自己不熟悉的函数, 如果需要更多的讲解, 可以详见[C语言中文网](http://c.biancheng.net/stl/)\n\n### STL array\n\narray 容器是 C++ 11 标准中新增的序列容器，简单地理解，它就是在 C++ 普通数组的基础上，添加了一些成员函数和全局函数。在使用上，它比普通数组更安全，且效率并没有因此变差。和其它容器不同，`array 容器的大小是固定的，无法动态的扩展或收缩`，这也就意味着，在使用该容器的过程无法借由增加或移除元素而改变其大小，`它只允许访问或者替换存储的元素`。\n\narray 容器以类模板的形式定义在 <array> 头文件，并位于命名空间 std 中,  array 容器有多种初始化方式，如下代码展示了如何创建具有 10 个 double 类型元素的 array 容器, `array 容器不会做默认初始化操作`。\n\n```c++\n// 使用这种方式创建的容器中，各个元素的值是不确定的\nstd::array<double, 10> values;\n// 使用该语句，容器中所有的元素都会被初始化为 0.0。\nstd::array<double, 10> values {};\n// 只初始化了前 4 个元素，剩余的元素都会被初始化为 0.0\nstd::array<double, 10> values {0.5,1.0,1.5,,2.0};\n```\n\narray的操作:\n\n| **成员函数**        | **功能**                                                     |\n| ------------------- | ------------------------------------------------------------ |\n| front()             | 返回容器中第一个元素的直接引用，该函数不适用于空的 array 容器。 |\n| back()              | 返回容器中最后一个元素的直接应用，该函数同样不适用于空的 array 容器。 |\n| data()              | 返回一个指向容器首个元素的指针。利用该指针，可实现复制容器中所有元素等类似功能。 |\n| fill(val)           | 将 val 这个值赋值给容器中的每个元素。                        |\n| array1.swap(array2) | 交换 array1 和 array2 容器中的所有元素，但前提是它们具有相同的长度和类型。 |\n\n另外，在 \\<array\\> 头文件中还重载了 get() 全局函数，该重载函数的功能是访问容器中指定的元素，并返回该元素的引用。\n\n```c++\n#include <iostream>\n//需要引入 array 头文件\n#include <array>\nusing namespace std;\nint main()\n{\n    std::array<int, 4> values{};\n    //初始化 values 容器为 {0,1,2,3}\n    for (int i = 0; i < values.size(); i++) {\n        values.at(i) = i;\n    }\n    //使用 get() 重载函数输出指定位置元素\n    cout << get<3>(values) << endl;\n    //如果容器不为空，则输出容器中所有的元素\n    if (!values.empty()) {\n        for (auto val = values.begin(); val < values.end(); val++) {\n            cout << *val << \" \";\n        }\n    }\n}\n```\n\narray通过`容器名[]`的方式直接访问和使用容器中的元素, 但使用这样方式，由于没有做任何边界检查，所以即便使用越界的索引值去访问或存储元素，也不会被检测到。为了能够有效地避免越界访问的情况，可以使用 array 容器提供的 at() 成员函数, 当传给 at() 的索引是一个越界值时，程序会抛出 std::out_of_range 异常。\n\n### STL vector\n\narray 实现的是静态数组（容量固定的数组），而 vector 实现的是一个动态数组，即可以进行元素的插入和删除. vector 常被称为向量容器，因为该容器擅长在尾部插入或删除元素，在常量时间内就可以完成，时间复杂度为`O(1)`；而对于在容器头部或者中部插入或删除元素，则花费时间要长一些（移动元素需要耗费时间），时间复杂度为线性阶`O(n)`。\n\nvector的操作:\n\n| 函数成员         | 函数功能                                                     |\n| ---------------- | ------------------------------------------------------------ |\n| max_size()       | 返回元素个数的最大值。这通常是一个很大的值，一般是 232-1，所以我们很少会用到这个函数。 |\n| resize()         | 改变实际元素的个数。                                         |\n| capacity()       | 返回当前容量。                                               |\n| reserve()        | 增加容器的容量。                                             |\n| shrink _to_fit() | 将内存减少到等于当前元素实际所使用的大小。                   |\n| assign()         | 用新元素替换原有内容。                                       |\n| swap()           | 交换两个容器的所有元素。                                     |\n| emplace()        | 在指定的位置直接生成一个元素。                               |\n| emplace_back()   | 在序列尾部生成一个元素。                                     |\n\n```c++\n\tstd::vector<int> demo{1,2};\n    //第一种格式用法\n    demo.insert(demo.begin() + 1, 3);//{1,3,2}\n    //第二种格式用法\n    demo.insert(demo.end(), 2, 5);//{1,3,2,5,5}\n    //第三种格式用法\n    std::array<int,3>test{ 7,8,9 };\n    demo.insert(demo.end(), test.begin(), test.end());//{1,3,2,5,5,7,8,9}\n    //第四种格式用法\n    demo.insert(demo.end(), { 10,11 });//{1,3,2,5,5,7,8,9,10,11}\n\t//emplace() 每次只能插入一个 int 类型元素, emplace效率高于insert\n    demo1.emplace(demo1.begin(), 3);\n```\n\n### STL deque\n\ndeque 是 double-ended queue 的缩写，又称双端队列容器。和 vector 不同的是，deque 还擅长在序列头部添加或删除元素，所耗费的时间复杂度也为常数阶`O(1)`. 并且更重要的一点是，`deque 容器中存储元素并不能保证所有元素都存储到连续的内存空间中。当需要向序列两端频繁的添加或删除元素时，应首选 deque 容器。`\n\n成员函数内容和Vector基本一致. \n\n```c++\n//初始化一个空deque容量\ndeque<int>d;\n//向d容器中的尾部依次添加 1，2,3\nd.push_back(1); //{1}\nd.push_back(2); //{1,2}\nd.push_back(3); //{1,2,3}\n//向d容器的头部添加 0 \nd.push_front(0); //{0,1,2,3}\n\n```\n\n和 array、vector 容器一样，可以采用普通数组访问存储元素的方式，访问 deque 容器中的元素.  如果想有效地避免越界访问，可以使用 deque 模板类提供的 at() 成员函数, 如果想有效地避免越界访问，可以使用 deque 模板类提供的 at() 成员函数.\n\n```c++\nd.front() = 10;\nd.back() = 20;\n```\n\n### STL list\n\n又称`双向链表容器`，即该容器的底层是以双向链表的形式实现的。这意味着，list 容器中的元素可以分散存储在内存空间里，而不是必须存储在一整块连续的内存空间中。每个元素都配备了 2 个指针，分别指向它的前一个元素和后一个元素。其中第一个元素的前向指针总为 null，因为它前面没有元素；同样，尾部元素的后向指针也总为 null。\n\n![img](http://c.biancheng.net/uploads/allimg/180912/2-1P912134314345.jpg)\n\n| 成员函数        | 功能                                                         |\n| --------------- | ------------------------------------------------------------ |\n| emplace_front() | 在容器头部生成一个元素。该函数和 push_front() 的功能相同，但效率更高。 |\n| push_front()    | 在容器头部插入一个元素。                                     |\n| pop_front()     | 删除容器头部的一个元素。                                     |\n| emplace_back()  | 在容器尾部直接生成一个元素。该函数和 push_back() 的功能相同，但效率更高。 |\n| push_back()     | 在容器尾部插入一个元素。                                     |\n| pop_back()      | 删除容器尾部的一个元素。                                     |\n| emplace()       | 在容器中的指定位置插入元素。该函数和 insert() 功能相同，但效率更高。 |\n| erase()         | 删除容器中一个或某区域内的元素。                             |\n| swap()          | 交换两个容器中的元素，必须保证这两个容器中存储的元素类型是相同的。 |\n| splice()        | 将一个 list 容器中的元素插入到另一个容器的指定位置。         |\n| remove(val)     | 删除容器中所有等于 val 的元素。                              |\n| remove_if()     | 删除容器中满足条件的元素。                                   |\n| unique()        | 删除容器中相邻的重复元素，只保留一个。                       |\n| merge()         | 合并两个事先已排好序的 list 容器，并且合并之后的 list 容器依然是有序的。 |\n| sort()          | 通过更改容器中元素的位置，将它们进行排序。                   |\n| reverse()       | 反转容器中元素的顺序。                                       |\n\n和 insert() 成员方法相比，splice() 成员方法的作用对象是其它 list 容器，其功能是将其它 list 容器中的元素添加到当前 list 容器中指定位置处。\n\n```c++\n// 第一个参数是目标位置, 后面的参数是被移动对象\n//创建并初始化 2 个 list 容器\nlist<int> mylist1{ 1,2,3,4 }, mylist2{10,20,30};\nlist<int>::iterator it = ++mylist1.begin(); //指向 mylist1 容器中的元素 2\n   \n//调用第一种语法格式\nmylist1.splice(it, mylist2); // mylist1: 1 10 20 30 2 3 4\n                             // mylist2:\n                             // it 迭代器仍然指向元素 2，只不过容器变为了 mylist1\n//调用第二种语法格式，将 it 指向的元素 2 移动到 mylist2.begin() 位置处\nmylist2.splice(mylist2.begin(), mylist1, it);   // mylist1: 1 10 20 30 3 4\n                                                // mylist2: 2\n                                                // it 仍然指向元素 2\n\n//调用第三种语法格式，将 [mylist1.begin(),mylist1.end())范围内的元素移动到 mylist.begin() 位置处                  \nmylist2.splice(mylist2.begin(), mylist1, mylist1.begin(), mylist1.end());//mylist1:\n                                                                         //mylist2:1 10 20 30 3 4 2\n```\n\n### STL forward_list\n\nforward_list 是 C++ 11 新添加的一类容器，其底层实现和 list 容器一样，采用的也是链表结构，只不过 forward_list 使用的是单链表，而 list 使用的是双向链表. \n\n![单链表和双向链表](http://c.biancheng.net/uploads/allimg/191219/2-191219135239561.gif)\n\nforward_list 容器中是不提供 size() 函数的，但如果想要获取 forward_list 容器中存储元素的个数，可以使用头文件 \\<iterator\\> 中的 [distance()](http://c.biancheng.net/ref/tan.html) 函数。举个例子：\n\n```c++\nstd::forward_list<int> my_words{1,2,3,4};\nint count = std::distance(std::begin(my_words), std::end(my_words));\n```\n\n并且，forward_list 容器迭代器的移动除了使用 ++ 运算符单步移动，还能使用 advance() 函数.\n\n```c++\n// 结果: 3,4\nstd::forward_list<int> values{1,2,3,4};\nauto it = values.begin();\nadvance(it, 2);\nwhile (it!=values.end())\n{\n    cout << *it << \" \";\n    ++it;\n}\n```\n\n## 关联式容器\n\n关联式容器存储的是“键值对”形式的数据,  基于各个关联式容器存储数据的特点，只有各个键值对中的键和值全部对应相等时，才能使用 set 和 multiset 关联式容器存储，否则就要选用 map 或者 multimap 关联式容器。\n\n### STL pair\n\n考虑到“键值对”并不是普通类型数据，[C++](http://c.biancheng.net/cplus/) [STL](http://c.biancheng.net/stl/) 标准库提供了 pair 类模板，其专门用来将 2 个普通元素 first 和 second. pair 类模板定义在`<utility>`头文件中. \n\n下面程序演示了以上几种创建 pair 对象的方法:\n\n```c++\n// 调用构造函数 1，也就是默认构造函数\npair <string, double> pair1;\n// 调用第 2 种构造函数\npair <string, string> pair2(\"STL教程\",\"http://c.biancheng.net/stl/\");  \n// 调用拷贝构造函数\npair <string, string> pair3(pair2);\n//调用移动构造函数\npair <string, string> pair4(make_pair(\"C++教程\", \"http://c.biancheng.net/cplus/\"));\n// 调用第 5 种构造函数\npair <string, string> pair5(string(\"Python教程\"), string(\"http://c.biancheng.net/python/\"));\n```\n\n`<utility>`头文件中除了提供创建 pair 对象的方法之外，还为 pair 对象重载了 <、<=、>、>=、==、!= 这 6 的运算符，其运算规则是：对于进行比较的 2 个 pair 对象，先比较 pair.first 元素的大小，如果相等则继续比较 pair.second 元素的大小。(二维偏序)\n\n最后需要指出的是，pair类模板还提供有一个 swap() 成员函数，能够互换 2 个 pair 对象的键值对，其操作成功的前提是这 2 个 pair 对象的键和值的类型要相同.\n\n```c++\npair <string, int> pair1(\"pair\", 10);                   \npair <string, int> pair2(\"pair2\", 20);\n//交换 pair1 和 pair2 的键值对\npair1.swap(pair2);\n//pair1: pair2 20\n//pair2: pair 10\n```\n\n### STL map\n\nmap 容器存储的都是 pair 对象，也就是用 pair 类模板创建的键值对。与此同时，在使用 map 容器存储多个键值对时，该容器会自动根据各键值对的键的大小，按照既定的规则进行排序,  根据实际情况的需要，我们可以手动指定 map 容器的排序规则. `使用 map 容器存储的各个键值对，键的值既不能重复也不能被修改。`这意味着只要键值对被存储到 map 容器中，其键的值将不能再做任何修改。\n\n```c++\n//如下语句可以指定升序排列键值\nstd::map<std::string, int, std::greater<std::string> >myMap{ {\"C语言教程\",10},{\"STL教程\",20} };\n```\n\n| 成员函数         | 功能                                                         |\n| ---------------- | ------------------------------------------------------------ |\n| find(key)        | 在 map 容器中查找键为 key 的键值对，如果成功找到，则返回指向该键值对的双向迭代器；反之，则返回和 end() 方法一样的迭代器。另外，如果 map 容器用 const 限定，则该方法返回的是 const 类型的双向迭代器。 |\n| lower_bound(key) | 返回一个指向当前 map 容器中第一个大于或等于 key 的键值对的双向迭代器。如果 map 容器用 const 限定，则该方法返回的是 const 类型的双向迭代器。 |\n| upper_bound(key) | 返回一个指向当前 map 容器中第一个大于 key 的键值对的迭代器。如果 map 容器用 const 限定，则该方法返回的是 const 类型的双向迭代器。 |\n| equal_range(key) | 该方法返回一个 pair 对象（包含 2 个双向迭代器），其中 pair.first 和 lower_bound() 方法的返回值等价，pair.second 和 upper_bound() 方法的返回值等价。也就是说，该方法将返回一个范围，该范围中包含的键为 key 的键值对（map 容器键值对唯一，因此该范围最多包含一个键值对）。 |\n| emplace()        | 在当前 map 容器中的指定位置处构造新键值对。其效果和插入键值对一样，但效率更高。 |\n| emplace_hint()   | 在本质上和 emplace() 在 map 容器中构造新键值对的方式是一样的，不同之处在于，使用者必须为该方法提供一个指示键值对生成位置的迭代器，并作为该方法的第一个参数。 |\n| count(key)       | 在当前 map 容器中，查找键为 key 的键值对的个数并返回。注意，由于 map 容器中各键值对的键的值是唯一的，因此该函数的返回值最大为 1。 |\n\n![C++ STL map部分成员方法示意图](http://c.biancheng.net/uploads/allimg/191128/2-19112Q14QE40.gif)\n\n```c++\n//创建并初始化 map 容器\nstd::map<std::string, std::string>myMap{ {\"STL教程\",\"http://c.biancheng.net/stl/\"},\n                                         {\"C语言教程\",\"http://c.biancheng.net/c/\"},\n                                         {\"Java教程\",\"http://c.biancheng.net/java/\"} };\n//找到第一个键的值不小于 \"Java教程\" 的键值对\nauto iter = myMap.lower_bound(\"Java教程\");\n//lower：Java教程 http://c.biancheng.net/java/\ncout << \"lower：\" << iter->first << \" \" << iter->second << endl;\n\n//找到第一个键的值大于 \"Java教程\" 的键值对\niter = myMap.upper_bound(\"Java教程\");\n//upper：STL教程 http://c.biancheng.net/stl/\ncout <<\"upper：\" << iter->first << \" \" << iter->second << endl;\n```\n\n和 insert() 方法一样，虽然 emplace_hint() 方法指定了插入键值对的位置，但 map 容器为了保持存储键值对的有序状态，可能会移动其位置。\n\n```c++\n//创建并初始化 map 容器\nstd::map<string, string>mymap;\n//指定在 map 容器插入键值对\nmap<string, string>::iterator iter = mymap.emplace_hint(mymap.begin(),\"STL教程\", \"http://c.biancheng.net/stl/\");\ncout << iter->first << \" \" << iter->second << endl;\niter = mymap.emplace_hint(mymap.begin(), \"C语言教程\", \"http://c.biancheng.net/c/\");\ncout << iter->first << \" \" << iter->second << endl;\n//插入失败样例\niter = mymap.emplace_hint(mymap.begin(), \"STL教程\", \"http://c.biancheng.net/java/\");\ncout << iter->first << \" \" << iter->second << endl;\n```\n\n只有当 map 容器中确实存有包含该指定键的键值对，借助重载的 [ ] 运算符才能成功获取该键对应的值；反之，若当前 map 容器中没有包含该指定键的键值对，则此时使用 [ ] 运算符将不再是访问容器中的元素，而变成了向该 map 容器中增添一个键值对。\n\n### STL multimap\n\nmultimap 容器具有和 map 相同的特性，即 multimap 容器也用于存储 pair<const K, T> 类型的键值对（其中 K 表示键的类型，T 表示值的类型），其中各个键值对的键的值不能做修改；并且，该容器也会自行根据键的大小对存储的所有键值对做排序操作。`和 map 容器的区别在于，multimap 容器中可以同时存储多（≥2）个键相同的键值对。`和 map 容器一样，实现 multimap 容器的类模板也定义在`<map>`头文件，并位于 std 命名空间中。在某些特定场景中，我们还可以为 multimap 容器自定义排序规则. multimap的操作和成员函数基本与map完全一致. 但和 map 容器相比，`multimap 未提供 at() 成员方法，也没有重载 [] 运算符`。这意味着，map 容器中通过指定键获取指定指定键值对的方式，将不再适用于 multimap 容器。其实这很好理解，因为 multimap 容器中指定的键可能对应多个键值对，而不再是 1 个。另外，由于maltimap容器可存储多个具有相同键的键值对，因此lower_bound()、upper_bound()、equal_range()以及count()方法经常会用到。\n\n### STL set \n\n和 map、multimap 容器不同，使用 set 容器存储的各个键值对，要求键 key 和值 value 必须相等。基于 set 容器的这种特性，当使用 set 容器存储键值对时，只需要为其提供各键值对中的 value 值（也就是 key 的值）即可。set 容器也会自行根据键的大小对存储的键值对进行排序. `使用 set 容器存储的各个元素的值必须各不相同`。更重要的是，从语法上讲 set 容器并没有强制对存储元素的类型做 const 修饰，即 set 容器中存储的元素的值是可以修改的。但是，C++ 标准为了防止用户修改容器中元素的值，对所有可能会实现此操作的行为做了限制，`使得在正常情况下，用户是无法做到修改 set 容器中元素的值的。`\n\n`对于初学者来说，切勿尝试直接修改 set 容器中已存储元素的值，这很有可能破坏 set 容器中元素的有序性，最正确的修改 set 容器中元素值的做法是：先删除该元素，然后再添加一个修改后的元素。`\n\nset的成员函数和multimap基本一致, `set 容器类模板中未提供 at() 成员函数，也未对 [] 运算符进行重载。因此，要想访问 set 容器中存储的元素，只能借助 set 容器的迭代器。`\n\n`C++ STL 标准库为 set 容器配置的迭代器类型为双向迭代器。这意味着，假设 p 为此类型的迭代器，则其只能进行 ++p、p++、--p、p--、*p 操作，并且 2 个双向迭代器之间做比较，也只能使用 == 或者 != 运算符。`\n\n如果只想遍历 set 容器中指定区域内的部分数据，则可以借助 find()、lower_bound() 以及 upper_bound() 实现。通过调用它们，可以获取一个指向指定元素的迭代器。equal_range(val) 函数的返回值是一个 pair 类型数据，其包含 2 个迭代器，表示 set 容器中和指定参数 val 相等的元素所在的区域，但由于 set 容器中存储的元素各不相等，因此该函数返回的这 2 个迭代器所表示的范围中，最多只会包含 1 个元素。\n\n### STL multiset\n\n和 set 容器不同的是，`multiset 容器可以存储多个值相同的元素。`虽然 multiset 容器和 set 容器拥有的成员方法完全相同，但由于 multiset 容器允许存储多个值相同的元素，因此诸如 count()、find()、lower_bound()、upper_bound()、equal_range()等方法，更常用于 multiset 容器。\n\n```c++\nstd::multiset<int> mymultiset{1,2,2,2,3,4,5};\n//multiset size = 7\ncout << \"multiset size = \" << mymultiset.size() << endl;\n//multiset count(2) =3\ncout << \"multiset count(2) =\" << mymultiset.count(2) << endl;\n//向容器中添加元素 8\nmymultiset.insert(8);\n//删除容器中所有值为 2 的元素\nint num = mymultiset.erase(2);\n//删除了 3 个元素 2\ncout << \"删除了 \" << num << \" 个元素 2\" << endl;\n//输出容器中存储的所有元素 1 3 4 5 8\nfor (auto iter = mymultiset.begin(); iter != mymultiset.end(); ++iter) {\n    cout << *iter << \" \";\n}\n```\n\n### 关联式容器自定义排序\n\n模板库中常用的可供关联容器使用的排序规则为![在这里插入图片描述](https://img-blog.csdnimg.cn/20210422104233471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDQ4NDcxNQ==,size_16,color_FFFFFF,t_70#pic_center)\n\n同时也可以自定义:\n\n```c++\nclass cmp {\npublic:\n    //重载 () 运算符\n    bool operator ()(const string &a,const string &b) {\n        //按照字符串的长度，做升序排序(即存储的字符串从短到长)\n        return  (a.length() < b.length());\n    }\n};\nint main() {\n    //创建 set 容器，并使用自定义的 cmp 排序规则\n    std::set<string, cmp>myset{\"http://c.biancheng.net/stl/\",\n                               \"http://c.biancheng.net/python/\",\n                               \"http://c.biancheng.net/java/\"};\n    //输出容器中存储的元素\n    for (auto iter = myset.begin(); iter != myset.end(); ++iter) {\n            cout << *iter << endl;\n    }\n    return 0;\n}\n//结果：\n//http://c.biancheng.net/stl/\n//http://c.biancheng.net/java/\n//http://c.biancheng.net/python/\n\n```\n\n当关联式容器中存储的数据类型为自定义的结构体变量或者类对象时，通过对现有排序规则中所用的关系运算符进行重载，也能实现自定义排序规则的目的。注意，当关联式容器中存储的元素类型为结构体指针变量或者类的指针对象时，只能使用函数对象的方式自定义排序规则，此方法不再适用。\n\n## 无序关联式容器\n\n无序关联式容器，又称哈希容器。和关联式容器一样，此类容器存储的也是键值对元素；不同之处在于，关联式容器默认情况下会对存储的元素做升序排序，而无序关联式容器不会。`无序关联式容器擅长通过指定键查找对应的值，而遍历容器中存储元素的效率不如关联式容器。`\n\n**关联式容器的底层实现采用的树存储结构，更确切的说是红黑树结构；无序容器的底层实现采用的是哈希表的存储结构, 并且当数据存储位置发生冲突时，解决方法选用的是“链地址法”。**\n\n基于底层实现采用了不同的数据结构，因此和关联式容器相比，无序容器具有以下 2 个特点：\n\n1. 无序容器内部存储的键值对是无序的，各键值对的存储位置取决于该键值对中的键，\n2. 和关联式容器相比，无序容器擅长通过指定键查找对应的值（平均时间复杂度为 O(1)）；但对于使用迭代器遍历容器中存储的元素，无序容器的执行效率则不如关联式容器。\n\n| 无序容器           | 功能                                                         |\n| ------------------ | ------------------------------------------------------------ |\n| unordered_map      | 存储键值对 <key, value> 类型的元素，其中各个键值对键的值不允许重复，且该容器中存储的键值对是无序的。 |\n| unordered_multimap | 和 unordered_map 唯一的区别在于，该容器允许存储多个键相同的键值对。 |\n| unordered_set      | 不再以键值对的形式存储数据，而是直接存储数据元素本身（当然也可以理解为，该容器存储的全部都是键 key 和值 value 相等的键值对，正因为它们相等，因此只存储 value 即可）。另外，该容器存储的元素不能重复，且容器内部存储的元素也是无序的。 |\n| unordered_multiset | 和 unordered_set 唯一的区别在于，该容器允许存储值相同的元素。 |\n\n### unordered_map \n\nunordered_map 定义在`<unordered_map>`头文件\n\n| 成员方法           | 功能                                                         |\n| ------------------ | ------------------------------------------------------------ |\n| bucket_count()     | 返回当前容器底层存储键值对时，使用桶（一个线性链表代表一个桶）的数量。 |\n| max_bucket_count() | 返回当前系统中，unordered_map 容器底层最多可以使用多少桶。   |\n| bucket_size(n)     | 返回第 n 个桶中存储键值对的数量。                            |\n| bucket(key)        | 返回以 key 为键的键值对所在桶的编号。                        |\n| load_factor()      | 返回 unordered_map 容器中当前的负载因子。负载因子，指的是的当前容器中存储键值对的数量（size()）和使用桶数（bucket_count()）的比值，即 load_factor() = size() / bucket_count()。 |\n| max_load_factor()  | 返回或者设置当前 unordered_map 容器的负载因子。              |\n| rehash(n)          | 将当前容器底层使用桶的数量设置为 n。                         |\n| reserve()          | 将存储桶的数量（也就是 bucket_count() 方法的返回值）设置为至少容纳count个元（不超过最大负载因子）所需的数量，并重新整理容器。 |\n| hash_function()    | 返回当前容器使用的哈希函数对象。                             |\n\nunordered_map 容器类模板中，实现了对 [ ] 运算符的重载，使得我们可以像“利用下标访问普通数组中元素”那样，通过目标键值对的键获取到该键对应的值。如果当前容器中并没有存储以 [ ] 运算符内指定的元素作为键的键值对，则此时 [ ] 运算符的功能将转变为：向当前容器中添加以目标元素为键的键值对. \n\n### STL unordered_multimap\n\nunordered_multimap 容器可以存储多个键相等的键值对，而 unordered_map 容器不行。\n\n### STL unordered_set\n\nunordered_set 容器，可直译为“无序 set 容器”，即 unordered_set 容器和 set 容器很像，唯一的区别就在于 set 容器会自行对存储的数据进行排序，而 unordered_set 容器不会。实现 unordered_set 容器的模板类定义在<unordered_set>头文件\n\n**总的来说，unordered_set 容器具有以下几个特性：**\n\n1. **不再以键值对的形式存储数据，而是直接存储数据的值；**\n2. **容器内部存储的各个元素的值都互不相等，且不能被修改。**\n3. **不会对内部存储的数据进行排序**\n\n### STL unordered_multiset\n\n和 unordered_set 容器不同的是，unordered_multiset 容器可以同时存储多个值相同的元素，且这些元素会存储到哈希表中同一个桶（本质就是链表）上。\n\n## 容器适配器\n\nSTL 提供了 3 种容器适配器，分别为 stack 栈适配器、queue 队列适配器以及 priority_queue 优先权队列适配器。\n\n| 容器适配器     | 基础容器筛选条件                                             | 默认使用的基础容器 |\n| -------------- | ------------------------------------------------------------ | ------------------ |\n| stack          | 基础容器需包含以下成员函数：empty()size()back()push_back()pop_back()满足条件的基础容器有 vector、deque、list。 | deque              |\n| queue          | 基础容器需包含以下成员函数：empty()size()front()back()push_back()pop_front()满足条件的基础容器有 deque、list。 | deque              |\n| priority_queue | 基础容器需包含以下成员函数：empty()size()front()push_back()pop_back()满足条件的基础容器有vector、deque。 | vector             |\n\n### STL stack\n\nstack 栈适配器是一种单端开口的容器（如图 1 所示），实际上该容器模拟的就是栈存储结构，即无论是向里存数据还是从中取数据，都只能从这一个开口实现操作。\n\n![stack适配器示意图](http://c.biancheng.net/uploads/allimg/180913/2-1P913101Q4T2.jpg)\n\n\n\n| 成员函数                     | 功能                                                         |\n| ---------------------------- | ------------------------------------------------------------ |\n| empty()                      | 当 stack 栈中没有元素时，该成员函数返回 true；反之，返回 false。 |\n| size()                       | 返回 stack 栈中存储元素的个数。                              |\n| top()                        | 返回一个栈顶元素的引用，类型为 T&。如果栈为空，程序会报错。  |\n| push(const T& val)           | 先复制 val，再将 val 副本压入栈顶。这是通过调用底层容器的 push_back() 函数完成的。 |\n| push(T&& obj)                | 以移动元素的方式将其压入栈顶。这是通过调用底层容器的有右值引用参数的 push_back() 函数完成的。 |\n| pop()                        | 弹出栈顶元素。                                               |\n| emplace(arg...)              | arg... 可以是一个参数，也可以是多个参数，但它们都只用于构造一个对象，并在栈顶直接生成该对象，作为新的栈顶元素。 |\n| swap(stack<T> & other_stack) | 将两个 stack 适配器中的元素进行互换，需要注意的是，进行互换的 2 个 stack 适配器中存储的元素类型以及底层采用的基础容器类型，都必须相同。 |\n\n### STL queue\n\nqueue 容器适配器有 2 个开口，其中一个开口专门用来输入数据，另一个专门用来输出数据\n\n![queue容器适配器](http://c.biancheng.net/uploads/allimg/180913/2-1P913113140553.jpg)\n\n\n\n| 成员函数                    | 功能                                                         |\n| --------------------------- | ------------------------------------------------------------ |\n| empty()                     | 如果 queue 中没有元素的话，返回 true。                       |\n| size()                      | 返回 queue 中元素的个数。                                    |\n| front()                     | 返回 queue 中第一个元素的引用。如果 queue 是常量，就返回一个常引用；如果 queue 为空，返回值是未定义的。 |\n| back()                      | 返回 queue 中最后一个元素的引用。如果 queue 是常量，就返回一个常引用；如果 queue 为空，返回值是未定义的。 |\n| push(const T& obj)          | 在 queue 的尾部添加一个元素的副本。这是通过调用底层容器的成员函数 push_back() 来完成的。 |\n| emplace()                   | 在 queue 的尾部直接添加一个元素。                            |\n| push(T&& obj)               | 以移动的方式在 queue 的尾部添加元素。这是通过调用底层容器的具有右值引用参数的成员函数 push_back() 来完成的。 |\n| pop()                       | 删除 queue 中的第一个元素。                                  |\n| swap(queue<T> &other_queue) | 将两个 queue 容器适配器中的元素进行互换，需要注意的是，进行互换的 2 个 queue 容器适配器中存储的元素类型以及底层采用的基础容器类型，都必须相同。 |\n\n`和 stack 一样，queue 也没有迭代器，因此访问元素的唯一方式是遍历容器，通过不断移除访问过的元素，去访问下一个元素。`\n\n### STL priority_queue\n\npriority_queue 容器适配器模拟的也是队列这种存储结构，即使用此容器适配器存储元素只能“从一端进（称为队尾），从另一端出（称为队头）”，且每次只能访问 priority_queue 中位于队头的元素。但是，priority_queue 容器适配器中元素的存和取，遵循的并不是 “First in,First out”（先入先出）原则，而是“First in，Largest out”原则。直白的翻译，指的就是先进队列的元素并不一定先出队列，而是优先级最大的元素最先出队列。使用`std::less<T>`按照元素值从大到小进行排序，还可以使用`std::greater<T>`按照元素值从小到大排序，但更多情况下是使用自定义的排序规则。 priority_queue 容器适配器模板位于`<queue>`头文件中. \n\n| 成员函数                       | 功能                                                         |\n| ------------------------------ | ------------------------------------------------------------ |\n| empty()                        | 如果 priority_queue 为空的话，返回 true；反之，返回 false。  |\n| size()                         | 返回 priority_queue 中存储元素的个数。                       |\n| top()                          | 返回 priority_queue 中第一个元素的引用形式。                 |\n| push(const T& obj)             | 根据既定的排序规则，将元素 obj 的副本存储到 priority_queue 中适当的位置。 |\n| push(T&& obj)                  | 根据既定的排序规则，将元素 obj 移动存储到 priority_queue 中适当的位置。 |\n| emplace(Args&&... args)        | Args&&... args 表示构造一个存储类型的元素所需要的数据（对于类对象来说，可能需要多个数据构造出一个对象）。此函数的功能是根据既定的排序规则，在容器适配器适当的位置直接生成该新元素。 |\n| pop()                          | 移除 priority_queue 容器适配器中第一个元素。                 |\n| swap(priority_queue<T>& other) | 将两个 priority_queue 容器适配器中的元素进行互换，需要注意的是，进行互换的 2 个 priority_queue 容器适配器中存储的元素类型以及底层采用的基础容器类型，都必须相同。 |\n\n优先级队列默认**使用vector作为其底层存储数据**的容器，在vector上又使用了堆算法将vector中元素构造成堆的结构，因此priority_queue就是堆，所有需要用到堆的位置，都可以考虑使用priority_queue。\n","source":"_posts/C-的STL容器.md","raw":"---\ntitle: C++的STL容器\ndate: 2023-02-24 09:17:03\ntags: [cpp, stl, 编程]\ncategories: [清浅集]\nccover: https://picx.zhimg.com/v2-ca4e5a8efa7a08812468d7fdc778174d_1440w.jpg?source=172ae18b\n---\n\n# C++的STL容器\n\n> 本文参考自《C语言中文网》中的[STL](http://c.biancheng.net/stl/)部分，侵删。\n\nC++的标准模板库(STL)的容器主要可以分为序列式容器, 关联式容器, 无序关联式容器. \n\n1. 序列式容器:  包括 array、vector、deque、list 和 forward_list 容器。\n\n   所谓STL序列式容器，其共同的特点是不会对存储的元素进行排序，元素排列的顺序取决于存储它们的顺序。\n\n2. 关联式容器: 包括map, multimap, set以及multiset这四种容器. 和序列式容器不同的是, 关联式容器在存储容器时, 还会为每个元素配备一个间, 整体以键值对的方式存储在容器中. 相比于前者, 关联式容器可以通过键值直接找到对应的元素, 而无需遍历整个容器. 另外, 关联式容器在存储元素, 默认会根据各元素键值的大小做升序排序.\n\n3. 无序关联式容器: 包括unordered_map, unordered_multimap, unordered_set, unordered_multiset. 又称哈希容器. 和关联式容器一样, 此类容器存储的也是键值对元素, 关联式容器默认情况下会对存储的元素做升序排序, 而无序关联式容器不会. 和其他类容器相比, 无序关联容器擅长通过指定键查找对应的值, 而遍历容器中存储元素的效率不如关联式容器. \n\n4. 容器适配器: 包括 stack、queue、priority_queue. 容器适配器是一个封装了序列容器的类模板，它在一般序列容器的基础上提供了一些不同的功能。之所以称作适配器类，是因为它可以通过适配容器现有的接口来提供不同的功能。\n\n## 序列式容器\n\n由于本文主要是自用, 因此在成员函数部分仅记录了一些自己不熟悉的函数, 如果需要更多的讲解, 可以详见[C语言中文网](http://c.biancheng.net/stl/)\n\n### STL array\n\narray 容器是 C++ 11 标准中新增的序列容器，简单地理解，它就是在 C++ 普通数组的基础上，添加了一些成员函数和全局函数。在使用上，它比普通数组更安全，且效率并没有因此变差。和其它容器不同，`array 容器的大小是固定的，无法动态的扩展或收缩`，这也就意味着，在使用该容器的过程无法借由增加或移除元素而改变其大小，`它只允许访问或者替换存储的元素`。\n\narray 容器以类模板的形式定义在 <array> 头文件，并位于命名空间 std 中,  array 容器有多种初始化方式，如下代码展示了如何创建具有 10 个 double 类型元素的 array 容器, `array 容器不会做默认初始化操作`。\n\n```c++\n// 使用这种方式创建的容器中，各个元素的值是不确定的\nstd::array<double, 10> values;\n// 使用该语句，容器中所有的元素都会被初始化为 0.0。\nstd::array<double, 10> values {};\n// 只初始化了前 4 个元素，剩余的元素都会被初始化为 0.0\nstd::array<double, 10> values {0.5,1.0,1.5,,2.0};\n```\n\narray的操作:\n\n| **成员函数**        | **功能**                                                     |\n| ------------------- | ------------------------------------------------------------ |\n| front()             | 返回容器中第一个元素的直接引用，该函数不适用于空的 array 容器。 |\n| back()              | 返回容器中最后一个元素的直接应用，该函数同样不适用于空的 array 容器。 |\n| data()              | 返回一个指向容器首个元素的指针。利用该指针，可实现复制容器中所有元素等类似功能。 |\n| fill(val)           | 将 val 这个值赋值给容器中的每个元素。                        |\n| array1.swap(array2) | 交换 array1 和 array2 容器中的所有元素，但前提是它们具有相同的长度和类型。 |\n\n另外，在 \\<array\\> 头文件中还重载了 get() 全局函数，该重载函数的功能是访问容器中指定的元素，并返回该元素的引用。\n\n```c++\n#include <iostream>\n//需要引入 array 头文件\n#include <array>\nusing namespace std;\nint main()\n{\n    std::array<int, 4> values{};\n    //初始化 values 容器为 {0,1,2,3}\n    for (int i = 0; i < values.size(); i++) {\n        values.at(i) = i;\n    }\n    //使用 get() 重载函数输出指定位置元素\n    cout << get<3>(values) << endl;\n    //如果容器不为空，则输出容器中所有的元素\n    if (!values.empty()) {\n        for (auto val = values.begin(); val < values.end(); val++) {\n            cout << *val << \" \";\n        }\n    }\n}\n```\n\narray通过`容器名[]`的方式直接访问和使用容器中的元素, 但使用这样方式，由于没有做任何边界检查，所以即便使用越界的索引值去访问或存储元素，也不会被检测到。为了能够有效地避免越界访问的情况，可以使用 array 容器提供的 at() 成员函数, 当传给 at() 的索引是一个越界值时，程序会抛出 std::out_of_range 异常。\n\n### STL vector\n\narray 实现的是静态数组（容量固定的数组），而 vector 实现的是一个动态数组，即可以进行元素的插入和删除. vector 常被称为向量容器，因为该容器擅长在尾部插入或删除元素，在常量时间内就可以完成，时间复杂度为`O(1)`；而对于在容器头部或者中部插入或删除元素，则花费时间要长一些（移动元素需要耗费时间），时间复杂度为线性阶`O(n)`。\n\nvector的操作:\n\n| 函数成员         | 函数功能                                                     |\n| ---------------- | ------------------------------------------------------------ |\n| max_size()       | 返回元素个数的最大值。这通常是一个很大的值，一般是 232-1，所以我们很少会用到这个函数。 |\n| resize()         | 改变实际元素的个数。                                         |\n| capacity()       | 返回当前容量。                                               |\n| reserve()        | 增加容器的容量。                                             |\n| shrink _to_fit() | 将内存减少到等于当前元素实际所使用的大小。                   |\n| assign()         | 用新元素替换原有内容。                                       |\n| swap()           | 交换两个容器的所有元素。                                     |\n| emplace()        | 在指定的位置直接生成一个元素。                               |\n| emplace_back()   | 在序列尾部生成一个元素。                                     |\n\n```c++\n\tstd::vector<int> demo{1,2};\n    //第一种格式用法\n    demo.insert(demo.begin() + 1, 3);//{1,3,2}\n    //第二种格式用法\n    demo.insert(demo.end(), 2, 5);//{1,3,2,5,5}\n    //第三种格式用法\n    std::array<int,3>test{ 7,8,9 };\n    demo.insert(demo.end(), test.begin(), test.end());//{1,3,2,5,5,7,8,9}\n    //第四种格式用法\n    demo.insert(demo.end(), { 10,11 });//{1,3,2,5,5,7,8,9,10,11}\n\t//emplace() 每次只能插入一个 int 类型元素, emplace效率高于insert\n    demo1.emplace(demo1.begin(), 3);\n```\n\n### STL deque\n\ndeque 是 double-ended queue 的缩写，又称双端队列容器。和 vector 不同的是，deque 还擅长在序列头部添加或删除元素，所耗费的时间复杂度也为常数阶`O(1)`. 并且更重要的一点是，`deque 容器中存储元素并不能保证所有元素都存储到连续的内存空间中。当需要向序列两端频繁的添加或删除元素时，应首选 deque 容器。`\n\n成员函数内容和Vector基本一致. \n\n```c++\n//初始化一个空deque容量\ndeque<int>d;\n//向d容器中的尾部依次添加 1，2,3\nd.push_back(1); //{1}\nd.push_back(2); //{1,2}\nd.push_back(3); //{1,2,3}\n//向d容器的头部添加 0 \nd.push_front(0); //{0,1,2,3}\n\n```\n\n和 array、vector 容器一样，可以采用普通数组访问存储元素的方式，访问 deque 容器中的元素.  如果想有效地避免越界访问，可以使用 deque 模板类提供的 at() 成员函数, 如果想有效地避免越界访问，可以使用 deque 模板类提供的 at() 成员函数.\n\n```c++\nd.front() = 10;\nd.back() = 20;\n```\n\n### STL list\n\n又称`双向链表容器`，即该容器的底层是以双向链表的形式实现的。这意味着，list 容器中的元素可以分散存储在内存空间里，而不是必须存储在一整块连续的内存空间中。每个元素都配备了 2 个指针，分别指向它的前一个元素和后一个元素。其中第一个元素的前向指针总为 null，因为它前面没有元素；同样，尾部元素的后向指针也总为 null。\n\n![img](http://c.biancheng.net/uploads/allimg/180912/2-1P912134314345.jpg)\n\n| 成员函数        | 功能                                                         |\n| --------------- | ------------------------------------------------------------ |\n| emplace_front() | 在容器头部生成一个元素。该函数和 push_front() 的功能相同，但效率更高。 |\n| push_front()    | 在容器头部插入一个元素。                                     |\n| pop_front()     | 删除容器头部的一个元素。                                     |\n| emplace_back()  | 在容器尾部直接生成一个元素。该函数和 push_back() 的功能相同，但效率更高。 |\n| push_back()     | 在容器尾部插入一个元素。                                     |\n| pop_back()      | 删除容器尾部的一个元素。                                     |\n| emplace()       | 在容器中的指定位置插入元素。该函数和 insert() 功能相同，但效率更高。 |\n| erase()         | 删除容器中一个或某区域内的元素。                             |\n| swap()          | 交换两个容器中的元素，必须保证这两个容器中存储的元素类型是相同的。 |\n| splice()        | 将一个 list 容器中的元素插入到另一个容器的指定位置。         |\n| remove(val)     | 删除容器中所有等于 val 的元素。                              |\n| remove_if()     | 删除容器中满足条件的元素。                                   |\n| unique()        | 删除容器中相邻的重复元素，只保留一个。                       |\n| merge()         | 合并两个事先已排好序的 list 容器，并且合并之后的 list 容器依然是有序的。 |\n| sort()          | 通过更改容器中元素的位置，将它们进行排序。                   |\n| reverse()       | 反转容器中元素的顺序。                                       |\n\n和 insert() 成员方法相比，splice() 成员方法的作用对象是其它 list 容器，其功能是将其它 list 容器中的元素添加到当前 list 容器中指定位置处。\n\n```c++\n// 第一个参数是目标位置, 后面的参数是被移动对象\n//创建并初始化 2 个 list 容器\nlist<int> mylist1{ 1,2,3,4 }, mylist2{10,20,30};\nlist<int>::iterator it = ++mylist1.begin(); //指向 mylist1 容器中的元素 2\n   \n//调用第一种语法格式\nmylist1.splice(it, mylist2); // mylist1: 1 10 20 30 2 3 4\n                             // mylist2:\n                             // it 迭代器仍然指向元素 2，只不过容器变为了 mylist1\n//调用第二种语法格式，将 it 指向的元素 2 移动到 mylist2.begin() 位置处\nmylist2.splice(mylist2.begin(), mylist1, it);   // mylist1: 1 10 20 30 3 4\n                                                // mylist2: 2\n                                                // it 仍然指向元素 2\n\n//调用第三种语法格式，将 [mylist1.begin(),mylist1.end())范围内的元素移动到 mylist.begin() 位置处                  \nmylist2.splice(mylist2.begin(), mylist1, mylist1.begin(), mylist1.end());//mylist1:\n                                                                         //mylist2:1 10 20 30 3 4 2\n```\n\n### STL forward_list\n\nforward_list 是 C++ 11 新添加的一类容器，其底层实现和 list 容器一样，采用的也是链表结构，只不过 forward_list 使用的是单链表，而 list 使用的是双向链表. \n\n![单链表和双向链表](http://c.biancheng.net/uploads/allimg/191219/2-191219135239561.gif)\n\nforward_list 容器中是不提供 size() 函数的，但如果想要获取 forward_list 容器中存储元素的个数，可以使用头文件 \\<iterator\\> 中的 [distance()](http://c.biancheng.net/ref/tan.html) 函数。举个例子：\n\n```c++\nstd::forward_list<int> my_words{1,2,3,4};\nint count = std::distance(std::begin(my_words), std::end(my_words));\n```\n\n并且，forward_list 容器迭代器的移动除了使用 ++ 运算符单步移动，还能使用 advance() 函数.\n\n```c++\n// 结果: 3,4\nstd::forward_list<int> values{1,2,3,4};\nauto it = values.begin();\nadvance(it, 2);\nwhile (it!=values.end())\n{\n    cout << *it << \" \";\n    ++it;\n}\n```\n\n## 关联式容器\n\n关联式容器存储的是“键值对”形式的数据,  基于各个关联式容器存储数据的特点，只有各个键值对中的键和值全部对应相等时，才能使用 set 和 multiset 关联式容器存储，否则就要选用 map 或者 multimap 关联式容器。\n\n### STL pair\n\n考虑到“键值对”并不是普通类型数据，[C++](http://c.biancheng.net/cplus/) [STL](http://c.biancheng.net/stl/) 标准库提供了 pair 类模板，其专门用来将 2 个普通元素 first 和 second. pair 类模板定义在`<utility>`头文件中. \n\n下面程序演示了以上几种创建 pair 对象的方法:\n\n```c++\n// 调用构造函数 1，也就是默认构造函数\npair <string, double> pair1;\n// 调用第 2 种构造函数\npair <string, string> pair2(\"STL教程\",\"http://c.biancheng.net/stl/\");  \n// 调用拷贝构造函数\npair <string, string> pair3(pair2);\n//调用移动构造函数\npair <string, string> pair4(make_pair(\"C++教程\", \"http://c.biancheng.net/cplus/\"));\n// 调用第 5 种构造函数\npair <string, string> pair5(string(\"Python教程\"), string(\"http://c.biancheng.net/python/\"));\n```\n\n`<utility>`头文件中除了提供创建 pair 对象的方法之外，还为 pair 对象重载了 <、<=、>、>=、==、!= 这 6 的运算符，其运算规则是：对于进行比较的 2 个 pair 对象，先比较 pair.first 元素的大小，如果相等则继续比较 pair.second 元素的大小。(二维偏序)\n\n最后需要指出的是，pair类模板还提供有一个 swap() 成员函数，能够互换 2 个 pair 对象的键值对，其操作成功的前提是这 2 个 pair 对象的键和值的类型要相同.\n\n```c++\npair <string, int> pair1(\"pair\", 10);                   \npair <string, int> pair2(\"pair2\", 20);\n//交换 pair1 和 pair2 的键值对\npair1.swap(pair2);\n//pair1: pair2 20\n//pair2: pair 10\n```\n\n### STL map\n\nmap 容器存储的都是 pair 对象，也就是用 pair 类模板创建的键值对。与此同时，在使用 map 容器存储多个键值对时，该容器会自动根据各键值对的键的大小，按照既定的规则进行排序,  根据实际情况的需要，我们可以手动指定 map 容器的排序规则. `使用 map 容器存储的各个键值对，键的值既不能重复也不能被修改。`这意味着只要键值对被存储到 map 容器中，其键的值将不能再做任何修改。\n\n```c++\n//如下语句可以指定升序排列键值\nstd::map<std::string, int, std::greater<std::string> >myMap{ {\"C语言教程\",10},{\"STL教程\",20} };\n```\n\n| 成员函数         | 功能                                                         |\n| ---------------- | ------------------------------------------------------------ |\n| find(key)        | 在 map 容器中查找键为 key 的键值对，如果成功找到，则返回指向该键值对的双向迭代器；反之，则返回和 end() 方法一样的迭代器。另外，如果 map 容器用 const 限定，则该方法返回的是 const 类型的双向迭代器。 |\n| lower_bound(key) | 返回一个指向当前 map 容器中第一个大于或等于 key 的键值对的双向迭代器。如果 map 容器用 const 限定，则该方法返回的是 const 类型的双向迭代器。 |\n| upper_bound(key) | 返回一个指向当前 map 容器中第一个大于 key 的键值对的迭代器。如果 map 容器用 const 限定，则该方法返回的是 const 类型的双向迭代器。 |\n| equal_range(key) | 该方法返回一个 pair 对象（包含 2 个双向迭代器），其中 pair.first 和 lower_bound() 方法的返回值等价，pair.second 和 upper_bound() 方法的返回值等价。也就是说，该方法将返回一个范围，该范围中包含的键为 key 的键值对（map 容器键值对唯一，因此该范围最多包含一个键值对）。 |\n| emplace()        | 在当前 map 容器中的指定位置处构造新键值对。其效果和插入键值对一样，但效率更高。 |\n| emplace_hint()   | 在本质上和 emplace() 在 map 容器中构造新键值对的方式是一样的，不同之处在于，使用者必须为该方法提供一个指示键值对生成位置的迭代器，并作为该方法的第一个参数。 |\n| count(key)       | 在当前 map 容器中，查找键为 key 的键值对的个数并返回。注意，由于 map 容器中各键值对的键的值是唯一的，因此该函数的返回值最大为 1。 |\n\n![C++ STL map部分成员方法示意图](http://c.biancheng.net/uploads/allimg/191128/2-19112Q14QE40.gif)\n\n```c++\n//创建并初始化 map 容器\nstd::map<std::string, std::string>myMap{ {\"STL教程\",\"http://c.biancheng.net/stl/\"},\n                                         {\"C语言教程\",\"http://c.biancheng.net/c/\"},\n                                         {\"Java教程\",\"http://c.biancheng.net/java/\"} };\n//找到第一个键的值不小于 \"Java教程\" 的键值对\nauto iter = myMap.lower_bound(\"Java教程\");\n//lower：Java教程 http://c.biancheng.net/java/\ncout << \"lower：\" << iter->first << \" \" << iter->second << endl;\n\n//找到第一个键的值大于 \"Java教程\" 的键值对\niter = myMap.upper_bound(\"Java教程\");\n//upper：STL教程 http://c.biancheng.net/stl/\ncout <<\"upper：\" << iter->first << \" \" << iter->second << endl;\n```\n\n和 insert() 方法一样，虽然 emplace_hint() 方法指定了插入键值对的位置，但 map 容器为了保持存储键值对的有序状态，可能会移动其位置。\n\n```c++\n//创建并初始化 map 容器\nstd::map<string, string>mymap;\n//指定在 map 容器插入键值对\nmap<string, string>::iterator iter = mymap.emplace_hint(mymap.begin(),\"STL教程\", \"http://c.biancheng.net/stl/\");\ncout << iter->first << \" \" << iter->second << endl;\niter = mymap.emplace_hint(mymap.begin(), \"C语言教程\", \"http://c.biancheng.net/c/\");\ncout << iter->first << \" \" << iter->second << endl;\n//插入失败样例\niter = mymap.emplace_hint(mymap.begin(), \"STL教程\", \"http://c.biancheng.net/java/\");\ncout << iter->first << \" \" << iter->second << endl;\n```\n\n只有当 map 容器中确实存有包含该指定键的键值对，借助重载的 [ ] 运算符才能成功获取该键对应的值；反之，若当前 map 容器中没有包含该指定键的键值对，则此时使用 [ ] 运算符将不再是访问容器中的元素，而变成了向该 map 容器中增添一个键值对。\n\n### STL multimap\n\nmultimap 容器具有和 map 相同的特性，即 multimap 容器也用于存储 pair<const K, T> 类型的键值对（其中 K 表示键的类型，T 表示值的类型），其中各个键值对的键的值不能做修改；并且，该容器也会自行根据键的大小对存储的所有键值对做排序操作。`和 map 容器的区别在于，multimap 容器中可以同时存储多（≥2）个键相同的键值对。`和 map 容器一样，实现 multimap 容器的类模板也定义在`<map>`头文件，并位于 std 命名空间中。在某些特定场景中，我们还可以为 multimap 容器自定义排序规则. multimap的操作和成员函数基本与map完全一致. 但和 map 容器相比，`multimap 未提供 at() 成员方法，也没有重载 [] 运算符`。这意味着，map 容器中通过指定键获取指定指定键值对的方式，将不再适用于 multimap 容器。其实这很好理解，因为 multimap 容器中指定的键可能对应多个键值对，而不再是 1 个。另外，由于maltimap容器可存储多个具有相同键的键值对，因此lower_bound()、upper_bound()、equal_range()以及count()方法经常会用到。\n\n### STL set \n\n和 map、multimap 容器不同，使用 set 容器存储的各个键值对，要求键 key 和值 value 必须相等。基于 set 容器的这种特性，当使用 set 容器存储键值对时，只需要为其提供各键值对中的 value 值（也就是 key 的值）即可。set 容器也会自行根据键的大小对存储的键值对进行排序. `使用 set 容器存储的各个元素的值必须各不相同`。更重要的是，从语法上讲 set 容器并没有强制对存储元素的类型做 const 修饰，即 set 容器中存储的元素的值是可以修改的。但是，C++ 标准为了防止用户修改容器中元素的值，对所有可能会实现此操作的行为做了限制，`使得在正常情况下，用户是无法做到修改 set 容器中元素的值的。`\n\n`对于初学者来说，切勿尝试直接修改 set 容器中已存储元素的值，这很有可能破坏 set 容器中元素的有序性，最正确的修改 set 容器中元素值的做法是：先删除该元素，然后再添加一个修改后的元素。`\n\nset的成员函数和multimap基本一致, `set 容器类模板中未提供 at() 成员函数，也未对 [] 运算符进行重载。因此，要想访问 set 容器中存储的元素，只能借助 set 容器的迭代器。`\n\n`C++ STL 标准库为 set 容器配置的迭代器类型为双向迭代器。这意味着，假设 p 为此类型的迭代器，则其只能进行 ++p、p++、--p、p--、*p 操作，并且 2 个双向迭代器之间做比较，也只能使用 == 或者 != 运算符。`\n\n如果只想遍历 set 容器中指定区域内的部分数据，则可以借助 find()、lower_bound() 以及 upper_bound() 实现。通过调用它们，可以获取一个指向指定元素的迭代器。equal_range(val) 函数的返回值是一个 pair 类型数据，其包含 2 个迭代器，表示 set 容器中和指定参数 val 相等的元素所在的区域，但由于 set 容器中存储的元素各不相等，因此该函数返回的这 2 个迭代器所表示的范围中，最多只会包含 1 个元素。\n\n### STL multiset\n\n和 set 容器不同的是，`multiset 容器可以存储多个值相同的元素。`虽然 multiset 容器和 set 容器拥有的成员方法完全相同，但由于 multiset 容器允许存储多个值相同的元素，因此诸如 count()、find()、lower_bound()、upper_bound()、equal_range()等方法，更常用于 multiset 容器。\n\n```c++\nstd::multiset<int> mymultiset{1,2,2,2,3,4,5};\n//multiset size = 7\ncout << \"multiset size = \" << mymultiset.size() << endl;\n//multiset count(2) =3\ncout << \"multiset count(2) =\" << mymultiset.count(2) << endl;\n//向容器中添加元素 8\nmymultiset.insert(8);\n//删除容器中所有值为 2 的元素\nint num = mymultiset.erase(2);\n//删除了 3 个元素 2\ncout << \"删除了 \" << num << \" 个元素 2\" << endl;\n//输出容器中存储的所有元素 1 3 4 5 8\nfor (auto iter = mymultiset.begin(); iter != mymultiset.end(); ++iter) {\n    cout << *iter << \" \";\n}\n```\n\n### 关联式容器自定义排序\n\n模板库中常用的可供关联容器使用的排序规则为![在这里插入图片描述](https://img-blog.csdnimg.cn/20210422104233471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDQ4NDcxNQ==,size_16,color_FFFFFF,t_70#pic_center)\n\n同时也可以自定义:\n\n```c++\nclass cmp {\npublic:\n    //重载 () 运算符\n    bool operator ()(const string &a,const string &b) {\n        //按照字符串的长度，做升序排序(即存储的字符串从短到长)\n        return  (a.length() < b.length());\n    }\n};\nint main() {\n    //创建 set 容器，并使用自定义的 cmp 排序规则\n    std::set<string, cmp>myset{\"http://c.biancheng.net/stl/\",\n                               \"http://c.biancheng.net/python/\",\n                               \"http://c.biancheng.net/java/\"};\n    //输出容器中存储的元素\n    for (auto iter = myset.begin(); iter != myset.end(); ++iter) {\n            cout << *iter << endl;\n    }\n    return 0;\n}\n//结果：\n//http://c.biancheng.net/stl/\n//http://c.biancheng.net/java/\n//http://c.biancheng.net/python/\n\n```\n\n当关联式容器中存储的数据类型为自定义的结构体变量或者类对象时，通过对现有排序规则中所用的关系运算符进行重载，也能实现自定义排序规则的目的。注意，当关联式容器中存储的元素类型为结构体指针变量或者类的指针对象时，只能使用函数对象的方式自定义排序规则，此方法不再适用。\n\n## 无序关联式容器\n\n无序关联式容器，又称哈希容器。和关联式容器一样，此类容器存储的也是键值对元素；不同之处在于，关联式容器默认情况下会对存储的元素做升序排序，而无序关联式容器不会。`无序关联式容器擅长通过指定键查找对应的值，而遍历容器中存储元素的效率不如关联式容器。`\n\n**关联式容器的底层实现采用的树存储结构，更确切的说是红黑树结构；无序容器的底层实现采用的是哈希表的存储结构, 并且当数据存储位置发生冲突时，解决方法选用的是“链地址法”。**\n\n基于底层实现采用了不同的数据结构，因此和关联式容器相比，无序容器具有以下 2 个特点：\n\n1. 无序容器内部存储的键值对是无序的，各键值对的存储位置取决于该键值对中的键，\n2. 和关联式容器相比，无序容器擅长通过指定键查找对应的值（平均时间复杂度为 O(1)）；但对于使用迭代器遍历容器中存储的元素，无序容器的执行效率则不如关联式容器。\n\n| 无序容器           | 功能                                                         |\n| ------------------ | ------------------------------------------------------------ |\n| unordered_map      | 存储键值对 <key, value> 类型的元素，其中各个键值对键的值不允许重复，且该容器中存储的键值对是无序的。 |\n| unordered_multimap | 和 unordered_map 唯一的区别在于，该容器允许存储多个键相同的键值对。 |\n| unordered_set      | 不再以键值对的形式存储数据，而是直接存储数据元素本身（当然也可以理解为，该容器存储的全部都是键 key 和值 value 相等的键值对，正因为它们相等，因此只存储 value 即可）。另外，该容器存储的元素不能重复，且容器内部存储的元素也是无序的。 |\n| unordered_multiset | 和 unordered_set 唯一的区别在于，该容器允许存储值相同的元素。 |\n\n### unordered_map \n\nunordered_map 定义在`<unordered_map>`头文件\n\n| 成员方法           | 功能                                                         |\n| ------------------ | ------------------------------------------------------------ |\n| bucket_count()     | 返回当前容器底层存储键值对时，使用桶（一个线性链表代表一个桶）的数量。 |\n| max_bucket_count() | 返回当前系统中，unordered_map 容器底层最多可以使用多少桶。   |\n| bucket_size(n)     | 返回第 n 个桶中存储键值对的数量。                            |\n| bucket(key)        | 返回以 key 为键的键值对所在桶的编号。                        |\n| load_factor()      | 返回 unordered_map 容器中当前的负载因子。负载因子，指的是的当前容器中存储键值对的数量（size()）和使用桶数（bucket_count()）的比值，即 load_factor() = size() / bucket_count()。 |\n| max_load_factor()  | 返回或者设置当前 unordered_map 容器的负载因子。              |\n| rehash(n)          | 将当前容器底层使用桶的数量设置为 n。                         |\n| reserve()          | 将存储桶的数量（也就是 bucket_count() 方法的返回值）设置为至少容纳count个元（不超过最大负载因子）所需的数量，并重新整理容器。 |\n| hash_function()    | 返回当前容器使用的哈希函数对象。                             |\n\nunordered_map 容器类模板中，实现了对 [ ] 运算符的重载，使得我们可以像“利用下标访问普通数组中元素”那样，通过目标键值对的键获取到该键对应的值。如果当前容器中并没有存储以 [ ] 运算符内指定的元素作为键的键值对，则此时 [ ] 运算符的功能将转变为：向当前容器中添加以目标元素为键的键值对. \n\n### STL unordered_multimap\n\nunordered_multimap 容器可以存储多个键相等的键值对，而 unordered_map 容器不行。\n\n### STL unordered_set\n\nunordered_set 容器，可直译为“无序 set 容器”，即 unordered_set 容器和 set 容器很像，唯一的区别就在于 set 容器会自行对存储的数据进行排序，而 unordered_set 容器不会。实现 unordered_set 容器的模板类定义在<unordered_set>头文件\n\n**总的来说，unordered_set 容器具有以下几个特性：**\n\n1. **不再以键值对的形式存储数据，而是直接存储数据的值；**\n2. **容器内部存储的各个元素的值都互不相等，且不能被修改。**\n3. **不会对内部存储的数据进行排序**\n\n### STL unordered_multiset\n\n和 unordered_set 容器不同的是，unordered_multiset 容器可以同时存储多个值相同的元素，且这些元素会存储到哈希表中同一个桶（本质就是链表）上。\n\n## 容器适配器\n\nSTL 提供了 3 种容器适配器，分别为 stack 栈适配器、queue 队列适配器以及 priority_queue 优先权队列适配器。\n\n| 容器适配器     | 基础容器筛选条件                                             | 默认使用的基础容器 |\n| -------------- | ------------------------------------------------------------ | ------------------ |\n| stack          | 基础容器需包含以下成员函数：empty()size()back()push_back()pop_back()满足条件的基础容器有 vector、deque、list。 | deque              |\n| queue          | 基础容器需包含以下成员函数：empty()size()front()back()push_back()pop_front()满足条件的基础容器有 deque、list。 | deque              |\n| priority_queue | 基础容器需包含以下成员函数：empty()size()front()push_back()pop_back()满足条件的基础容器有vector、deque。 | vector             |\n\n### STL stack\n\nstack 栈适配器是一种单端开口的容器（如图 1 所示），实际上该容器模拟的就是栈存储结构，即无论是向里存数据还是从中取数据，都只能从这一个开口实现操作。\n\n![stack适配器示意图](http://c.biancheng.net/uploads/allimg/180913/2-1P913101Q4T2.jpg)\n\n\n\n| 成员函数                     | 功能                                                         |\n| ---------------------------- | ------------------------------------------------------------ |\n| empty()                      | 当 stack 栈中没有元素时，该成员函数返回 true；反之，返回 false。 |\n| size()                       | 返回 stack 栈中存储元素的个数。                              |\n| top()                        | 返回一个栈顶元素的引用，类型为 T&。如果栈为空，程序会报错。  |\n| push(const T& val)           | 先复制 val，再将 val 副本压入栈顶。这是通过调用底层容器的 push_back() 函数完成的。 |\n| push(T&& obj)                | 以移动元素的方式将其压入栈顶。这是通过调用底层容器的有右值引用参数的 push_back() 函数完成的。 |\n| pop()                        | 弹出栈顶元素。                                               |\n| emplace(arg...)              | arg... 可以是一个参数，也可以是多个参数，但它们都只用于构造一个对象，并在栈顶直接生成该对象，作为新的栈顶元素。 |\n| swap(stack<T> & other_stack) | 将两个 stack 适配器中的元素进行互换，需要注意的是，进行互换的 2 个 stack 适配器中存储的元素类型以及底层采用的基础容器类型，都必须相同。 |\n\n### STL queue\n\nqueue 容器适配器有 2 个开口，其中一个开口专门用来输入数据，另一个专门用来输出数据\n\n![queue容器适配器](http://c.biancheng.net/uploads/allimg/180913/2-1P913113140553.jpg)\n\n\n\n| 成员函数                    | 功能                                                         |\n| --------------------------- | ------------------------------------------------------------ |\n| empty()                     | 如果 queue 中没有元素的话，返回 true。                       |\n| size()                      | 返回 queue 中元素的个数。                                    |\n| front()                     | 返回 queue 中第一个元素的引用。如果 queue 是常量，就返回一个常引用；如果 queue 为空，返回值是未定义的。 |\n| back()                      | 返回 queue 中最后一个元素的引用。如果 queue 是常量，就返回一个常引用；如果 queue 为空，返回值是未定义的。 |\n| push(const T& obj)          | 在 queue 的尾部添加一个元素的副本。这是通过调用底层容器的成员函数 push_back() 来完成的。 |\n| emplace()                   | 在 queue 的尾部直接添加一个元素。                            |\n| push(T&& obj)               | 以移动的方式在 queue 的尾部添加元素。这是通过调用底层容器的具有右值引用参数的成员函数 push_back() 来完成的。 |\n| pop()                       | 删除 queue 中的第一个元素。                                  |\n| swap(queue<T> &other_queue) | 将两个 queue 容器适配器中的元素进行互换，需要注意的是，进行互换的 2 个 queue 容器适配器中存储的元素类型以及底层采用的基础容器类型，都必须相同。 |\n\n`和 stack 一样，queue 也没有迭代器，因此访问元素的唯一方式是遍历容器，通过不断移除访问过的元素，去访问下一个元素。`\n\n### STL priority_queue\n\npriority_queue 容器适配器模拟的也是队列这种存储结构，即使用此容器适配器存储元素只能“从一端进（称为队尾），从另一端出（称为队头）”，且每次只能访问 priority_queue 中位于队头的元素。但是，priority_queue 容器适配器中元素的存和取，遵循的并不是 “First in,First out”（先入先出）原则，而是“First in，Largest out”原则。直白的翻译，指的就是先进队列的元素并不一定先出队列，而是优先级最大的元素最先出队列。使用`std::less<T>`按照元素值从大到小进行排序，还可以使用`std::greater<T>`按照元素值从小到大排序，但更多情况下是使用自定义的排序规则。 priority_queue 容器适配器模板位于`<queue>`头文件中. \n\n| 成员函数                       | 功能                                                         |\n| ------------------------------ | ------------------------------------------------------------ |\n| empty()                        | 如果 priority_queue 为空的话，返回 true；反之，返回 false。  |\n| size()                         | 返回 priority_queue 中存储元素的个数。                       |\n| top()                          | 返回 priority_queue 中第一个元素的引用形式。                 |\n| push(const T& obj)             | 根据既定的排序规则，将元素 obj 的副本存储到 priority_queue 中适当的位置。 |\n| push(T&& obj)                  | 根据既定的排序规则，将元素 obj 移动存储到 priority_queue 中适当的位置。 |\n| emplace(Args&&... args)        | Args&&... args 表示构造一个存储类型的元素所需要的数据（对于类对象来说，可能需要多个数据构造出一个对象）。此函数的功能是根据既定的排序规则，在容器适配器适当的位置直接生成该新元素。 |\n| pop()                          | 移除 priority_queue 容器适配器中第一个元素。                 |\n| swap(priority_queue<T>& other) | 将两个 priority_queue 容器适配器中的元素进行互换，需要注意的是，进行互换的 2 个 priority_queue 容器适配器中存储的元素类型以及底层采用的基础容器类型，都必须相同。 |\n\n优先级队列默认**使用vector作为其底层存储数据**的容器，在vector上又使用了堆算法将vector中元素构造成堆的结构，因此priority_queue就是堆，所有需要用到堆的位置，都可以考虑使用priority_queue。\n","slug":"C-的STL容器","published":1,"updated":"2023-02-24T05:20:09.488Z","_id":"clehundf90000m0ue9wxs5bnn","comments":1,"layout":"post","photos":[],"link":"","content":"<h1>C++的STL容器</h1>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>本文参考自《C语言中文网》中的<a href=\"http://c.biancheng.net/stl/\">STL</a>部分，侵删。</p></blockquote>\n<p>C++的标准模板库(STL)的容器主要可以分为序列式容器, 关联式容器, 无序关联式容器.</p>\n<ol>\n<li>\n<p>序列式容器:  包括 array、vector、deque、list 和 forward_list 容器。</p>\n<p>所谓STL序列式容器，其共同的特点是不会对存储的元素进行排序，元素排列的顺序取决于存储它们的顺序。</p>\n</li>\n<li>\n<p>关联式容器: 包括map, multimap, set以及multiset这四种容器. 和序列式容器不同的是, 关联式容器在存储容器时, 还会为每个元素配备一个间, 整体以键值对的方式存储在容器中. 相比于前者, 关联式容器可以通过键值直接找到对应的元素, 而无需遍历整个容器. 另外, 关联式容器在存储元素, 默认会根据各元素键值的大小做升序排序.</p>\n</li>\n<li>\n<p>无序关联式容器: 包括unordered_map, unordered_multimap, unordered_set, unordered_multiset. 又称哈希容器. 和关联式容器一样, 此类容器存储的也是键值对元素, 关联式容器默认情况下会对存储的元素做升序排序, 而无序关联式容器不会. 和其他类容器相比, 无序关联容器擅长通过指定键查找对应的值, 而遍历容器中存储元素的效率不如关联式容器.</p>\n</li>\n<li>\n<p>容器适配器: 包括 stack、queue、priority_queue. 容器适配器是一个封装了序列容器的类模板，它在一般序列容器的基础上提供了一些不同的功能。之所以称作适配器类，是因为它可以通过适配容器现有的接口来提供不同的功能。</p>\n</li>\n</ol>\n<h2 id=\"序列式容器\">序列式容器</h2>\n<p>由于本文主要是自用, 因此在成员函数部分仅记录了一些自己不熟悉的函数, 如果需要更多的讲解, 可以详见<a href=\"http://c.biancheng.net/stl/\">C语言中文网</a></p>\n<h3 id=\"stl-array\">STL array</h3>\n<p>array 容器是 C++ 11 标准中新增的序列容器，简单地理解，它就是在 C++ 普通数组的基础上，添加了一些成员函数和全局函数。在使用上，它比普通数组更安全，且效率并没有因此变差。和其它容器不同，<code>array 容器的大小是固定的，无法动态的扩展或收缩</code>，这也就意味着，在使用该容器的过程无法借由增加或移除元素而改变其大小，<code>它只允许访问或者替换存储的元素</code>。</p>\n<p>array 容器以类模板的形式定义在 <array> 头文件，并位于命名空间 std 中,  array 容器有多种初始化方式，如下代码展示了如何创建具有 10 个 double 类型元素的 array 容器, <code>array 容器不会做默认初始化操作</code>。</array></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 使用这种方式创建的容器中，各个元素的值是不确定的\nstd::array&lt;double, 10&gt; values;\n&#x2F;&#x2F; 使用该语句，容器中所有的元素都会被初始化为 0.0。\nstd::array&lt;double, 10&gt; values &#123;&#125;;\n&#x2F;&#x2F; 只初始化了前 4 个元素，剩余的元素都会被初始化为 0.0\nstd::array&lt;double, 10&gt; values &#123;0.5,1.0,1.5,,2.0&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>array的操作:</p>\n<table>\n<thead>\n<tr>\n<th><strong>成员函数</strong></th>\n<th><strong>功能</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>front()</td>\n<td>返回容器中第一个元素的直接引用，该函数不适用于空的 array 容器。</td>\n</tr>\n<tr>\n<td>back()</td>\n<td>返回容器中最后一个元素的直接应用，该函数同样不适用于空的 array 容器。</td>\n</tr>\n<tr>\n<td>data()</td>\n<td>返回一个指向容器首个元素的指针。利用该指针，可实现复制容器中所有元素等类似功能。</td>\n</tr>\n<tr>\n<td>fill(val)</td>\n<td>将 val 这个值赋值给容器中的每个元素。</td>\n</tr>\n<tr>\n<td>array1.swap(array2)</td>\n<td>交换 array1 和 array2 容器中的所有元素，但前提是它们具有相同的长度和类型。</td>\n</tr>\n</tbody>\n</table>\n<p>另外，在 &lt;array&gt; 头文件中还重载了 get() 全局函数，该重载函数的功能是访问容器中指定的元素，并返回该元素的引用。</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n&#x2F;&#x2F;需要引入 array 头文件\n#include &lt;array&gt;\nusing namespace std;\nint main()\n&#123;\n    std::array&lt;int, 4&gt; values&#123;&#125;;\n    &#x2F;&#x2F;初始化 values 容器为 &#123;0,1,2,3&#125;\n    for (int i &#x3D; 0; i &lt; values.size(); i++) &#123;\n        values.at(i) &#x3D; i;\n    &#125;\n    &#x2F;&#x2F;使用 get() 重载函数输出指定位置元素\n    cout &lt;&lt; get&lt;3&gt;(values) &lt;&lt; endl;\n    &#x2F;&#x2F;如果容器不为空，则输出容器中所有的元素\n    if (!values.empty()) &#123;\n        for (auto val &#x3D; values.begin(); val &lt; values.end(); val++) &#123;\n            cout &lt;&lt; *val &lt;&lt; &quot; &quot;;\n        &#125;\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>array通过<code>容器名[]</code>的方式直接访问和使用容器中的元素, 但使用这样方式，由于没有做任何边界检查，所以即便使用越界的索引值去访问或存储元素，也不会被检测到。为了能够有效地避免越界访问的情况，可以使用 array 容器提供的 at() 成员函数, 当传给 at() 的索引是一个越界值时，程序会抛出 std::out_of_range 异常。</p>\n<h3 id=\"stl-vector\">STL vector</h3>\n<p>array 实现的是静态数组（容量固定的数组），而 vector 实现的是一个动态数组，即可以进行元素的插入和删除. vector 常被称为向量容器，因为该容器擅长在尾部插入或删除元素，在常量时间内就可以完成，时间复杂度为<code>O(1)</code>；而对于在容器头部或者中部插入或删除元素，则花费时间要长一些（移动元素需要耗费时间），时间复杂度为线性阶<code>O(n)</code>。</p>\n<p>vector的操作:</p>\n<table>\n<thead>\n<tr>\n<th>函数成员</th>\n<th>函数功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>max_size()</td>\n<td>返回元素个数的最大值。这通常是一个很大的值，一般是 232-1，所以我们很少会用到这个函数。</td>\n</tr>\n<tr>\n<td>resize()</td>\n<td>改变实际元素的个数。</td>\n</tr>\n<tr>\n<td>capacity()</td>\n<td>返回当前容量。</td>\n</tr>\n<tr>\n<td>reserve()</td>\n<td>增加容器的容量。</td>\n</tr>\n<tr>\n<td>shrink _to_fit()</td>\n<td>将内存减少到等于当前元素实际所使用的大小。</td>\n</tr>\n<tr>\n<td>assign()</td>\n<td>用新元素替换原有内容。</td>\n</tr>\n<tr>\n<td>swap()</td>\n<td>交换两个容器的所有元素。</td>\n</tr>\n<tr>\n<td>emplace()</td>\n<td>在指定的位置直接生成一个元素。</td>\n</tr>\n<tr>\n<td>emplace_back()</td>\n<td>在序列尾部生成一个元素。</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">std::vector&lt;int&gt; demo&#123;1,2&#125;;\n   &#x2F;&#x2F;第一种格式用法\n   demo.insert(demo.begin() + 1, 3);&#x2F;&#x2F;&#123;1,3,2&#125;\n   &#x2F;&#x2F;第二种格式用法\n   demo.insert(demo.end(), 2, 5);&#x2F;&#x2F;&#123;1,3,2,5,5&#125;\n   &#x2F;&#x2F;第三种格式用法\n   std::array&lt;int,3&gt;test&#123; 7,8,9 &#125;;\n   demo.insert(demo.end(), test.begin(), test.end());&#x2F;&#x2F;&#123;1,3,2,5,5,7,8,9&#125;\n   &#x2F;&#x2F;第四种格式用法\n   demo.insert(demo.end(), &#123; 10,11 &#125;);&#x2F;&#x2F;&#123;1,3,2,5,5,7,8,9,10,11&#125;\n&#x2F;&#x2F;emplace() 每次只能插入一个 int 类型元素, emplace效率高于insert\n   demo1.emplace(demo1.begin(), 3);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"stl-deque\">STL deque</h3>\n<p>deque 是 double-ended queue 的缩写，又称双端队列容器。和 vector 不同的是，deque 还擅长在序列头部添加或删除元素，所耗费的时间复杂度也为常数阶<code>O(1)</code>. 并且更重要的一点是，<code>deque 容器中存储元素并不能保证所有元素都存储到连续的内存空间中。当需要向序列两端频繁的添加或删除元素时，应首选 deque 容器。</code></p>\n<p>成员函数内容和Vector基本一致.</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;初始化一个空deque容量\ndeque&lt;int&gt;d;\n&#x2F;&#x2F;向d容器中的尾部依次添加 1，2,3\nd.push_back(1); &#x2F;&#x2F;&#123;1&#125;\nd.push_back(2); &#x2F;&#x2F;&#123;1,2&#125;\nd.push_back(3); &#x2F;&#x2F;&#123;1,2,3&#125;\n&#x2F;&#x2F;向d容器的头部添加 0 \nd.push_front(0); &#x2F;&#x2F;&#123;0,1,2,3&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>和 array、vector 容器一样，可以采用普通数组访问存储元素的方式，访问 deque 容器中的元素.  如果想有效地避免越界访问，可以使用 deque 模板类提供的 at() 成员函数, 如果想有效地避免越界访问，可以使用 deque 模板类提供的 at() 成员函数.</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">d.front() &#x3D; 10;\nd.back() &#x3D; 20;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"stl-list\">STL list</h3>\n<p>又称<code>双向链表容器</code>，即该容器的底层是以双向链表的形式实现的。这意味着，list 容器中的元素可以分散存储在内存空间里，而不是必须存储在一整块连续的内存空间中。每个元素都配备了 2 个指针，分别指向它的前一个元素和后一个元素。其中第一个元素的前向指针总为 null，因为它前面没有元素；同样，尾部元素的后向指针也总为 null。</p>\n<p><img src=\"http://c.biancheng.net/uploads/allimg/180912/2-1P912134314345.jpg\" alt=\"img\"></p>\n<table>\n<thead>\n<tr>\n<th>成员函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>emplace_front()</td>\n<td>在容器头部生成一个元素。该函数和 push_front() 的功能相同，但效率更高。</td>\n</tr>\n<tr>\n<td>push_front()</td>\n<td>在容器头部插入一个元素。</td>\n</tr>\n<tr>\n<td>pop_front()</td>\n<td>删除容器头部的一个元素。</td>\n</tr>\n<tr>\n<td>emplace_back()</td>\n<td>在容器尾部直接生成一个元素。该函数和 push_back() 的功能相同，但效率更高。</td>\n</tr>\n<tr>\n<td>push_back()</td>\n<td>在容器尾部插入一个元素。</td>\n</tr>\n<tr>\n<td>pop_back()</td>\n<td>删除容器尾部的一个元素。</td>\n</tr>\n<tr>\n<td>emplace()</td>\n<td>在容器中的指定位置插入元素。该函数和 insert() 功能相同，但效率更高。</td>\n</tr>\n<tr>\n<td>erase()</td>\n<td>删除容器中一个或某区域内的元素。</td>\n</tr>\n<tr>\n<td>swap()</td>\n<td>交换两个容器中的元素，必须保证这两个容器中存储的元素类型是相同的。</td>\n</tr>\n<tr>\n<td>splice()</td>\n<td>将一个 list 容器中的元素插入到另一个容器的指定位置。</td>\n</tr>\n<tr>\n<td>remove(val)</td>\n<td>删除容器中所有等于 val 的元素。</td>\n</tr>\n<tr>\n<td>remove_if()</td>\n<td>删除容器中满足条件的元素。</td>\n</tr>\n<tr>\n<td>unique()</td>\n<td>删除容器中相邻的重复元素，只保留一个。</td>\n</tr>\n<tr>\n<td>merge()</td>\n<td>合并两个事先已排好序的 list 容器，并且合并之后的 list 容器依然是有序的。</td>\n</tr>\n<tr>\n<td>sort()</td>\n<td>通过更改容器中元素的位置，将它们进行排序。</td>\n</tr>\n<tr>\n<td>reverse()</td>\n<td>反转容器中元素的顺序。</td>\n</tr>\n</tbody>\n</table>\n<p>和 insert() 成员方法相比，splice() 成员方法的作用对象是其它 list 容器，其功能是将其它 list 容器中的元素添加到当前 list 容器中指定位置处。</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 第一个参数是目标位置, 后面的参数是被移动对象\n&#x2F;&#x2F;创建并初始化 2 个 list 容器\nlist&lt;int&gt; mylist1&#123; 1,2,3,4 &#125;, mylist2&#123;10,20,30&#125;;\nlist&lt;int&gt;::iterator it &#x3D; ++mylist1.begin(); &#x2F;&#x2F;指向 mylist1 容器中的元素 2\n   \n&#x2F;&#x2F;调用第一种语法格式\nmylist1.splice(it, mylist2); &#x2F;&#x2F; mylist1: 1 10 20 30 2 3 4\n                             &#x2F;&#x2F; mylist2:\n                             &#x2F;&#x2F; it 迭代器仍然指向元素 2，只不过容器变为了 mylist1\n&#x2F;&#x2F;调用第二种语法格式，将 it 指向的元素 2 移动到 mylist2.begin() 位置处\nmylist2.splice(mylist2.begin(), mylist1, it);   &#x2F;&#x2F; mylist1: 1 10 20 30 3 4\n                                                &#x2F;&#x2F; mylist2: 2\n                                                &#x2F;&#x2F; it 仍然指向元素 2\n\n&#x2F;&#x2F;调用第三种语法格式，将 [mylist1.begin(),mylist1.end())范围内的元素移动到 mylist.begin() 位置处                  \nmylist2.splice(mylist2.begin(), mylist1, mylist1.begin(), mylist1.end());&#x2F;&#x2F;mylist1:\n                                                                         &#x2F;&#x2F;mylist2:1 10 20 30 3 4 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"stl-forward-list\">STL forward_list</h3>\n<p>forward_list 是 C++ 11 新添加的一类容器，其底层实现和 list 容器一样，采用的也是链表结构，只不过 forward_list 使用的是单链表，而 list 使用的是双向链表.</p>\n<p><img src=\"http://c.biancheng.net/uploads/allimg/191219/2-191219135239561.gif\" alt=\"单链表和双向链表\"></p>\n<p>forward_list 容器中是不提供 size() 函数的，但如果想要获取 forward_list 容器中存储元素的个数，可以使用头文件 &lt;iterator&gt; 中的 <a href=\"http://c.biancheng.net/ref/tan.html\">distance()</a> 函数。举个例子：</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">std::forward_list&lt;int&gt; my_words&#123;1,2,3,4&#125;;\nint count &#x3D; std::distance(std::begin(my_words), std::end(my_words));<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>并且，forward_list 容器迭代器的移动除了使用 ++ 运算符单步移动，还能使用 advance() 函数.</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 结果: 3,4\nstd::forward_list&lt;int&gt; values&#123;1,2,3,4&#125;;\nauto it &#x3D; values.begin();\nadvance(it, 2);\nwhile (it!&#x3D;values.end())\n&#123;\n    cout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n    ++it;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"关联式容器\">关联式容器</h2>\n<p>关联式容器存储的是“键值对”形式的数据,  基于各个关联式容器存储数据的特点，只有各个键值对中的键和值全部对应相等时，才能使用 set 和 multiset 关联式容器存储，否则就要选用 map 或者 multimap 关联式容器。</p>\n<h3 id=\"stl-pair\">STL pair</h3>\n<p>考虑到“键值对”并不是普通类型数据，<a href=\"http://c.biancheng.net/cplus/\">C++</a> <a href=\"http://c.biancheng.net/stl/\">STL</a> 标准库提供了 pair 类模板，其专门用来将 2 个普通元素 first 和 second. pair 类模板定义在<code>&lt;utility&gt;</code>头文件中.</p>\n<p>下面程序演示了以上几种创建 pair 对象的方法:</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 调用构造函数 1，也就是默认构造函数\npair &lt;string, double&gt; pair1;\n&#x2F;&#x2F; 调用第 2 种构造函数\npair &lt;string, string&gt; pair2(&quot;STL教程&quot;,&quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;stl&#x2F;&quot;);  \n&#x2F;&#x2F; 调用拷贝构造函数\npair &lt;string, string&gt; pair3(pair2);\n&#x2F;&#x2F;调用移动构造函数\npair &lt;string, string&gt; pair4(make_pair(&quot;C++教程&quot;, &quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;cplus&#x2F;&quot;));\n&#x2F;&#x2F; 调用第 5 种构造函数\npair &lt;string, string&gt; pair5(string(&quot;Python教程&quot;), string(&quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;python&#x2F;&quot;));<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>&lt;utility&gt;</code>头文件中除了提供创建 pair 对象的方法之外，还为 pair 对象重载了 &lt;、&lt;=、&gt;、&gt;=、==、!= 这 6 的运算符，其运算规则是：对于进行比较的 2 个 pair 对象，先比较 pair.first 元素的大小，如果相等则继续比较 pair.second 元素的大小。(二维偏序)</p>\n<p>最后需要指出的是，pair类模板还提供有一个 swap() 成员函数，能够互换 2 个 pair 对象的键值对，其操作成功的前提是这 2 个 pair 对象的键和值的类型要相同.</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">pair &lt;string, int&gt; pair1(&quot;pair&quot;, 10);                   \npair &lt;string, int&gt; pair2(&quot;pair2&quot;, 20);\n&#x2F;&#x2F;交换 pair1 和 pair2 的键值对\npair1.swap(pair2);\n&#x2F;&#x2F;pair1: pair2 20\n&#x2F;&#x2F;pair2: pair 10<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"stl-map\">STL map</h3>\n<p>map 容器存储的都是 pair 对象，也就是用 pair 类模板创建的键值对。与此同时，在使用 map 容器存储多个键值对时，该容器会自动根据各键值对的键的大小，按照既定的规则进行排序,  根据实际情况的需要，我们可以手动指定 map 容器的排序规则. <code>使用 map 容器存储的各个键值对，键的值既不能重复也不能被修改。</code>这意味着只要键值对被存储到 map 容器中，其键的值将不能再做任何修改。</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;如下语句可以指定升序排列键值\nstd::map&lt;std::string, int, std::greater&lt;std::string&gt; &gt;myMap&#123; &#123;&quot;C语言教程&quot;,10&#125;,&#123;&quot;STL教程&quot;,20&#125; &#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<table>\n<thead>\n<tr>\n<th>成员函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>find(key)</td>\n<td>在 map 容器中查找键为 key 的键值对，如果成功找到，则返回指向该键值对的双向迭代器；反之，则返回和 end() 方法一样的迭代器。另外，如果 map 容器用 const 限定，则该方法返回的是 const 类型的双向迭代器。</td>\n</tr>\n<tr>\n<td>lower_bound(key)</td>\n<td>返回一个指向当前 map 容器中第一个大于或等于 key 的键值对的双向迭代器。如果 map 容器用 const 限定，则该方法返回的是 const 类型的双向迭代器。</td>\n</tr>\n<tr>\n<td>upper_bound(key)</td>\n<td>返回一个指向当前 map 容器中第一个大于 key 的键值对的迭代器。如果 map 容器用 const 限定，则该方法返回的是 const 类型的双向迭代器。</td>\n</tr>\n<tr>\n<td>equal_range(key)</td>\n<td>该方法返回一个 pair 对象（包含 2 个双向迭代器），其中 pair.first 和 lower_bound() 方法的返回值等价，pair.second 和 upper_bound() 方法的返回值等价。也就是说，该方法将返回一个范围，该范围中包含的键为 key 的键值对（map 容器键值对唯一，因此该范围最多包含一个键值对）。</td>\n</tr>\n<tr>\n<td>emplace()</td>\n<td>在当前 map 容器中的指定位置处构造新键值对。其效果和插入键值对一样，但效率更高。</td>\n</tr>\n<tr>\n<td>emplace_hint()</td>\n<td>在本质上和 emplace() 在 map 容器中构造新键值对的方式是一样的，不同之处在于，使用者必须为该方法提供一个指示键值对生成位置的迭代器，并作为该方法的第一个参数。</td>\n</tr>\n<tr>\n<td>count(key)</td>\n<td>在当前 map 容器中，查找键为 key 的键值对的个数并返回。注意，由于 map 容器中各键值对的键的值是唯一的，因此该函数的返回值最大为 1。</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"http://c.biancheng.net/uploads/allimg/191128/2-19112Q14QE40.gif\" alt=\"C++ STL map部分成员方法示意图\"></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;创建并初始化 map 容器\nstd::map&lt;std::string, std::string&gt;myMap&#123; &#123;&quot;STL教程&quot;,&quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;stl&#x2F;&quot;&#125;,\n                                         &#123;&quot;C语言教程&quot;,&quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;c&#x2F;&quot;&#125;,\n                                         &#123;&quot;Java教程&quot;,&quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;java&#x2F;&quot;&#125; &#125;;\n&#x2F;&#x2F;找到第一个键的值不小于 &quot;Java教程&quot; 的键值对\nauto iter &#x3D; myMap.lower_bound(&quot;Java教程&quot;);\n&#x2F;&#x2F;lower：Java教程 http:&#x2F;&#x2F;c.biancheng.net&#x2F;java&#x2F;\ncout &lt;&lt; &quot;lower：&quot; &lt;&lt; iter-&gt;first &lt;&lt; &quot; &quot; &lt;&lt; iter-&gt;second &lt;&lt; endl;\n\n&#x2F;&#x2F;找到第一个键的值大于 &quot;Java教程&quot; 的键值对\niter &#x3D; myMap.upper_bound(&quot;Java教程&quot;);\n&#x2F;&#x2F;upper：STL教程 http:&#x2F;&#x2F;c.biancheng.net&#x2F;stl&#x2F;\ncout &lt;&lt;&quot;upper：&quot; &lt;&lt; iter-&gt;first &lt;&lt; &quot; &quot; &lt;&lt; iter-&gt;second &lt;&lt; endl;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>和 insert() 方法一样，虽然 emplace_hint() 方法指定了插入键值对的位置，但 map 容器为了保持存储键值对的有序状态，可能会移动其位置。</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;创建并初始化 map 容器\nstd::map&lt;string, string&gt;mymap;\n&#x2F;&#x2F;指定在 map 容器插入键值对\nmap&lt;string, string&gt;::iterator iter &#x3D; mymap.emplace_hint(mymap.begin(),&quot;STL教程&quot;, &quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;stl&#x2F;&quot;);\ncout &lt;&lt; iter-&gt;first &lt;&lt; &quot; &quot; &lt;&lt; iter-&gt;second &lt;&lt; endl;\niter &#x3D; mymap.emplace_hint(mymap.begin(), &quot;C语言教程&quot;, &quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;c&#x2F;&quot;);\ncout &lt;&lt; iter-&gt;first &lt;&lt; &quot; &quot; &lt;&lt; iter-&gt;second &lt;&lt; endl;\n&#x2F;&#x2F;插入失败样例\niter &#x3D; mymap.emplace_hint(mymap.begin(), &quot;STL教程&quot;, &quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;java&#x2F;&quot;);\ncout &lt;&lt; iter-&gt;first &lt;&lt; &quot; &quot; &lt;&lt; iter-&gt;second &lt;&lt; endl;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>只有当 map 容器中确实存有包含该指定键的键值对，借助重载的 [ ] 运算符才能成功获取该键对应的值；反之，若当前 map 容器中没有包含该指定键的键值对，则此时使用 [ ] 运算符将不再是访问容器中的元素，而变成了向该 map 容器中增添一个键值对。</p>\n<h3 id=\"stl-multimap\">STL multimap</h3>\n<p>multimap 容器具有和 map 相同的特性，即 multimap 容器也用于存储 pair&lt;const K, T&gt; 类型的键值对（其中 K 表示键的类型，T 表示值的类型），其中各个键值对的键的值不能做修改；并且，该容器也会自行根据键的大小对存储的所有键值对做排序操作。<code>和 map 容器的区别在于，multimap 容器中可以同时存储多（≥2）个键相同的键值对。</code>和 map 容器一样，实现 multimap 容器的类模板也定义在<code>&lt;map&gt;</code>头文件，并位于 std 命名空间中。在某些特定场景中，我们还可以为 multimap 容器自定义排序规则. multimap的操作和成员函数基本与map完全一致. 但和 map 容器相比，<code>multimap 未提供 at() 成员方法，也没有重载 [] 运算符</code>。这意味着，map 容器中通过指定键获取指定指定键值对的方式，将不再适用于 multimap 容器。其实这很好理解，因为 multimap 容器中指定的键可能对应多个键值对，而不再是 1 个。另外，由于maltimap容器可存储多个具有相同键的键值对，因此lower_bound()、upper_bound()、equal_range()以及count()方法经常会用到。</p>\n<h3 id=\"stl-set\">STL set</h3>\n<p>和 map、multimap 容器不同，使用 set 容器存储的各个键值对，要求键 key 和值 value 必须相等。基于 set 容器的这种特性，当使用 set 容器存储键值对时，只需要为其提供各键值对中的 value 值（也就是 key 的值）即可。set 容器也会自行根据键的大小对存储的键值对进行排序. <code>使用 set 容器存储的各个元素的值必须各不相同</code>。更重要的是，从语法上讲 set 容器并没有强制对存储元素的类型做 const 修饰，即 set 容器中存储的元素的值是可以修改的。但是，C++ 标准为了防止用户修改容器中元素的值，对所有可能会实现此操作的行为做了限制，<code>使得在正常情况下，用户是无法做到修改 set 容器中元素的值的。</code></p>\n<p><code>对于初学者来说，切勿尝试直接修改 set 容器中已存储元素的值，这很有可能破坏 set 容器中元素的有序性，最正确的修改 set 容器中元素值的做法是：先删除该元素，然后再添加一个修改后的元素。</code></p>\n<p>set的成员函数和multimap基本一致, <code>set 容器类模板中未提供 at() 成员函数，也未对 [] 运算符进行重载。因此，要想访问 set 容器中存储的元素，只能借助 set 容器的迭代器。</code></p>\n<p><code>C++ STL 标准库为 set 容器配置的迭代器类型为双向迭代器。这意味着，假设 p 为此类型的迭代器，则其只能进行 ++p、p++、--p、p--、*p 操作，并且 2 个双向迭代器之间做比较，也只能使用 == 或者 != 运算符。</code></p>\n<p>如果只想遍历 set 容器中指定区域内的部分数据，则可以借助 find()、lower_bound() 以及 upper_bound() 实现。通过调用它们，可以获取一个指向指定元素的迭代器。equal_range(val) 函数的返回值是一个 pair 类型数据，其包含 2 个迭代器，表示 set 容器中和指定参数 val 相等的元素所在的区域，但由于 set 容器中存储的元素各不相等，因此该函数返回的这 2 个迭代器所表示的范围中，最多只会包含 1 个元素。</p>\n<h3 id=\"stl-multiset\">STL multiset</h3>\n<p>和 set 容器不同的是，<code>multiset 容器可以存储多个值相同的元素。</code>虽然 multiset 容器和 set 容器拥有的成员方法完全相同，但由于 multiset 容器允许存储多个值相同的元素，因此诸如 count()、find()、lower_bound()、upper_bound()、equal_range()等方法，更常用于 multiset 容器。</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">std::multiset&lt;int&gt; mymultiset&#123;1,2,2,2,3,4,5&#125;;\n&#x2F;&#x2F;multiset size &#x3D; 7\ncout &lt;&lt; &quot;multiset size &#x3D; &quot; &lt;&lt; mymultiset.size() &lt;&lt; endl;\n&#x2F;&#x2F;multiset count(2) &#x3D;3\ncout &lt;&lt; &quot;multiset count(2) &#x3D;&quot; &lt;&lt; mymultiset.count(2) &lt;&lt; endl;\n&#x2F;&#x2F;向容器中添加元素 8\nmymultiset.insert(8);\n&#x2F;&#x2F;删除容器中所有值为 2 的元素\nint num &#x3D; mymultiset.erase(2);\n&#x2F;&#x2F;删除了 3 个元素 2\ncout &lt;&lt; &quot;删除了 &quot; &lt;&lt; num &lt;&lt; &quot; 个元素 2&quot; &lt;&lt; endl;\n&#x2F;&#x2F;输出容器中存储的所有元素 1 3 4 5 8\nfor (auto iter &#x3D; mymultiset.begin(); iter !&#x3D; mymultiset.end(); ++iter) &#123;\n    cout &lt;&lt; *iter &lt;&lt; &quot; &quot;;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"关联式容器自定义排序\">关联式容器自定义排序</h3>\n<p>模板库中常用的可供关联容器使用的排序规则为<img src=\"https://img-blog.csdnimg.cn/20210422104233471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDQ4NDcxNQ==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>同时也可以自定义:</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class cmp &#123;\npublic:\n    &#x2F;&#x2F;重载 () 运算符\n    bool operator ()(const string &amp;a,const string &amp;b) &#123;\n        &#x2F;&#x2F;按照字符串的长度，做升序排序(即存储的字符串从短到长)\n        return  (a.length() &lt; b.length());\n    &#125;\n&#125;;\nint main() &#123;\n    &#x2F;&#x2F;创建 set 容器，并使用自定义的 cmp 排序规则\n    std::set&lt;string, cmp&gt;myset&#123;&quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;stl&#x2F;&quot;,\n                               &quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;python&#x2F;&quot;,\n                               &quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;java&#x2F;&quot;&#125;;\n    &#x2F;&#x2F;输出容器中存储的元素\n    for (auto iter &#x3D; myset.begin(); iter !&#x3D; myset.end(); ++iter) &#123;\n            cout &lt;&lt; *iter &lt;&lt; endl;\n    &#125;\n    return 0;\n&#125;\n&#x2F;&#x2F;结果：\n&#x2F;&#x2F;http:&#x2F;&#x2F;c.biancheng.net&#x2F;stl&#x2F;\n&#x2F;&#x2F;http:&#x2F;&#x2F;c.biancheng.net&#x2F;java&#x2F;\n&#x2F;&#x2F;http:&#x2F;&#x2F;c.biancheng.net&#x2F;python&#x2F;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>当关联式容器中存储的数据类型为自定义的结构体变量或者类对象时，通过对现有排序规则中所用的关系运算符进行重载，也能实现自定义排序规则的目的。注意，当关联式容器中存储的元素类型为结构体指针变量或者类的指针对象时，只能使用函数对象的方式自定义排序规则，此方法不再适用。</p>\n<h2 id=\"无序关联式容器\">无序关联式容器</h2>\n<p>无序关联式容器，又称哈希容器。和关联式容器一样，此类容器存储的也是键值对元素；不同之处在于，关联式容器默认情况下会对存储的元素做升序排序，而无序关联式容器不会。<code>无序关联式容器擅长通过指定键查找对应的值，而遍历容器中存储元素的效率不如关联式容器。</code></p>\n<p><strong>关联式容器的底层实现采用的树存储结构，更确切的说是红黑树结构；无序容器的底层实现采用的是哈希表的存储结构, 并且当数据存储位置发生冲突时，解决方法选用的是“链地址法”。</strong></p>\n<p>基于底层实现采用了不同的数据结构，因此和关联式容器相比，无序容器具有以下 2 个特点：</p>\n<ol>\n<li>无序容器内部存储的键值对是无序的，各键值对的存储位置取决于该键值对中的键，</li>\n<li>和关联式容器相比，无序容器擅长通过指定键查找对应的值（平均时间复杂度为 O(1)）；但对于使用迭代器遍历容器中存储的元素，无序容器的执行效率则不如关联式容器。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>无序容器</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>unordered_map</td>\n<td>存储键值对 &lt;key, value&gt; 类型的元素，其中各个键值对键的值不允许重复，且该容器中存储的键值对是无序的。</td>\n</tr>\n<tr>\n<td>unordered_multimap</td>\n<td>和 unordered_map 唯一的区别在于，该容器允许存储多个键相同的键值对。</td>\n</tr>\n<tr>\n<td>unordered_set</td>\n<td>不再以键值对的形式存储数据，而是直接存储数据元素本身（当然也可以理解为，该容器存储的全部都是键 key 和值 value 相等的键值对，正因为它们相等，因此只存储 value 即可）。另外，该容器存储的元素不能重复，且容器内部存储的元素也是无序的。</td>\n</tr>\n<tr>\n<td>unordered_multiset</td>\n<td>和 unordered_set 唯一的区别在于，该容器允许存储值相同的元素。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"unordered-map\">unordered_map</h3>\n<p>unordered_map 定义在<code>&lt;unordered_map&gt;</code>头文件</p>\n<table>\n<thead>\n<tr>\n<th>成员方法</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bucket_count()</td>\n<td>返回当前容器底层存储键值对时，使用桶（一个线性链表代表一个桶）的数量。</td>\n</tr>\n<tr>\n<td>max_bucket_count()</td>\n<td>返回当前系统中，unordered_map 容器底层最多可以使用多少桶。</td>\n</tr>\n<tr>\n<td>bucket_size(n)</td>\n<td>返回第 n 个桶中存储键值对的数量。</td>\n</tr>\n<tr>\n<td>bucket(key)</td>\n<td>返回以 key 为键的键值对所在桶的编号。</td>\n</tr>\n<tr>\n<td>load_factor()</td>\n<td>返回 unordered_map 容器中当前的负载因子。负载因子，指的是的当前容器中存储键值对的数量（size()）和使用桶数（bucket_count()）的比值，即 load_factor() = size() / bucket_count()。</td>\n</tr>\n<tr>\n<td>max_load_factor()</td>\n<td>返回或者设置当前 unordered_map 容器的负载因子。</td>\n</tr>\n<tr>\n<td>rehash(n)</td>\n<td>将当前容器底层使用桶的数量设置为 n。</td>\n</tr>\n<tr>\n<td>reserve()</td>\n<td>将存储桶的数量（也就是 bucket_count() 方法的返回值）设置为至少容纳count个元（不超过最大负载因子）所需的数量，并重新整理容器。</td>\n</tr>\n<tr>\n<td>hash_function()</td>\n<td>返回当前容器使用的哈希函数对象。</td>\n</tr>\n</tbody>\n</table>\n<p>unordered_map 容器类模板中，实现了对 [ ] 运算符的重载，使得我们可以像“利用下标访问普通数组中元素”那样，通过目标键值对的键获取到该键对应的值。如果当前容器中并没有存储以 [ ] 运算符内指定的元素作为键的键值对，则此时 [ ] 运算符的功能将转变为：向当前容器中添加以目标元素为键的键值对.</p>\n<h3 id=\"stl-unordered-multimap\">STL unordered_multimap</h3>\n<p>unordered_multimap 容器可以存储多个键相等的键值对，而 unordered_map 容器不行。</p>\n<h3 id=\"stl-unordered-set\">STL unordered_set</h3>\n<p>unordered_set 容器，可直译为“无序 set 容器”，即 unordered_set 容器和 set 容器很像，唯一的区别就在于 set 容器会自行对存储的数据进行排序，而 unordered_set 容器不会。实现 unordered_set 容器的模板类定义在&lt;unordered_set&gt;头文件</p>\n<p><strong>总的来说，unordered_set 容器具有以下几个特性：</strong></p>\n<ol>\n<li><strong>不再以键值对的形式存储数据，而是直接存储数据的值；</strong></li>\n<li><strong>容器内部存储的各个元素的值都互不相等，且不能被修改。</strong></li>\n<li><strong>不会对内部存储的数据进行排序</strong></li>\n</ol>\n<h3 id=\"stl-unordered-multiset\">STL unordered_multiset</h3>\n<p>和 unordered_set 容器不同的是，unordered_multiset 容器可以同时存储多个值相同的元素，且这些元素会存储到哈希表中同一个桶（本质就是链表）上。</p>\n<h2 id=\"容器适配器\">容器适配器</h2>\n<p>STL 提供了 3 种容器适配器，分别为 stack 栈适配器、queue 队列适配器以及 priority_queue 优先权队列适配器。</p>\n<table>\n<thead>\n<tr>\n<th>容器适配器</th>\n<th>基础容器筛选条件</th>\n<th>默认使用的基础容器</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>stack</td>\n<td>基础容器需包含以下成员函数：empty()size()back()push_back()pop_back()满足条件的基础容器有 vector、deque、list。</td>\n<td>deque</td>\n</tr>\n<tr>\n<td>queue</td>\n<td>基础容器需包含以下成员函数：empty()size()front()back()push_back()pop_front()满足条件的基础容器有 deque、list。</td>\n<td>deque</td>\n</tr>\n<tr>\n<td>priority_queue</td>\n<td>基础容器需包含以下成员函数：empty()size()front()push_back()pop_back()满足条件的基础容器有vector、deque。</td>\n<td>vector</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"stl-stack\">STL stack</h3>\n<p>stack 栈适配器是一种单端开口的容器（如图 1 所示），实际上该容器模拟的就是栈存储结构，即无论是向里存数据还是从中取数据，都只能从这一个开口实现操作。</p>\n<p><img src=\"http://c.biancheng.net/uploads/allimg/180913/2-1P913101Q4T2.jpg\" alt=\"stack适配器示意图\"></p>\n<table>\n<thead>\n<tr>\n<th>成员函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>empty()</td>\n<td>当 stack 栈中没有元素时，该成员函数返回 true；反之，返回 false。</td>\n</tr>\n<tr>\n<td>size()</td>\n<td>返回 stack 栈中存储元素的个数。</td>\n</tr>\n<tr>\n<td>top()</td>\n<td>返回一个栈顶元素的引用，类型为 T&amp;。如果栈为空，程序会报错。</td>\n</tr>\n<tr>\n<td>push(const T&amp; val)</td>\n<td>先复制 val，再将 val 副本压入栈顶。这是通过调用底层容器的 push_back() 函数完成的。</td>\n</tr>\n<tr>\n<td>push(T&amp;&amp; obj)</td>\n<td>以移动元素的方式将其压入栈顶。这是通过调用底层容器的有右值引用参数的 push_back() 函数完成的。</td>\n</tr>\n<tr>\n<td>pop()</td>\n<td>弹出栈顶元素。</td>\n</tr>\n<tr>\n<td>emplace(arg…)</td>\n<td>arg… 可以是一个参数，也可以是多个参数，但它们都只用于构造一个对象，并在栈顶直接生成该对象，作为新的栈顶元素。</td>\n</tr>\n<tr>\n<td>swap(stack<T> &amp; other_stack)</T></td>\n<td>将两个 stack 适配器中的元素进行互换，需要注意的是，进行互换的 2 个 stack 适配器中存储的元素类型以及底层采用的基础容器类型，都必须相同。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"stl-queue\">STL queue</h3>\n<p>queue 容器适配器有 2 个开口，其中一个开口专门用来输入数据，另一个专门用来输出数据</p>\n<p><img src=\"http://c.biancheng.net/uploads/allimg/180913/2-1P913113140553.jpg\" alt=\"queue容器适配器\"></p>\n<table>\n<thead>\n<tr>\n<th>成员函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>empty()</td>\n<td>如果 queue 中没有元素的话，返回 true。</td>\n</tr>\n<tr>\n<td>size()</td>\n<td>返回 queue 中元素的个数。</td>\n</tr>\n<tr>\n<td>front()</td>\n<td>返回 queue 中第一个元素的引用。如果 queue 是常量，就返回一个常引用；如果 queue 为空，返回值是未定义的。</td>\n</tr>\n<tr>\n<td>back()</td>\n<td>返回 queue 中最后一个元素的引用。如果 queue 是常量，就返回一个常引用；如果 queue 为空，返回值是未定义的。</td>\n</tr>\n<tr>\n<td>push(const T&amp; obj)</td>\n<td>在 queue 的尾部添加一个元素的副本。这是通过调用底层容器的成员函数 push_back() 来完成的。</td>\n</tr>\n<tr>\n<td>emplace()</td>\n<td>在 queue 的尾部直接添加一个元素。</td>\n</tr>\n<tr>\n<td>push(T&amp;&amp; obj)</td>\n<td>以移动的方式在 queue 的尾部添加元素。这是通过调用底层容器的具有右值引用参数的成员函数 push_back() 来完成的。</td>\n</tr>\n<tr>\n<td>pop()</td>\n<td>删除 queue 中的第一个元素。</td>\n</tr>\n<tr>\n<td>swap(queue<T> &amp;other_queue)</T></td>\n<td>将两个 queue 容器适配器中的元素进行互换，需要注意的是，进行互换的 2 个 queue 容器适配器中存储的元素类型以及底层采用的基础容器类型，都必须相同。</td>\n</tr>\n</tbody>\n</table>\n<p><code>和 stack 一样，queue 也没有迭代器，因此访问元素的唯一方式是遍历容器，通过不断移除访问过的元素，去访问下一个元素。</code></p>\n<h3 id=\"stl-priority-queue\">STL priority_queue</h3>\n<p>priority_queue 容器适配器模拟的也是队列这种存储结构，即使用此容器适配器存储元素只能“从一端进（称为队尾），从另一端出（称为队头）”，且每次只能访问 priority_queue 中位于队头的元素。但是，priority_queue 容器适配器中元素的存和取，遵循的并不是 “First in,First out”（先入先出）原则，而是“First in，Largest out”原则。直白的翻译，指的就是先进队列的元素并不一定先出队列，而是优先级最大的元素最先出队列。使用<code>std::less&lt;T&gt;</code>按照元素值从大到小进行排序，还可以使用<code>std::greater&lt;T&gt;</code>按照元素值从小到大排序，但更多情况下是使用自定义的排序规则。 priority_queue 容器适配器模板位于<code>&lt;queue&gt;</code>头文件中.</p>\n<table>\n<thead>\n<tr>\n<th>成员函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>empty()</td>\n<td>如果 priority_queue 为空的话，返回 true；反之，返回 false。</td>\n</tr>\n<tr>\n<td>size()</td>\n<td>返回 priority_queue 中存储元素的个数。</td>\n</tr>\n<tr>\n<td>top()</td>\n<td>返回 priority_queue 中第一个元素的引用形式。</td>\n</tr>\n<tr>\n<td>push(const T&amp; obj)</td>\n<td>根据既定的排序规则，将元素 obj 的副本存储到 priority_queue 中适当的位置。</td>\n</tr>\n<tr>\n<td>push(T&amp;&amp; obj)</td>\n<td>根据既定的排序规则，将元素 obj 移动存储到 priority_queue 中适当的位置。</td>\n</tr>\n<tr>\n<td>emplace(Args&amp;&amp;… args)</td>\n<td>Args&amp;&amp;… args 表示构造一个存储类型的元素所需要的数据（对于类对象来说，可能需要多个数据构造出一个对象）。此函数的功能是根据既定的排序规则，在容器适配器适当的位置直接生成该新元素。</td>\n</tr>\n<tr>\n<td>pop()</td>\n<td>移除 priority_queue 容器适配器中第一个元素。</td>\n</tr>\n<tr>\n<td>swap(priority_queue<T>&amp; other)</T></td>\n<td>将两个 priority_queue 容器适配器中的元素进行互换，需要注意的是，进行互换的 2 个 priority_queue 容器适配器中存储的元素类型以及底层采用的基础容器类型，都必须相同。</td>\n</tr>\n</tbody>\n</table>\n<p>优先级队列默认<strong>使用vector作为其底层存储数据</strong>的容器，在vector上又使用了堆算法将vector中元素构造成堆的结构，因此priority_queue就是堆，所有需要用到堆的位置，都可以考虑使用priority_queue。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1>C++的STL容器</h1>\n<blockquote>\n<p>本文参考自《C语言中文网》中的<a href=\"http://c.biancheng.net/stl/\">STL</a>部分，侵删。</p>\n</blockquote>\n<p>C++的标准模板库(STL)的容器主要可以分为序列式容器, 关联式容器, 无序关联式容器.</p>\n<ol>\n<li>\n<p>序列式容器:  包括 array、vector、deque、list 和 forward_list 容器。</p>\n<p>所谓STL序列式容器，其共同的特点是不会对存储的元素进行排序，元素排列的顺序取决于存储它们的顺序。</p>\n</li>\n<li>\n<p>关联式容器: 包括map, multimap, set以及multiset这四种容器. 和序列式容器不同的是, 关联式容器在存储容器时, 还会为每个元素配备一个间, 整体以键值对的方式存储在容器中. 相比于前者, 关联式容器可以通过键值直接找到对应的元素, 而无需遍历整个容器. 另外, 关联式容器在存储元素, 默认会根据各元素键值的大小做升序排序.</p>\n</li>\n<li>\n<p>无序关联式容器: 包括unordered_map, unordered_multimap, unordered_set, unordered_multiset. 又称哈希容器. 和关联式容器一样, 此类容器存储的也是键值对元素, 关联式容器默认情况下会对存储的元素做升序排序, 而无序关联式容器不会. 和其他类容器相比, 无序关联容器擅长通过指定键查找对应的值, 而遍历容器中存储元素的效率不如关联式容器.</p>\n</li>\n<li>\n<p>容器适配器: 包括 stack、queue、priority_queue. 容器适配器是一个封装了序列容器的类模板，它在一般序列容器的基础上提供了一些不同的功能。之所以称作适配器类，是因为它可以通过适配容器现有的接口来提供不同的功能。</p>\n</li>\n</ol>\n<h2 id=\"序列式容器\">序列式容器</h2>\n<p>由于本文主要是自用, 因此在成员函数部分仅记录了一些自己不熟悉的函数, 如果需要更多的讲解, 可以详见<a href=\"http://c.biancheng.net/stl/\">C语言中文网</a></p>\n<h3 id=\"stl-array\">STL array</h3>\n<p>array 容器是 C++ 11 标准中新增的序列容器，简单地理解，它就是在 C++ 普通数组的基础上，添加了一些成员函数和全局函数。在使用上，它比普通数组更安全，且效率并没有因此变差。和其它容器不同，<code>array 容器的大小是固定的，无法动态的扩展或收缩</code>，这也就意味着，在使用该容器的过程无法借由增加或移除元素而改变其大小，<code>它只允许访问或者替换存储的元素</code>。</p>\n<p>array 容器以类模板的形式定义在 <array> 头文件，并位于命名空间 std 中,  array 容器有多种初始化方式，如下代码展示了如何创建具有 10 个 double 类型元素的 array 容器, <code>array 容器不会做默认初始化操作</code>。</array></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 使用这种方式创建的容器中，各个元素的值是不确定的\nstd::array&lt;double, 10&gt; values;\n&#x2F;&#x2F; 使用该语句，容器中所有的元素都会被初始化为 0.0。\nstd::array&lt;double, 10&gt; values &#123;&#125;;\n&#x2F;&#x2F; 只初始化了前 4 个元素，剩余的元素都会被初始化为 0.0\nstd::array&lt;double, 10&gt; values &#123;0.5,1.0,1.5,,2.0&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>array的操作:</p>\n<table>\n<thead>\n<tr>\n<th><strong>成员函数</strong></th>\n<th><strong>功能</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>front()</td>\n<td>返回容器中第一个元素的直接引用，该函数不适用于空的 array 容器。</td>\n</tr>\n<tr>\n<td>back()</td>\n<td>返回容器中最后一个元素的直接应用，该函数同样不适用于空的 array 容器。</td>\n</tr>\n<tr>\n<td>data()</td>\n<td>返回一个指向容器首个元素的指针。利用该指针，可实现复制容器中所有元素等类似功能。</td>\n</tr>\n<tr>\n<td>fill(val)</td>\n<td>将 val 这个值赋值给容器中的每个元素。</td>\n</tr>\n<tr>\n<td>array1.swap(array2)</td>\n<td>交换 array1 和 array2 容器中的所有元素，但前提是它们具有相同的长度和类型。</td>\n</tr>\n</tbody>\n</table>\n<p>另外，在 &lt;array&gt; 头文件中还重载了 get() 全局函数，该重载函数的功能是访问容器中指定的元素，并返回该元素的引用。</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n&#x2F;&#x2F;需要引入 array 头文件\n#include &lt;array&gt;\nusing namespace std;\nint main()\n&#123;\n    std::array&lt;int, 4&gt; values&#123;&#125;;\n    &#x2F;&#x2F;初始化 values 容器为 &#123;0,1,2,3&#125;\n    for (int i &#x3D; 0; i &lt; values.size(); i++) &#123;\n        values.at(i) &#x3D; i;\n    &#125;\n    &#x2F;&#x2F;使用 get() 重载函数输出指定位置元素\n    cout &lt;&lt; get&lt;3&gt;(values) &lt;&lt; endl;\n    &#x2F;&#x2F;如果容器不为空，则输出容器中所有的元素\n    if (!values.empty()) &#123;\n        for (auto val &#x3D; values.begin(); val &lt; values.end(); val++) &#123;\n            cout &lt;&lt; *val &lt;&lt; &quot; &quot;;\n        &#125;\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>array通过<code>容器名[]</code>的方式直接访问和使用容器中的元素, 但使用这样方式，由于没有做任何边界检查，所以即便使用越界的索引值去访问或存储元素，也不会被检测到。为了能够有效地避免越界访问的情况，可以使用 array 容器提供的 at() 成员函数, 当传给 at() 的索引是一个越界值时，程序会抛出 std::out_of_range 异常。</p>\n<h3 id=\"stl-vector\">STL vector</h3>\n<p>array 实现的是静态数组（容量固定的数组），而 vector 实现的是一个动态数组，即可以进行元素的插入和删除. vector 常被称为向量容器，因为该容器擅长在尾部插入或删除元素，在常量时间内就可以完成，时间复杂度为<code>O(1)</code>；而对于在容器头部或者中部插入或删除元素，则花费时间要长一些（移动元素需要耗费时间），时间复杂度为线性阶<code>O(n)</code>。</p>\n<p>vector的操作:</p>\n<table>\n<thead>\n<tr>\n<th>函数成员</th>\n<th>函数功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>max_size()</td>\n<td>返回元素个数的最大值。这通常是一个很大的值，一般是 232-1，所以我们很少会用到这个函数。</td>\n</tr>\n<tr>\n<td>resize()</td>\n<td>改变实际元素的个数。</td>\n</tr>\n<tr>\n<td>capacity()</td>\n<td>返回当前容量。</td>\n</tr>\n<tr>\n<td>reserve()</td>\n<td>增加容器的容量。</td>\n</tr>\n<tr>\n<td>shrink _to_fit()</td>\n<td>将内存减少到等于当前元素实际所使用的大小。</td>\n</tr>\n<tr>\n<td>assign()</td>\n<td>用新元素替换原有内容。</td>\n</tr>\n<tr>\n<td>swap()</td>\n<td>交换两个容器的所有元素。</td>\n</tr>\n<tr>\n<td>emplace()</td>\n<td>在指定的位置直接生成一个元素。</td>\n</tr>\n<tr>\n<td>emplace_back()</td>\n<td>在序列尾部生成一个元素。</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">std::vector&lt;int&gt; demo&#123;1,2&#125;;\n   &#x2F;&#x2F;第一种格式用法\n   demo.insert(demo.begin() + 1, 3);&#x2F;&#x2F;&#123;1,3,2&#125;\n   &#x2F;&#x2F;第二种格式用法\n   demo.insert(demo.end(), 2, 5);&#x2F;&#x2F;&#123;1,3,2,5,5&#125;\n   &#x2F;&#x2F;第三种格式用法\n   std::array&lt;int,3&gt;test&#123; 7,8,9 &#125;;\n   demo.insert(demo.end(), test.begin(), test.end());&#x2F;&#x2F;&#123;1,3,2,5,5,7,8,9&#125;\n   &#x2F;&#x2F;第四种格式用法\n   demo.insert(demo.end(), &#123; 10,11 &#125;);&#x2F;&#x2F;&#123;1,3,2,5,5,7,8,9,10,11&#125;\n&#x2F;&#x2F;emplace() 每次只能插入一个 int 类型元素, emplace效率高于insert\n   demo1.emplace(demo1.begin(), 3);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"stl-deque\">STL deque</h3>\n<p>deque 是 double-ended queue 的缩写，又称双端队列容器。和 vector 不同的是，deque 还擅长在序列头部添加或删除元素，所耗费的时间复杂度也为常数阶<code>O(1)</code>. 并且更重要的一点是，<code>deque 容器中存储元素并不能保证所有元素都存储到连续的内存空间中。当需要向序列两端频繁的添加或删除元素时，应首选 deque 容器。</code></p>\n<p>成员函数内容和Vector基本一致.</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;初始化一个空deque容量\ndeque&lt;int&gt;d;\n&#x2F;&#x2F;向d容器中的尾部依次添加 1，2,3\nd.push_back(1); &#x2F;&#x2F;&#123;1&#125;\nd.push_back(2); &#x2F;&#x2F;&#123;1,2&#125;\nd.push_back(3); &#x2F;&#x2F;&#123;1,2,3&#125;\n&#x2F;&#x2F;向d容器的头部添加 0 \nd.push_front(0); &#x2F;&#x2F;&#123;0,1,2,3&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>和 array、vector 容器一样，可以采用普通数组访问存储元素的方式，访问 deque 容器中的元素.  如果想有效地避免越界访问，可以使用 deque 模板类提供的 at() 成员函数, 如果想有效地避免越界访问，可以使用 deque 模板类提供的 at() 成员函数.</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">d.front() &#x3D; 10;\nd.back() &#x3D; 20;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"stl-list\">STL list</h3>\n<p>又称<code>双向链表容器</code>，即该容器的底层是以双向链表的形式实现的。这意味着，list 容器中的元素可以分散存储在内存空间里，而不是必须存储在一整块连续的内存空间中。每个元素都配备了 2 个指针，分别指向它的前一个元素和后一个元素。其中第一个元素的前向指针总为 null，因为它前面没有元素；同样，尾部元素的后向指针也总为 null。</p>\n<p><img src=\"http://c.biancheng.net/uploads/allimg/180912/2-1P912134314345.jpg\" alt=\"img\"></p>\n<table>\n<thead>\n<tr>\n<th>成员函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>emplace_front()</td>\n<td>在容器头部生成一个元素。该函数和 push_front() 的功能相同，但效率更高。</td>\n</tr>\n<tr>\n<td>push_front()</td>\n<td>在容器头部插入一个元素。</td>\n</tr>\n<tr>\n<td>pop_front()</td>\n<td>删除容器头部的一个元素。</td>\n</tr>\n<tr>\n<td>emplace_back()</td>\n<td>在容器尾部直接生成一个元素。该函数和 push_back() 的功能相同，但效率更高。</td>\n</tr>\n<tr>\n<td>push_back()</td>\n<td>在容器尾部插入一个元素。</td>\n</tr>\n<tr>\n<td>pop_back()</td>\n<td>删除容器尾部的一个元素。</td>\n</tr>\n<tr>\n<td>emplace()</td>\n<td>在容器中的指定位置插入元素。该函数和 insert() 功能相同，但效率更高。</td>\n</tr>\n<tr>\n<td>erase()</td>\n<td>删除容器中一个或某区域内的元素。</td>\n</tr>\n<tr>\n<td>swap()</td>\n<td>交换两个容器中的元素，必须保证这两个容器中存储的元素类型是相同的。</td>\n</tr>\n<tr>\n<td>splice()</td>\n<td>将一个 list 容器中的元素插入到另一个容器的指定位置。</td>\n</tr>\n<tr>\n<td>remove(val)</td>\n<td>删除容器中所有等于 val 的元素。</td>\n</tr>\n<tr>\n<td>remove_if()</td>\n<td>删除容器中满足条件的元素。</td>\n</tr>\n<tr>\n<td>unique()</td>\n<td>删除容器中相邻的重复元素，只保留一个。</td>\n</tr>\n<tr>\n<td>merge()</td>\n<td>合并两个事先已排好序的 list 容器，并且合并之后的 list 容器依然是有序的。</td>\n</tr>\n<tr>\n<td>sort()</td>\n<td>通过更改容器中元素的位置，将它们进行排序。</td>\n</tr>\n<tr>\n<td>reverse()</td>\n<td>反转容器中元素的顺序。</td>\n</tr>\n</tbody>\n</table>\n<p>和 insert() 成员方法相比，splice() 成员方法的作用对象是其它 list 容器，其功能是将其它 list 容器中的元素添加到当前 list 容器中指定位置处。</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 第一个参数是目标位置, 后面的参数是被移动对象\n&#x2F;&#x2F;创建并初始化 2 个 list 容器\nlist&lt;int&gt; mylist1&#123; 1,2,3,4 &#125;, mylist2&#123;10,20,30&#125;;\nlist&lt;int&gt;::iterator it &#x3D; ++mylist1.begin(); &#x2F;&#x2F;指向 mylist1 容器中的元素 2\n   \n&#x2F;&#x2F;调用第一种语法格式\nmylist1.splice(it, mylist2); &#x2F;&#x2F; mylist1: 1 10 20 30 2 3 4\n                             &#x2F;&#x2F; mylist2:\n                             &#x2F;&#x2F; it 迭代器仍然指向元素 2，只不过容器变为了 mylist1\n&#x2F;&#x2F;调用第二种语法格式，将 it 指向的元素 2 移动到 mylist2.begin() 位置处\nmylist2.splice(mylist2.begin(), mylist1, it);   &#x2F;&#x2F; mylist1: 1 10 20 30 3 4\n                                                &#x2F;&#x2F; mylist2: 2\n                                                &#x2F;&#x2F; it 仍然指向元素 2\n\n&#x2F;&#x2F;调用第三种语法格式，将 [mylist1.begin(),mylist1.end())范围内的元素移动到 mylist.begin() 位置处                  \nmylist2.splice(mylist2.begin(), mylist1, mylist1.begin(), mylist1.end());&#x2F;&#x2F;mylist1:\n                                                                         &#x2F;&#x2F;mylist2:1 10 20 30 3 4 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"stl-forward-list\">STL forward_list</h3>\n<p>forward_list 是 C++ 11 新添加的一类容器，其底层实现和 list 容器一样，采用的也是链表结构，只不过 forward_list 使用的是单链表，而 list 使用的是双向链表.</p>\n<p><img src=\"http://c.biancheng.net/uploads/allimg/191219/2-191219135239561.gif\" alt=\"单链表和双向链表\"></p>\n<p>forward_list 容器中是不提供 size() 函数的，但如果想要获取 forward_list 容器中存储元素的个数，可以使用头文件 &lt;iterator&gt; 中的 <a href=\"http://c.biancheng.net/ref/tan.html\">distance()</a> 函数。举个例子：</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">std::forward_list&lt;int&gt; my_words&#123;1,2,3,4&#125;;\nint count &#x3D; std::distance(std::begin(my_words), std::end(my_words));<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>并且，forward_list 容器迭代器的移动除了使用 ++ 运算符单步移动，还能使用 advance() 函数.</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 结果: 3,4\nstd::forward_list&lt;int&gt; values&#123;1,2,3,4&#125;;\nauto it &#x3D; values.begin();\nadvance(it, 2);\nwhile (it!&#x3D;values.end())\n&#123;\n    cout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n    ++it;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"关联式容器\">关联式容器</h2>\n<p>关联式容器存储的是“键值对”形式的数据,  基于各个关联式容器存储数据的特点，只有各个键值对中的键和值全部对应相等时，才能使用 set 和 multiset 关联式容器存储，否则就要选用 map 或者 multimap 关联式容器。</p>\n<h3 id=\"stl-pair\">STL pair</h3>\n<p>考虑到“键值对”并不是普通类型数据，<a href=\"http://c.biancheng.net/cplus/\">C++</a> <a href=\"http://c.biancheng.net/stl/\">STL</a> 标准库提供了 pair 类模板，其专门用来将 2 个普通元素 first 和 second. pair 类模板定义在<code>&lt;utility&gt;</code>头文件中.</p>\n<p>下面程序演示了以上几种创建 pair 对象的方法:</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 调用构造函数 1，也就是默认构造函数\npair &lt;string, double&gt; pair1;\n&#x2F;&#x2F; 调用第 2 种构造函数\npair &lt;string, string&gt; pair2(&quot;STL教程&quot;,&quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;stl&#x2F;&quot;);  \n&#x2F;&#x2F; 调用拷贝构造函数\npair &lt;string, string&gt; pair3(pair2);\n&#x2F;&#x2F;调用移动构造函数\npair &lt;string, string&gt; pair4(make_pair(&quot;C++教程&quot;, &quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;cplus&#x2F;&quot;));\n&#x2F;&#x2F; 调用第 5 种构造函数\npair &lt;string, string&gt; pair5(string(&quot;Python教程&quot;), string(&quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;python&#x2F;&quot;));<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>&lt;utility&gt;</code>头文件中除了提供创建 pair 对象的方法之外，还为 pair 对象重载了 &lt;、&lt;=、&gt;、&gt;=、==、!= 这 6 的运算符，其运算规则是：对于进行比较的 2 个 pair 对象，先比较 pair.first 元素的大小，如果相等则继续比较 pair.second 元素的大小。(二维偏序)</p>\n<p>最后需要指出的是，pair类模板还提供有一个 swap() 成员函数，能够互换 2 个 pair 对象的键值对，其操作成功的前提是这 2 个 pair 对象的键和值的类型要相同.</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">pair &lt;string, int&gt; pair1(&quot;pair&quot;, 10);                   \npair &lt;string, int&gt; pair2(&quot;pair2&quot;, 20);\n&#x2F;&#x2F;交换 pair1 和 pair2 的键值对\npair1.swap(pair2);\n&#x2F;&#x2F;pair1: pair2 20\n&#x2F;&#x2F;pair2: pair 10<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"stl-map\">STL map</h3>\n<p>map 容器存储的都是 pair 对象，也就是用 pair 类模板创建的键值对。与此同时，在使用 map 容器存储多个键值对时，该容器会自动根据各键值对的键的大小，按照既定的规则进行排序,  根据实际情况的需要，我们可以手动指定 map 容器的排序规则. <code>使用 map 容器存储的各个键值对，键的值既不能重复也不能被修改。</code>这意味着只要键值对被存储到 map 容器中，其键的值将不能再做任何修改。</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;如下语句可以指定升序排列键值\nstd::map&lt;std::string, int, std::greater&lt;std::string&gt; &gt;myMap&#123; &#123;&quot;C语言教程&quot;,10&#125;,&#123;&quot;STL教程&quot;,20&#125; &#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<table>\n<thead>\n<tr>\n<th>成员函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>find(key)</td>\n<td>在 map 容器中查找键为 key 的键值对，如果成功找到，则返回指向该键值对的双向迭代器；反之，则返回和 end() 方法一样的迭代器。另外，如果 map 容器用 const 限定，则该方法返回的是 const 类型的双向迭代器。</td>\n</tr>\n<tr>\n<td>lower_bound(key)</td>\n<td>返回一个指向当前 map 容器中第一个大于或等于 key 的键值对的双向迭代器。如果 map 容器用 const 限定，则该方法返回的是 const 类型的双向迭代器。</td>\n</tr>\n<tr>\n<td>upper_bound(key)</td>\n<td>返回一个指向当前 map 容器中第一个大于 key 的键值对的迭代器。如果 map 容器用 const 限定，则该方法返回的是 const 类型的双向迭代器。</td>\n</tr>\n<tr>\n<td>equal_range(key)</td>\n<td>该方法返回一个 pair 对象（包含 2 个双向迭代器），其中 pair.first 和 lower_bound() 方法的返回值等价，pair.second 和 upper_bound() 方法的返回值等价。也就是说，该方法将返回一个范围，该范围中包含的键为 key 的键值对（map 容器键值对唯一，因此该范围最多包含一个键值对）。</td>\n</tr>\n<tr>\n<td>emplace()</td>\n<td>在当前 map 容器中的指定位置处构造新键值对。其效果和插入键值对一样，但效率更高。</td>\n</tr>\n<tr>\n<td>emplace_hint()</td>\n<td>在本质上和 emplace() 在 map 容器中构造新键值对的方式是一样的，不同之处在于，使用者必须为该方法提供一个指示键值对生成位置的迭代器，并作为该方法的第一个参数。</td>\n</tr>\n<tr>\n<td>count(key)</td>\n<td>在当前 map 容器中，查找键为 key 的键值对的个数并返回。注意，由于 map 容器中各键值对的键的值是唯一的，因此该函数的返回值最大为 1。</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"http://c.biancheng.net/uploads/allimg/191128/2-19112Q14QE40.gif\" alt=\"C++ STL map部分成员方法示意图\"></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;创建并初始化 map 容器\nstd::map&lt;std::string, std::string&gt;myMap&#123; &#123;&quot;STL教程&quot;,&quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;stl&#x2F;&quot;&#125;,\n                                         &#123;&quot;C语言教程&quot;,&quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;c&#x2F;&quot;&#125;,\n                                         &#123;&quot;Java教程&quot;,&quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;java&#x2F;&quot;&#125; &#125;;\n&#x2F;&#x2F;找到第一个键的值不小于 &quot;Java教程&quot; 的键值对\nauto iter &#x3D; myMap.lower_bound(&quot;Java教程&quot;);\n&#x2F;&#x2F;lower：Java教程 http:&#x2F;&#x2F;c.biancheng.net&#x2F;java&#x2F;\ncout &lt;&lt; &quot;lower：&quot; &lt;&lt; iter-&gt;first &lt;&lt; &quot; &quot; &lt;&lt; iter-&gt;second &lt;&lt; endl;\n\n&#x2F;&#x2F;找到第一个键的值大于 &quot;Java教程&quot; 的键值对\niter &#x3D; myMap.upper_bound(&quot;Java教程&quot;);\n&#x2F;&#x2F;upper：STL教程 http:&#x2F;&#x2F;c.biancheng.net&#x2F;stl&#x2F;\ncout &lt;&lt;&quot;upper：&quot; &lt;&lt; iter-&gt;first &lt;&lt; &quot; &quot; &lt;&lt; iter-&gt;second &lt;&lt; endl;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>和 insert() 方法一样，虽然 emplace_hint() 方法指定了插入键值对的位置，但 map 容器为了保持存储键值对的有序状态，可能会移动其位置。</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;创建并初始化 map 容器\nstd::map&lt;string, string&gt;mymap;\n&#x2F;&#x2F;指定在 map 容器插入键值对\nmap&lt;string, string&gt;::iterator iter &#x3D; mymap.emplace_hint(mymap.begin(),&quot;STL教程&quot;, &quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;stl&#x2F;&quot;);\ncout &lt;&lt; iter-&gt;first &lt;&lt; &quot; &quot; &lt;&lt; iter-&gt;second &lt;&lt; endl;\niter &#x3D; mymap.emplace_hint(mymap.begin(), &quot;C语言教程&quot;, &quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;c&#x2F;&quot;);\ncout &lt;&lt; iter-&gt;first &lt;&lt; &quot; &quot; &lt;&lt; iter-&gt;second &lt;&lt; endl;\n&#x2F;&#x2F;插入失败样例\niter &#x3D; mymap.emplace_hint(mymap.begin(), &quot;STL教程&quot;, &quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;java&#x2F;&quot;);\ncout &lt;&lt; iter-&gt;first &lt;&lt; &quot; &quot; &lt;&lt; iter-&gt;second &lt;&lt; endl;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>只有当 map 容器中确实存有包含该指定键的键值对，借助重载的 [ ] 运算符才能成功获取该键对应的值；反之，若当前 map 容器中没有包含该指定键的键值对，则此时使用 [ ] 运算符将不再是访问容器中的元素，而变成了向该 map 容器中增添一个键值对。</p>\n<h3 id=\"stl-multimap\">STL multimap</h3>\n<p>multimap 容器具有和 map 相同的特性，即 multimap 容器也用于存储 pair&lt;const K, T&gt; 类型的键值对（其中 K 表示键的类型，T 表示值的类型），其中各个键值对的键的值不能做修改；并且，该容器也会自行根据键的大小对存储的所有键值对做排序操作。<code>和 map 容器的区别在于，multimap 容器中可以同时存储多（≥2）个键相同的键值对。</code>和 map 容器一样，实现 multimap 容器的类模板也定义在<code>&lt;map&gt;</code>头文件，并位于 std 命名空间中。在某些特定场景中，我们还可以为 multimap 容器自定义排序规则. multimap的操作和成员函数基本与map完全一致. 但和 map 容器相比，<code>multimap 未提供 at() 成员方法，也没有重载 [] 运算符</code>。这意味着，map 容器中通过指定键获取指定指定键值对的方式，将不再适用于 multimap 容器。其实这很好理解，因为 multimap 容器中指定的键可能对应多个键值对，而不再是 1 个。另外，由于maltimap容器可存储多个具有相同键的键值对，因此lower_bound()、upper_bound()、equal_range()以及count()方法经常会用到。</p>\n<h3 id=\"stl-set\">STL set</h3>\n<p>和 map、multimap 容器不同，使用 set 容器存储的各个键值对，要求键 key 和值 value 必须相等。基于 set 容器的这种特性，当使用 set 容器存储键值对时，只需要为其提供各键值对中的 value 值（也就是 key 的值）即可。set 容器也会自行根据键的大小对存储的键值对进行排序. <code>使用 set 容器存储的各个元素的值必须各不相同</code>。更重要的是，从语法上讲 set 容器并没有强制对存储元素的类型做 const 修饰，即 set 容器中存储的元素的值是可以修改的。但是，C++ 标准为了防止用户修改容器中元素的值，对所有可能会实现此操作的行为做了限制，<code>使得在正常情况下，用户是无法做到修改 set 容器中元素的值的。</code></p>\n<p><code>对于初学者来说，切勿尝试直接修改 set 容器中已存储元素的值，这很有可能破坏 set 容器中元素的有序性，最正确的修改 set 容器中元素值的做法是：先删除该元素，然后再添加一个修改后的元素。</code></p>\n<p>set的成员函数和multimap基本一致, <code>set 容器类模板中未提供 at() 成员函数，也未对 [] 运算符进行重载。因此，要想访问 set 容器中存储的元素，只能借助 set 容器的迭代器。</code></p>\n<p><code>C++ STL 标准库为 set 容器配置的迭代器类型为双向迭代器。这意味着，假设 p 为此类型的迭代器，则其只能进行 ++p、p++、--p、p--、*p 操作，并且 2 个双向迭代器之间做比较，也只能使用 == 或者 != 运算符。</code></p>\n<p>如果只想遍历 set 容器中指定区域内的部分数据，则可以借助 find()、lower_bound() 以及 upper_bound() 实现。通过调用它们，可以获取一个指向指定元素的迭代器。equal_range(val) 函数的返回值是一个 pair 类型数据，其包含 2 个迭代器，表示 set 容器中和指定参数 val 相等的元素所在的区域，但由于 set 容器中存储的元素各不相等，因此该函数返回的这 2 个迭代器所表示的范围中，最多只会包含 1 个元素。</p>\n<h3 id=\"stl-multiset\">STL multiset</h3>\n<p>和 set 容器不同的是，<code>multiset 容器可以存储多个值相同的元素。</code>虽然 multiset 容器和 set 容器拥有的成员方法完全相同，但由于 multiset 容器允许存储多个值相同的元素，因此诸如 count()、find()、lower_bound()、upper_bound()、equal_range()等方法，更常用于 multiset 容器。</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">std::multiset&lt;int&gt; mymultiset&#123;1,2,2,2,3,4,5&#125;;\n&#x2F;&#x2F;multiset size &#x3D; 7\ncout &lt;&lt; &quot;multiset size &#x3D; &quot; &lt;&lt; mymultiset.size() &lt;&lt; endl;\n&#x2F;&#x2F;multiset count(2) &#x3D;3\ncout &lt;&lt; &quot;multiset count(2) &#x3D;&quot; &lt;&lt; mymultiset.count(2) &lt;&lt; endl;\n&#x2F;&#x2F;向容器中添加元素 8\nmymultiset.insert(8);\n&#x2F;&#x2F;删除容器中所有值为 2 的元素\nint num &#x3D; mymultiset.erase(2);\n&#x2F;&#x2F;删除了 3 个元素 2\ncout &lt;&lt; &quot;删除了 &quot; &lt;&lt; num &lt;&lt; &quot; 个元素 2&quot; &lt;&lt; endl;\n&#x2F;&#x2F;输出容器中存储的所有元素 1 3 4 5 8\nfor (auto iter &#x3D; mymultiset.begin(); iter !&#x3D; mymultiset.end(); ++iter) &#123;\n    cout &lt;&lt; *iter &lt;&lt; &quot; &quot;;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"关联式容器自定义排序\">关联式容器自定义排序</h3>\n<p>模板库中常用的可供关联容器使用的排序规则为<img src=\"https://img-blog.csdnimg.cn/20210422104233471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDQ4NDcxNQ==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>同时也可以自定义:</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class cmp &#123;\npublic:\n    &#x2F;&#x2F;重载 () 运算符\n    bool operator ()(const string &amp;a,const string &amp;b) &#123;\n        &#x2F;&#x2F;按照字符串的长度，做升序排序(即存储的字符串从短到长)\n        return  (a.length() &lt; b.length());\n    &#125;\n&#125;;\nint main() &#123;\n    &#x2F;&#x2F;创建 set 容器，并使用自定义的 cmp 排序规则\n    std::set&lt;string, cmp&gt;myset&#123;&quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;stl&#x2F;&quot;,\n                               &quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;python&#x2F;&quot;,\n                               &quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;java&#x2F;&quot;&#125;;\n    &#x2F;&#x2F;输出容器中存储的元素\n    for (auto iter &#x3D; myset.begin(); iter !&#x3D; myset.end(); ++iter) &#123;\n            cout &lt;&lt; *iter &lt;&lt; endl;\n    &#125;\n    return 0;\n&#125;\n&#x2F;&#x2F;结果：\n&#x2F;&#x2F;http:&#x2F;&#x2F;c.biancheng.net&#x2F;stl&#x2F;\n&#x2F;&#x2F;http:&#x2F;&#x2F;c.biancheng.net&#x2F;java&#x2F;\n&#x2F;&#x2F;http:&#x2F;&#x2F;c.biancheng.net&#x2F;python&#x2F;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>当关联式容器中存储的数据类型为自定义的结构体变量或者类对象时，通过对现有排序规则中所用的关系运算符进行重载，也能实现自定义排序规则的目的。注意，当关联式容器中存储的元素类型为结构体指针变量或者类的指针对象时，只能使用函数对象的方式自定义排序规则，此方法不再适用。</p>\n<h2 id=\"无序关联式容器\">无序关联式容器</h2>\n<p>无序关联式容器，又称哈希容器。和关联式容器一样，此类容器存储的也是键值对元素；不同之处在于，关联式容器默认情况下会对存储的元素做升序排序，而无序关联式容器不会。<code>无序关联式容器擅长通过指定键查找对应的值，而遍历容器中存储元素的效率不如关联式容器。</code></p>\n<p><strong>关联式容器的底层实现采用的树存储结构，更确切的说是红黑树结构；无序容器的底层实现采用的是哈希表的存储结构, 并且当数据存储位置发生冲突时，解决方法选用的是“链地址法”。</strong></p>\n<p>基于底层实现采用了不同的数据结构，因此和关联式容器相比，无序容器具有以下 2 个特点：</p>\n<ol>\n<li>无序容器内部存储的键值对是无序的，各键值对的存储位置取决于该键值对中的键，</li>\n<li>和关联式容器相比，无序容器擅长通过指定键查找对应的值（平均时间复杂度为 O(1)）；但对于使用迭代器遍历容器中存储的元素，无序容器的执行效率则不如关联式容器。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>无序容器</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>unordered_map</td>\n<td>存储键值对 &lt;key, value&gt; 类型的元素，其中各个键值对键的值不允许重复，且该容器中存储的键值对是无序的。</td>\n</tr>\n<tr>\n<td>unordered_multimap</td>\n<td>和 unordered_map 唯一的区别在于，该容器允许存储多个键相同的键值对。</td>\n</tr>\n<tr>\n<td>unordered_set</td>\n<td>不再以键值对的形式存储数据，而是直接存储数据元素本身（当然也可以理解为，该容器存储的全部都是键 key 和值 value 相等的键值对，正因为它们相等，因此只存储 value 即可）。另外，该容器存储的元素不能重复，且容器内部存储的元素也是无序的。</td>\n</tr>\n<tr>\n<td>unordered_multiset</td>\n<td>和 unordered_set 唯一的区别在于，该容器允许存储值相同的元素。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"unordered-map\">unordered_map</h3>\n<p>unordered_map 定义在<code>&lt;unordered_map&gt;</code>头文件</p>\n<table>\n<thead>\n<tr>\n<th>成员方法</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bucket_count()</td>\n<td>返回当前容器底层存储键值对时，使用桶（一个线性链表代表一个桶）的数量。</td>\n</tr>\n<tr>\n<td>max_bucket_count()</td>\n<td>返回当前系统中，unordered_map 容器底层最多可以使用多少桶。</td>\n</tr>\n<tr>\n<td>bucket_size(n)</td>\n<td>返回第 n 个桶中存储键值对的数量。</td>\n</tr>\n<tr>\n<td>bucket(key)</td>\n<td>返回以 key 为键的键值对所在桶的编号。</td>\n</tr>\n<tr>\n<td>load_factor()</td>\n<td>返回 unordered_map 容器中当前的负载因子。负载因子，指的是的当前容器中存储键值对的数量（size()）和使用桶数（bucket_count()）的比值，即 load_factor() = size() / bucket_count()。</td>\n</tr>\n<tr>\n<td>max_load_factor()</td>\n<td>返回或者设置当前 unordered_map 容器的负载因子。</td>\n</tr>\n<tr>\n<td>rehash(n)</td>\n<td>将当前容器底层使用桶的数量设置为 n。</td>\n</tr>\n<tr>\n<td>reserve()</td>\n<td>将存储桶的数量（也就是 bucket_count() 方法的返回值）设置为至少容纳count个元（不超过最大负载因子）所需的数量，并重新整理容器。</td>\n</tr>\n<tr>\n<td>hash_function()</td>\n<td>返回当前容器使用的哈希函数对象。</td>\n</tr>\n</tbody>\n</table>\n<p>unordered_map 容器类模板中，实现了对 [ ] 运算符的重载，使得我们可以像“利用下标访问普通数组中元素”那样，通过目标键值对的键获取到该键对应的值。如果当前容器中并没有存储以 [ ] 运算符内指定的元素作为键的键值对，则此时 [ ] 运算符的功能将转变为：向当前容器中添加以目标元素为键的键值对.</p>\n<h3 id=\"stl-unordered-multimap\">STL unordered_multimap</h3>\n<p>unordered_multimap 容器可以存储多个键相等的键值对，而 unordered_map 容器不行。</p>\n<h3 id=\"stl-unordered-set\">STL unordered_set</h3>\n<p>unordered_set 容器，可直译为“无序 set 容器”，即 unordered_set 容器和 set 容器很像，唯一的区别就在于 set 容器会自行对存储的数据进行排序，而 unordered_set 容器不会。实现 unordered_set 容器的模板类定义在&lt;unordered_set&gt;头文件</p>\n<p><strong>总的来说，unordered_set 容器具有以下几个特性：</strong></p>\n<ol>\n<li><strong>不再以键值对的形式存储数据，而是直接存储数据的值；</strong></li>\n<li><strong>容器内部存储的各个元素的值都互不相等，且不能被修改。</strong></li>\n<li><strong>不会对内部存储的数据进行排序</strong></li>\n</ol>\n<h3 id=\"stl-unordered-multiset\">STL unordered_multiset</h3>\n<p>和 unordered_set 容器不同的是，unordered_multiset 容器可以同时存储多个值相同的元素，且这些元素会存储到哈希表中同一个桶（本质就是链表）上。</p>\n<h2 id=\"容器适配器\">容器适配器</h2>\n<p>STL 提供了 3 种容器适配器，分别为 stack 栈适配器、queue 队列适配器以及 priority_queue 优先权队列适配器。</p>\n<table>\n<thead>\n<tr>\n<th>容器适配器</th>\n<th>基础容器筛选条件</th>\n<th>默认使用的基础容器</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>stack</td>\n<td>基础容器需包含以下成员函数：empty()size()back()push_back()pop_back()满足条件的基础容器有 vector、deque、list。</td>\n<td>deque</td>\n</tr>\n<tr>\n<td>queue</td>\n<td>基础容器需包含以下成员函数：empty()size()front()back()push_back()pop_front()满足条件的基础容器有 deque、list。</td>\n<td>deque</td>\n</tr>\n<tr>\n<td>priority_queue</td>\n<td>基础容器需包含以下成员函数：empty()size()front()push_back()pop_back()满足条件的基础容器有vector、deque。</td>\n<td>vector</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"stl-stack\">STL stack</h3>\n<p>stack 栈适配器是一种单端开口的容器（如图 1 所示），实际上该容器模拟的就是栈存储结构，即无论是向里存数据还是从中取数据，都只能从这一个开口实现操作。</p>\n<p><img src=\"http://c.biancheng.net/uploads/allimg/180913/2-1P913101Q4T2.jpg\" alt=\"stack适配器示意图\"></p>\n<table>\n<thead>\n<tr>\n<th>成员函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>empty()</td>\n<td>当 stack 栈中没有元素时，该成员函数返回 true；反之，返回 false。</td>\n</tr>\n<tr>\n<td>size()</td>\n<td>返回 stack 栈中存储元素的个数。</td>\n</tr>\n<tr>\n<td>top()</td>\n<td>返回一个栈顶元素的引用，类型为 T&amp;。如果栈为空，程序会报错。</td>\n</tr>\n<tr>\n<td>push(const T&amp; val)</td>\n<td>先复制 val，再将 val 副本压入栈顶。这是通过调用底层容器的 push_back() 函数完成的。</td>\n</tr>\n<tr>\n<td>push(T&amp;&amp; obj)</td>\n<td>以移动元素的方式将其压入栈顶。这是通过调用底层容器的有右值引用参数的 push_back() 函数完成的。</td>\n</tr>\n<tr>\n<td>pop()</td>\n<td>弹出栈顶元素。</td>\n</tr>\n<tr>\n<td>emplace(arg…)</td>\n<td>arg… 可以是一个参数，也可以是多个参数，但它们都只用于构造一个对象，并在栈顶直接生成该对象，作为新的栈顶元素。</td>\n</tr>\n<tr>\n<td>swap(stack<T> &amp; other_stack)</T></td>\n<td>将两个 stack 适配器中的元素进行互换，需要注意的是，进行互换的 2 个 stack 适配器中存储的元素类型以及底层采用的基础容器类型，都必须相同。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"stl-queue\">STL queue</h3>\n<p>queue 容器适配器有 2 个开口，其中一个开口专门用来输入数据，另一个专门用来输出数据</p>\n<p><img src=\"http://c.biancheng.net/uploads/allimg/180913/2-1P913113140553.jpg\" alt=\"queue容器适配器\"></p>\n<table>\n<thead>\n<tr>\n<th>成员函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>empty()</td>\n<td>如果 queue 中没有元素的话，返回 true。</td>\n</tr>\n<tr>\n<td>size()</td>\n<td>返回 queue 中元素的个数。</td>\n</tr>\n<tr>\n<td>front()</td>\n<td>返回 queue 中第一个元素的引用。如果 queue 是常量，就返回一个常引用；如果 queue 为空，返回值是未定义的。</td>\n</tr>\n<tr>\n<td>back()</td>\n<td>返回 queue 中最后一个元素的引用。如果 queue 是常量，就返回一个常引用；如果 queue 为空，返回值是未定义的。</td>\n</tr>\n<tr>\n<td>push(const T&amp; obj)</td>\n<td>在 queue 的尾部添加一个元素的副本。这是通过调用底层容器的成员函数 push_back() 来完成的。</td>\n</tr>\n<tr>\n<td>emplace()</td>\n<td>在 queue 的尾部直接添加一个元素。</td>\n</tr>\n<tr>\n<td>push(T&amp;&amp; obj)</td>\n<td>以移动的方式在 queue 的尾部添加元素。这是通过调用底层容器的具有右值引用参数的成员函数 push_back() 来完成的。</td>\n</tr>\n<tr>\n<td>pop()</td>\n<td>删除 queue 中的第一个元素。</td>\n</tr>\n<tr>\n<td>swap(queue<T> &amp;other_queue)</T></td>\n<td>将两个 queue 容器适配器中的元素进行互换，需要注意的是，进行互换的 2 个 queue 容器适配器中存储的元素类型以及底层采用的基础容器类型，都必须相同。</td>\n</tr>\n</tbody>\n</table>\n<p><code>和 stack 一样，queue 也没有迭代器，因此访问元素的唯一方式是遍历容器，通过不断移除访问过的元素，去访问下一个元素。</code></p>\n<h3 id=\"stl-priority-queue\">STL priority_queue</h3>\n<p>priority_queue 容器适配器模拟的也是队列这种存储结构，即使用此容器适配器存储元素只能“从一端进（称为队尾），从另一端出（称为队头）”，且每次只能访问 priority_queue 中位于队头的元素。但是，priority_queue 容器适配器中元素的存和取，遵循的并不是 “First in,First out”（先入先出）原则，而是“First in，Largest out”原则。直白的翻译，指的就是先进队列的元素并不一定先出队列，而是优先级最大的元素最先出队列。使用<code>std::less&lt;T&gt;</code>按照元素值从大到小进行排序，还可以使用<code>std::greater&lt;T&gt;</code>按照元素值从小到大排序，但更多情况下是使用自定义的排序规则。 priority_queue 容器适配器模板位于<code>&lt;queue&gt;</code>头文件中.</p>\n<table>\n<thead>\n<tr>\n<th>成员函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>empty()</td>\n<td>如果 priority_queue 为空的话，返回 true；反之，返回 false。</td>\n</tr>\n<tr>\n<td>size()</td>\n<td>返回 priority_queue 中存储元素的个数。</td>\n</tr>\n<tr>\n<td>top()</td>\n<td>返回 priority_queue 中第一个元素的引用形式。</td>\n</tr>\n<tr>\n<td>push(const T&amp; obj)</td>\n<td>根据既定的排序规则，将元素 obj 的副本存储到 priority_queue 中适当的位置。</td>\n</tr>\n<tr>\n<td>push(T&amp;&amp; obj)</td>\n<td>根据既定的排序规则，将元素 obj 移动存储到 priority_queue 中适当的位置。</td>\n</tr>\n<tr>\n<td>emplace(Args&amp;&amp;… args)</td>\n<td>Args&amp;&amp;… args 表示构造一个存储类型的元素所需要的数据（对于类对象来说，可能需要多个数据构造出一个对象）。此函数的功能是根据既定的排序规则，在容器适配器适当的位置直接生成该新元素。</td>\n</tr>\n<tr>\n<td>pop()</td>\n<td>移除 priority_queue 容器适配器中第一个元素。</td>\n</tr>\n<tr>\n<td>swap(priority_queue<T>&amp; other)</T></td>\n<td>将两个 priority_queue 容器适配器中的元素进行互换，需要注意的是，进行互换的 2 个 priority_queue 容器适配器中存储的元素类型以及底层采用的基础容器类型，都必须相同。</td>\n</tr>\n</tbody>\n</table>\n<p>优先级队列默认<strong>使用vector作为其底层存储数据</strong>的容器，在vector上又使用了堆算法将vector中元素构造成堆的结构，因此priority_queue就是堆，所有需要用到堆的位置，都可以考虑使用priority_queue。</p>\n"}],"PostAsset":[{"_id":"source/_posts/启程/1.jpg","slug":"1.jpg","post":"clam3aij00003hwue87bkf2nn","modified":0,"renderable":0},{"_id":"source/_posts/Reproducibility-Badges/1.png","slug":"1.png","post":"clam3mwm90000youe7oye35gn","modified":0,"renderable":0},{"_id":"source/_posts/RDMA技术解读/image-20221118211652713.png","slug":"image-20221118211652713.png","post":"clamjv4f60000qwueg3fr7d2l","modified":0,"renderable":0},{"_id":"source/_posts/RDMA技术解读/image-20221118211738044.png","slug":"image-20221118211738044.png","post":"clamjv4f60000qwueg3fr7d2l","modified":0,"renderable":0},{"_id":"source/_posts/RDMA技术解读/image-20221118211907180.png","slug":"image-20221118211907180.png","post":"clamjv4f60000qwueg3fr7d2l","modified":0,"renderable":0},{"_id":"source/_posts/RDMA技术解读/image-20221118212411801.png","slug":"image-20221118212411801.png","post":"clamjv4f60000qwueg3fr7d2l","modified":0,"renderable":0},{"_id":"source/_posts/2022-11-22随笔/22-11-22随笔.jpg","slug":"22-11-22随笔.jpg","post":"clarlnj22000028uegzfq1ve8","modified":0,"renderable":0},{"_id":"source/_posts/rCUDA学习笔记/image-20221210105200418.png","slug":"image-20221210105200418.png","post":"clbfub88b0000wcue2l26hpq6","modified":0,"renderable":0},{"_id":"source/_posts/Ray学习笔记/image-20221221174102006.png","slug":"image-20221221174102006.png","post":"clbxg25si00003gue8cry2dmx","modified":0,"renderable":0}],"PostCategory":[{"post_id":"clam3aij00003hwue87bkf2nn","category_id":"clam3aij40008hwuebxyff2ee","_id":"clam3aij5000chwue40i1hfa5"},{"post_id":"clam3mwm90000youe7oye35gn","category_id":"clam3aij20004hwue9rhxcjf5","_id":"clamhu0wt00012kuecolxglig"},{"post_id":"clamjv4f60000qwueg3fr7d2l","category_id":"clam3aij20004hwue9rhxcjf5","_id":"clamjv4fc0002qwue3fx1eslk"},{"post_id":"claq8suz60000owuedudpbgp5","category_id":"clam3aij20004hwue9rhxcjf5","_id":"claq8suzb0002owue0iwseayf"},{"post_id":"clarlnj22000028uegzfq1ve8","category_id":"clam3aij40008hwuebxyff2ee","_id":"clarlnj25000228ue1sw4bdjz"},{"post_id":"clbfub88b0000wcue2l26hpq6","category_id":"clbhchdju00005oue0jekds01","_id":"clbhchdjy00035oue7atfar50"},{"post_id":"clboh3r88000008ue1s9i6mfo","category_id":"clam3aij40008hwuebxyff2ee","_id":"clboh3r8c000408uefv2c7gjp"},{"post_id":"clboh3r8a000108uedigcfqke","category_id":"clam3aij40008hwuebxyff2ee","_id":"clboh3r8c000508uehsr56dlo"},{"post_id":"clbxg25si00003gue8cry2dmx","category_id":"clbhchdju00005oue0jekds01","_id":"clbxg25so00023gue4o937tqu"},{"post_id":"cldy44quc0000eguecyw5d845","category_id":"clbhchdju00005oue0jekds01","_id":"cldy44qui0002egueg4yah4d7"},{"post_id":"cle187e760000s4ue8muj8m79","category_id":"clam3mwmd0001youef8b408yy","_id":"cle18ew5k0002s4ueabjvegb1"},{"post_id":"clehundf90000m0ue9wxs5bnn","category_id":"clam3mwmd0001youef8b408yy","_id":"clehundfd0002m0ue60iadoyq"}],"PostTag":[{"post_id":"clam3aij00003hwue87bkf2nn","tag_id":"clam3aij5000dhwue8f2j3zub","_id":"clam3aij5000hhwue4y058gqi"},{"post_id":"clam3mwm90000youe7oye35gn","tag_id":"clam3mwme0002youe959l6xhc","_id":"clam3mwmg0005youedu89g2gi"},{"post_id":"clam3mwm90000youe7oye35gn","tag_id":"clam3mwmf0003youeaa3m7bra","_id":"clam3mwmg0006youe8c606jon"},{"post_id":"clamjv4f60000qwueg3fr7d2l","tag_id":"clam3aij40009hwue1m7y5rr1","_id":"clamjv4fc0003qwue6kuocs9s"},{"post_id":"clamjv4f60000qwueg3fr7d2l","tag_id":"clamjv4fa0001qwuegn1d8kwj","_id":"clamjv4fc0004qwue3mim4dwz"},{"post_id":"claq8suz60000owuedudpbgp5","tag_id":"claq8suza0001owuefs6phdep","_id":"claq8suzb0004owue73pdf3vo"},{"post_id":"claq8suz60000owuedudpbgp5","tag_id":"claq8suzb0003owuecv7hgedb","_id":"claq8suzc0005owue3ebjb0z7"},{"post_id":"clarlnj22000028uegzfq1ve8","tag_id":"clam3aij5000dhwue8f2j3zub","_id":"clarlnj25000128uebmwt3x1s"},{"post_id":"clbfub88b0000wcue2l26hpq6","tag_id":"clam3aij40009hwue1m7y5rr1","_id":"clbhchdjz00045oue8c9f7k79"},{"post_id":"clbfub88b0000wcue2l26hpq6","tag_id":"clbhchdjx00015oue6pefc969","_id":"clbhchdjz00055oue1wy42sdx"},{"post_id":"clbfub88b0000wcue2l26hpq6","tag_id":"clbhchdjy00025ouegxw92e0t","_id":"clbhchdjz00065ouefubg939s"},{"post_id":"clboh3r88000008ue1s9i6mfo","tag_id":"clam3aij5000dhwue8f2j3zub","_id":"clboh3r8b000208ue5j4m34dl"},{"post_id":"clboh3r8a000108uedigcfqke","tag_id":"clam3aij5000dhwue8f2j3zub","_id":"clboh3r8c000308ue2s4uh9bh"},{"post_id":"clbxg25si00003gue8cry2dmx","tag_id":"claq8suzb0003owuecv7hgedb","_id":"clbxg25so00033guegv2ba98j"},{"post_id":"clbxg25si00003gue8cry2dmx","tag_id":"clam3aij40009hwue1m7y5rr1","_id":"clbxg25so00043guedg95757z"},{"post_id":"clbxg25si00003gue8cry2dmx","tag_id":"clbxg25sl00013gue9sn9gemc","_id":"clbxg25so00053gue7ud0eanf"},{"post_id":"cldy44quc0000eguecyw5d845","tag_id":"cldy44quf0001egue7dgreh7k","_id":"cldy44quj0006egue3xo4hkyf"},{"post_id":"cldy44quc0000eguecyw5d845","tag_id":"cldy44qui0003eguege96b2x7","_id":"cldy44quj0007egue6u009007"},{"post_id":"cldy44quc0000eguecyw5d845","tag_id":"cldy44qui0004eguefcxc9ep4","_id":"cldy44quj0008eguednt011ef"},{"post_id":"cldy44quc0000eguecyw5d845","tag_id":"cldy44quj0005egue6m4yahvy","_id":"cldy44quj0009egue6jf3as7d"},{"post_id":"cle187e760000s4ue8muj8m79","tag_id":"clbhchdjx00015oue6pefc969","_id":"cle18ew5l0005s4ueeybwf98e"},{"post_id":"cle187e760000s4ue8muj8m79","tag_id":"cle18ew5j0001s4uegahv1t23","_id":"cle18ew5m0006s4ue3o8m945s"},{"post_id":"cle187e760000s4ue8muj8m79","tag_id":"cle18ew5k0003s4uefxemfwr0","_id":"cle18ew5m0007s4ueaw4ygqi5"},{"post_id":"cle187e760000s4ue8muj8m79","tag_id":"cle18ew5l0004s4ue9d4f2mo1","_id":"cle18ew5m0008s4ue64q7elcp"},{"post_id":"clehundf90000m0ue9wxs5bnn","tag_id":"clehundfa0001m0ue67px8v2x","_id":"clehundfe0005m0uegajy6w89"},{"post_id":"clehundf90000m0ue9wxs5bnn","tag_id":"clehundfd0003m0ue8jqw6ack","_id":"clehundfe0006m0ue04gacrum"},{"post_id":"clehundf90000m0ue9wxs5bnn","tag_id":"clehundfe0004m0ueehegcm8r","_id":"clehundfe0007m0ue0owk78oy"}],"Tag":[{"name":"课程","_id":"clam3aij30005hwue7cuj19v8"},{"name":"体系结构","_id":"clam3aij40009hwue1m7y5rr1"},{"name":"存储","_id":"clam3aij5000bhwue9rdsd08q"},{"name":"随笔","_id":"clam3aij5000dhwue8f2j3zub"},{"name":"conference","_id":"clam3mwme0002youe959l6xhc"},{"name":"SC","_id":"clam3mwmf0003youeaa3m7bra"},{"name":"SC22","_id":"clamhuksh000178uegxau8sxt"},{"name":"网络","_id":"clamjv4fa0001qwuegn1d8kwj"},{"name":"Linux","_id":"claq8suza0001owuefs6phdep"},{"name":"系统管理","_id":"claq8suzb0003owuecv7hgedb"},{"name":"GPU","_id":"clbhchdjx00015oue6pefc969"},{"name":"CUDA","_id":"clbhchdjy00025ouegxw92e0t"},{"name":"计算框架","_id":"clbxg25sl00013gue9sn9gemc"},{"name":"推荐系统","_id":"cldy44quf0001egue7dgreh7k"},{"name":"机器学习","_id":"cldy44qui0003eguege96b2x7"},{"name":"神经网络","_id":"cldy44qui0004eguefcxc9ep4"},{"name":"人工智能","_id":"cldy44quj0005egue6m4yahvy"},{"name":"性能测试","_id":"cle18ew5j0001s4uegahv1t23"},{"name":"profile","_id":"cle18ew5k0003s4uefxemfwr0"},{"name":"roofline","_id":"cle18ew5l0004s4ue9d4f2mo1"},{"name":"cpp","_id":"clehundfa0001m0ue67px8v2x"},{"name":"stl","_id":"clehundfd0003m0ue8jqw6ack"},{"name":"编程","_id":"clehundfe0004m0ueehegcm8r"}]}}