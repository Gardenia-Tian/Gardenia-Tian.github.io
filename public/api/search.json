[{"id":"8cc29657b5b51898c34ba4535ceced8c","title":"C++的STL容器","content":"C++的STL容器\n\n\n\n\n\n\n\n\n\n本文参考自《C语言中文网》中的STL部分，侵删。\nC++的标准模板库(STL)的容器主要可以分为序列式容器, 关联式容器, 无序关联式容器.\n\n\n序列式容器:  包括 array、vector、deque、list 和 forward_list 容器。\n所谓STL序列式容器，其共同的特点是不会对存储的元素进行排序，元素排列的顺序取决于存储它们的顺序。\n\n\n关联式容器: 包括map, multimap, set以及multiset这四种容器. 和序列式容器不同的是, 关联式容器在存储容器时, 还会为每个元素配备一个间, 整体以键值对的方式存储在容器中. 相比于前者, 关联式容器可以通过键值直接找到对应的元素, 而无需遍历整个容器. 另外, 关联式容器在存储元素, 默认会根据各元素键值的大小做升序排序.\n\n\n无序关联式容器: 包括unordered_map, unordered_multimap, unordered_set, unordered_multiset. 又称哈希容器. 和关联式容器一样, 此类容器存储的也是键值对元素, 关联式容器默认情况下会对存储的元素做升序排序, 而无序关联式容器不会. 和其他类容器相比, 无序关联容器擅长通过指定键查找对应的值, 而遍历容器中存储元素的效率不如关联式容器.\n\n\n容器适配器: 包括 stack、queue、priority_queue. 容器适配器是一个封装了序列容器的类模板，它在一般序列容器的基础上提供了一些不同的功能。之所以称作适配器类，是因为它可以通过适配容器现有的接口来提供不同的功能。\n\n\n序列式容器\n由于本文主要是自用, 因此在成员函数部分仅记录了一些自己不熟悉的函数, 如果需要更多的讲解, 可以详见C语言中文网\nSTL array\narray 容器是 C++ 11 标准中新增的序列容器，简单地理解，它就是在 C++ 普通数组的基础上，添加了一些成员函数和全局函数。在使用上，它比普通数组更安全，且效率并没有因此变差。和其它容器不同，array 容器的大小是固定的，无法动态的扩展或收缩，这也就意味着，在使用该容器的过程无法借由增加或移除元素而改变其大小，它只允许访问或者替换存储的元素。\narray 容器以类模板的形式定义在  头文件，并位于命名空间 std 中,  array 容器有多种初始化方式，如下代码展示了如何创建具有 10 个 double 类型元素的 array 容器, array 容器不会做默认初始化操作。\n&#x2F;&#x2F; 使用这种方式创建的容器中，各个元素的值是不确定的\nstd::array&lt;double, 10&gt; values;\n&#x2F;&#x2F; 使用该语句，容器中所有的元素都会被初始化为 0.0。\nstd::array&lt;double, 10&gt; values &#123;&#125;;\n&#x2F;&#x2F; 只初始化了前 4 个元素，剩余的元素都会被初始化为 0.0\nstd::array&lt;double, 10&gt; values &#123;0.5,1.0,1.5,,2.0&#125;;\narray的操作:\n\n\n\n成员函数\n功能\n\n\n\n\nfront()\n返回容器中第一个元素的直接引用，该函数不适用于空的 array 容器。\n\n\nback()\n返回容器中最后一个元素的直接应用，该函数同样不适用于空的 array 容器。\n\n\ndata()\n返回一个指向容器首个元素的指针。利用该指针，可实现复制容器中所有元素等类似功能。\n\n\nfill(val)\n将 val 这个值赋值给容器中的每个元素。\n\n\narray1.swap(array2)\n交换 array1 和 array2 容器中的所有元素，但前提是它们具有相同的长度和类型。\n\n\n\n另外，在 &lt;array&gt; 头文件中还重载了 get() 全局函数，该重载函数的功能是访问容器中指定的元素，并返回该元素的引用。\n#include &lt;iostream&gt;\n&#x2F;&#x2F;需要引入 array 头文件\n#include &lt;array&gt;\nusing namespace std;\nint main()\n&#123;\n    std::array&lt;int, 4&gt; values&#123;&#125;;\n    &#x2F;&#x2F;初始化 values 容器为 &#123;0,1,2,3&#125;\n    for (int i &#x3D; 0; i &lt; values.size(); i++) &#123;\n        values.at(i) &#x3D; i;\n    &#125;\n    &#x2F;&#x2F;使用 get() 重载函数输出指定位置元素\n    cout &lt;&lt; get&lt;3&gt;(values) &lt;&lt; endl;\n    &#x2F;&#x2F;如果容器不为空，则输出容器中所有的元素\n    if (!values.empty()) &#123;\n        for (auto val &#x3D; values.begin(); val &lt; values.end(); val++) &#123;\n            cout &lt;&lt; *val &lt;&lt; &quot; &quot;;\n        &#125;\n    &#125;\n&#125;\narray通过容器名[]的方式直接访问和使用容器中的元素, 但使用这样方式，由于没有做任何边界检查，所以即便使用越界的索引值去访问或存储元素，也不会被检测到。为了能够有效地避免越界访问的情况，可以使用 array 容器提供的 at() 成员函数, 当传给 at() 的索引是一个越界值时，程序会抛出 std::out_of_range 异常。\nSTL vector\narray 实现的是静态数组（容量固定的数组），而 vector 实现的是一个动态数组，即可以进行元素的插入和删除. vector 常被称为向量容器，因为该容器擅长在尾部插入或删除元素，在常量时间内就可以完成，时间复杂度为O(1)；而对于在容器头部或者中部插入或删除元素，则花费时间要长一些（移动元素需要耗费时间），时间复杂度为线性阶O(n)。\nvector的操作:\n\n\n\n函数成员\n函数功能\n\n\n\n\nmax_size()\n返回元素个数的最大值。这通常是一个很大的值，一般是 232-1，所以我们很少会用到这个函数。\n\n\nresize()\n改变实际元素的个数。\n\n\ncapacity()\n返回当前容量。\n\n\nreserve()\n增加容器的容量。\n\n\nshrink _to_fit()\n将内存减少到等于当前元素实际所使用的大小。\n\n\nassign()\n用新元素替换原有内容。\n\n\nswap()\n交换两个容器的所有元素。\n\n\nemplace()\n在指定的位置直接生成一个元素。\n\n\nemplace_back()\n在序列尾部生成一个元素。\n\n\n\nstd::vector&lt;int&gt; demo&#123;1,2&#125;;\n   &#x2F;&#x2F;第一种格式用法\n   demo.insert(demo.begin() + 1, 3);&#x2F;&#x2F;&#123;1,3,2&#125;\n   &#x2F;&#x2F;第二种格式用法\n   demo.insert(demo.end(), 2, 5);&#x2F;&#x2F;&#123;1,3,2,5,5&#125;\n   &#x2F;&#x2F;第三种格式用法\n   std::array&lt;int,3&gt;test&#123; 7,8,9 &#125;;\n   demo.insert(demo.end(), test.begin(), test.end());&#x2F;&#x2F;&#123;1,3,2,5,5,7,8,9&#125;\n   &#x2F;&#x2F;第四种格式用法\n   demo.insert(demo.end(), &#123; 10,11 &#125;);&#x2F;&#x2F;&#123;1,3,2,5,5,7,8,9,10,11&#125;\n&#x2F;&#x2F;emplace() 每次只能插入一个 int 类型元素, emplace效率高于insert\n   demo1.emplace(demo1.begin(), 3);\nSTL deque\ndeque 是 double-ended queue 的缩写，又称双端队列容器。和 vector 不同的是，deque 还擅长在序列头部添加或删除元素，所耗费的时间复杂度也为常数阶O(1). 并且更重要的一点是，deque 容器中存储元素并不能保证所有元素都存储到连续的内存空间中。当需要向序列两端频繁的添加或删除元素时，应首选 deque 容器。\n成员函数内容和Vector基本一致.\n&#x2F;&#x2F;初始化一个空deque容量\ndeque&lt;int&gt;d;\n&#x2F;&#x2F;向d容器中的尾部依次添加 1，2,3\nd.push_back(1); &#x2F;&#x2F;&#123;1&#125;\nd.push_back(2); &#x2F;&#x2F;&#123;1,2&#125;\nd.push_back(3); &#x2F;&#x2F;&#123;1,2,3&#125;\n&#x2F;&#x2F;向d容器的头部添加 0 \nd.push_front(0); &#x2F;&#x2F;&#123;0,1,2,3&#125;\n\n和 array、vector 容器一样，可以采用普通数组访问存储元素的方式，访问 deque 容器中的元素.  如果想有效地避免越界访问，可以使用 deque 模板类提供的 at() 成员函数, 如果想有效地避免越界访问，可以使用 deque 模板类提供的 at() 成员函数.\nd.front() &#x3D; 10;\nd.back() &#x3D; 20;\nSTL list\n又称双向链表容器，即该容器的底层是以双向链表的形式实现的。这意味着，list 容器中的元素可以分散存储在内存空间里，而不是必须存储在一整块连续的内存空间中。每个元素都配备了 2 个指针，分别指向它的前一个元素和后一个元素。其中第一个元素的前向指针总为 null，因为它前面没有元素；同样，尾部元素的后向指针也总为 null。\n\n\n\n\n成员函数\n功能\n\n\n\n\nemplace_front()\n在容器头部生成一个元素。该函数和 push_front() 的功能相同，但效率更高。\n\n\npush_front()\n在容器头部插入一个元素。\n\n\npop_front()\n删除容器头部的一个元素。\n\n\nemplace_back()\n在容器尾部直接生成一个元素。该函数和 push_back() 的功能相同，但效率更高。\n\n\npush_back()\n在容器尾部插入一个元素。\n\n\npop_back()\n删除容器尾部的一个元素。\n\n\nemplace()\n在容器中的指定位置插入元素。该函数和 insert() 功能相同，但效率更高。\n\n\nerase()\n删除容器中一个或某区域内的元素。\n\n\nswap()\n交换两个容器中的元素，必须保证这两个容器中存储的元素类型是相同的。\n\n\nsplice()\n将一个 list 容器中的元素插入到另一个容器的指定位置。\n\n\nremove(val)\n删除容器中所有等于 val 的元素。\n\n\nremove_if()\n删除容器中满足条件的元素。\n\n\nunique()\n删除容器中相邻的重复元素，只保留一个。\n\n\nmerge()\n合并两个事先已排好序的 list 容器，并且合并之后的 list 容器依然是有序的。\n\n\nsort()\n通过更改容器中元素的位置，将它们进行排序。\n\n\nreverse()\n反转容器中元素的顺序。\n\n\n\n和 insert() 成员方法相比，splice() 成员方法的作用对象是其它 list 容器，其功能是将其它 list 容器中的元素添加到当前 list 容器中指定位置处。\n&#x2F;&#x2F; 第一个参数是目标位置, 后面的参数是被移动对象\n&#x2F;&#x2F;创建并初始化 2 个 list 容器\nlist&lt;int&gt; mylist1&#123; 1,2,3,4 &#125;, mylist2&#123;10,20,30&#125;;\nlist&lt;int&gt;::iterator it &#x3D; ++mylist1.begin(); &#x2F;&#x2F;指向 mylist1 容器中的元素 2\n   \n&#x2F;&#x2F;调用第一种语法格式\nmylist1.splice(it, mylist2); &#x2F;&#x2F; mylist1: 1 10 20 30 2 3 4\n                             &#x2F;&#x2F; mylist2:\n                             &#x2F;&#x2F; it 迭代器仍然指向元素 2，只不过容器变为了 mylist1\n&#x2F;&#x2F;调用第二种语法格式，将 it 指向的元素 2 移动到 mylist2.begin() 位置处\nmylist2.splice(mylist2.begin(), mylist1, it);   &#x2F;&#x2F; mylist1: 1 10 20 30 3 4\n                                                &#x2F;&#x2F; mylist2: 2\n                                                &#x2F;&#x2F; it 仍然指向元素 2\n\n&#x2F;&#x2F;调用第三种语法格式，将 [mylist1.begin(),mylist1.end())范围内的元素移动到 mylist.begin() 位置处                  \nmylist2.splice(mylist2.begin(), mylist1, mylist1.begin(), mylist1.end());&#x2F;&#x2F;mylist1:\n                                                                         &#x2F;&#x2F;mylist2:1 10 20 30 3 4 2\nSTL forward_list\nforward_list 是 C++ 11 新添加的一类容器，其底层实现和 list 容器一样，采用的也是链表结构，只不过 forward_list 使用的是单链表，而 list 使用的是双向链表.\n\nforward_list 容器中是不提供 size() 函数的，但如果想要获取 forward_list 容器中存储元素的个数，可以使用头文件 &lt;iterator&gt; 中的 distance() 函数。举个例子：\nstd::forward_list&lt;int&gt; my_words&#123;1,2,3,4&#125;;\nint count &#x3D; std::distance(std::begin(my_words), std::end(my_words));\n并且，forward_list 容器迭代器的移动除了使用 ++ 运算符单步移动，还能使用 advance() 函数.\n&#x2F;&#x2F; 结果: 3,4\nstd::forward_list&lt;int&gt; values&#123;1,2,3,4&#125;;\nauto it &#x3D; values.begin();\nadvance(it, 2);\nwhile (it!&#x3D;values.end())\n&#123;\n    cout &lt;&lt; *it &lt;&lt; &quot; &quot;;\n    ++it;\n&#125;\n关联式容器\n关联式容器存储的是“键值对”形式的数据,  基于各个关联式容器存储数据的特点，只有各个键值对中的键和值全部对应相等时，才能使用 set 和 multiset 关联式容器存储，否则就要选用 map 或者 multimap 关联式容器。\nSTL pair\n考虑到“键值对”并不是普通类型数据，C++ STL 标准库提供了 pair 类模板，其专门用来将 2 个普通元素 first 和 second. pair 类模板定义在&lt;utility&gt;头文件中.\n下面程序演示了以上几种创建 pair 对象的方法:\n&#x2F;&#x2F; 调用构造函数 1，也就是默认构造函数\npair &lt;string, double&gt; pair1;\n&#x2F;&#x2F; 调用第 2 种构造函数\npair &lt;string, string&gt; pair2(&quot;STL教程&quot;,&quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;stl&#x2F;&quot;);  \n&#x2F;&#x2F; 调用拷贝构造函数\npair &lt;string, string&gt; pair3(pair2);\n&#x2F;&#x2F;调用移动构造函数\npair &lt;string, string&gt; pair4(make_pair(&quot;C++教程&quot;, &quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;cplus&#x2F;&quot;));\n&#x2F;&#x2F; 调用第 5 种构造函数\npair &lt;string, string&gt; pair5(string(&quot;Python教程&quot;), string(&quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;python&#x2F;&quot;));\n&lt;utility&gt;头文件中除了提供创建 pair 对象的方法之外，还为 pair 对象重载了 &lt;、&lt;=、&gt;、&gt;=、==、!= 这 6 的运算符，其运算规则是：对于进行比较的 2 个 pair 对象，先比较 pair.first 元素的大小，如果相等则继续比较 pair.second 元素的大小。(二维偏序)\n最后需要指出的是，pair类模板还提供有一个 swap() 成员函数，能够互换 2 个 pair 对象的键值对，其操作成功的前提是这 2 个 pair 对象的键和值的类型要相同.\npair &lt;string, int&gt; pair1(&quot;pair&quot;, 10);                   \npair &lt;string, int&gt; pair2(&quot;pair2&quot;, 20);\n&#x2F;&#x2F;交换 pair1 和 pair2 的键值对\npair1.swap(pair2);\n&#x2F;&#x2F;pair1: pair2 20\n&#x2F;&#x2F;pair2: pair 10\nSTL map\nmap 容器存储的都是 pair 对象，也就是用 pair 类模板创建的键值对。与此同时，在使用 map 容器存储多个键值对时，该容器会自动根据各键值对的键的大小，按照既定的规则进行排序,  根据实际情况的需要，我们可以手动指定 map 容器的排序规则. 使用 map 容器存储的各个键值对，键的值既不能重复也不能被修改。这意味着只要键值对被存储到 map 容器中，其键的值将不能再做任何修改。\n&#x2F;&#x2F;如下语句可以指定升序排列键值\nstd::map&lt;std::string, int, std::greater&lt;std::string&gt; &gt;myMap&#123; &#123;&quot;C语言教程&quot;,10&#125;,&#123;&quot;STL教程&quot;,20&#125; &#125;;\n\n\n\n成员函数\n功能\n\n\n\n\nfind(key)\n在 map 容器中查找键为 key 的键值对，如果成功找到，则返回指向该键值对的双向迭代器；反之，则返回和 end() 方法一样的迭代器。另外，如果 map 容器用 const 限定，则该方法返回的是 const 类型的双向迭代器。\n\n\nlower_bound(key)\n返回一个指向当前 map 容器中第一个大于或等于 key 的键值对的双向迭代器。如果 map 容器用 const 限定，则该方法返回的是 const 类型的双向迭代器。\n\n\nupper_bound(key)\n返回一个指向当前 map 容器中第一个大于 key 的键值对的迭代器。如果 map 容器用 const 限定，则该方法返回的是 const 类型的双向迭代器。\n\n\nequal_range(key)\n该方法返回一个 pair 对象（包含 2 个双向迭代器），其中 pair.first 和 lower_bound() 方法的返回值等价，pair.second 和 upper_bound() 方法的返回值等价。也就是说，该方法将返回一个范围，该范围中包含的键为 key 的键值对（map 容器键值对唯一，因此该范围最多包含一个键值对）。\n\n\nemplace()\n在当前 map 容器中的指定位置处构造新键值对。其效果和插入键值对一样，但效率更高。\n\n\nemplace_hint()\n在本质上和 emplace() 在 map 容器中构造新键值对的方式是一样的，不同之处在于，使用者必须为该方法提供一个指示键值对生成位置的迭代器，并作为该方法的第一个参数。\n\n\ncount(key)\n在当前 map 容器中，查找键为 key 的键值对的个数并返回。注意，由于 map 容器中各键值对的键的值是唯一的，因此该函数的返回值最大为 1。\n\n\n\n\n&#x2F;&#x2F;创建并初始化 map 容器\nstd::map&lt;std::string, std::string&gt;myMap&#123; &#123;&quot;STL教程&quot;,&quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;stl&#x2F;&quot;&#125;,\n                                         &#123;&quot;C语言教程&quot;,&quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;c&#x2F;&quot;&#125;,\n                                         &#123;&quot;Java教程&quot;,&quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;java&#x2F;&quot;&#125; &#125;;\n&#x2F;&#x2F;找到第一个键的值不小于 &quot;Java教程&quot; 的键值对\nauto iter &#x3D; myMap.lower_bound(&quot;Java教程&quot;);\n&#x2F;&#x2F;lower：Java教程 http:&#x2F;&#x2F;c.biancheng.net&#x2F;java&#x2F;\ncout &lt;&lt; &quot;lower：&quot; &lt;&lt; iter-&gt;first &lt;&lt; &quot; &quot; &lt;&lt; iter-&gt;second &lt;&lt; endl;\n\n&#x2F;&#x2F;找到第一个键的值大于 &quot;Java教程&quot; 的键值对\niter &#x3D; myMap.upper_bound(&quot;Java教程&quot;);\n&#x2F;&#x2F;upper：STL教程 http:&#x2F;&#x2F;c.biancheng.net&#x2F;stl&#x2F;\ncout &lt;&lt;&quot;upper：&quot; &lt;&lt; iter-&gt;first &lt;&lt; &quot; &quot; &lt;&lt; iter-&gt;second &lt;&lt; endl;\n和 insert() 方法一样，虽然 emplace_hint() 方法指定了插入键值对的位置，但 map 容器为了保持存储键值对的有序状态，可能会移动其位置。\n&#x2F;&#x2F;创建并初始化 map 容器\nstd::map&lt;string, string&gt;mymap;\n&#x2F;&#x2F;指定在 map 容器插入键值对\nmap&lt;string, string&gt;::iterator iter &#x3D; mymap.emplace_hint(mymap.begin(),&quot;STL教程&quot;, &quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;stl&#x2F;&quot;);\ncout &lt;&lt; iter-&gt;first &lt;&lt; &quot; &quot; &lt;&lt; iter-&gt;second &lt;&lt; endl;\niter &#x3D; mymap.emplace_hint(mymap.begin(), &quot;C语言教程&quot;, &quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;c&#x2F;&quot;);\ncout &lt;&lt; iter-&gt;first &lt;&lt; &quot; &quot; &lt;&lt; iter-&gt;second &lt;&lt; endl;\n&#x2F;&#x2F;插入失败样例\niter &#x3D; mymap.emplace_hint(mymap.begin(), &quot;STL教程&quot;, &quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;java&#x2F;&quot;);\ncout &lt;&lt; iter-&gt;first &lt;&lt; &quot; &quot; &lt;&lt; iter-&gt;second &lt;&lt; endl;\n只有当 map 容器中确实存有包含该指定键的键值对，借助重载的 [ ] 运算符才能成功获取该键对应的值；反之，若当前 map 容器中没有包含该指定键的键值对，则此时使用 [ ] 运算符将不再是访问容器中的元素，而变成了向该 map 容器中增添一个键值对。\nSTL multimap\nmultimap 容器具有和 map 相同的特性，即 multimap 容器也用于存储 pair&lt;const K, T&gt; 类型的键值对（其中 K 表示键的类型，T 表示值的类型），其中各个键值对的键的值不能做修改；并且，该容器也会自行根据键的大小对存储的所有键值对做排序操作。和 map 容器的区别在于，multimap 容器中可以同时存储多（≥2）个键相同的键值对。和 map 容器一样，实现 multimap 容器的类模板也定义在&lt;map&gt;头文件，并位于 std 命名空间中。在某些特定场景中，我们还可以为 multimap 容器自定义排序规则. multimap的操作和成员函数基本与map完全一致. 但和 map 容器相比，multimap 未提供 at() 成员方法，也没有重载 [] 运算符。这意味着，map 容器中通过指定键获取指定指定键值对的方式，将不再适用于 multimap 容器。其实这很好理解，因为 multimap 容器中指定的键可能对应多个键值对，而不再是 1 个。另外，由于maltimap容器可存储多个具有相同键的键值对，因此lower_bound()、upper_bound()、equal_range()以及count()方法经常会用到。\nSTL set\n和 map、multimap 容器不同，使用 set 容器存储的各个键值对，要求键 key 和值 value 必须相等。基于 set 容器的这种特性，当使用 set 容器存储键值对时，只需要为其提供各键值对中的 value 值（也就是 key 的值）即可。set 容器也会自行根据键的大小对存储的键值对进行排序. 使用 set 容器存储的各个元素的值必须各不相同。更重要的是，从语法上讲 set 容器并没有强制对存储元素的类型做 const 修饰，即 set 容器中存储的元素的值是可以修改的。但是，C++ 标准为了防止用户修改容器中元素的值，对所有可能会实现此操作的行为做了限制，使得在正常情况下，用户是无法做到修改 set 容器中元素的值的。\n对于初学者来说，切勿尝试直接修改 set 容器中已存储元素的值，这很有可能破坏 set 容器中元素的有序性，最正确的修改 set 容器中元素值的做法是：先删除该元素，然后再添加一个修改后的元素。\nset的成员函数和multimap基本一致, set 容器类模板中未提供 at() 成员函数，也未对 [] 运算符进行重载。因此，要想访问 set 容器中存储的元素，只能借助 set 容器的迭代器。\nC++ STL 标准库为 set 容器配置的迭代器类型为双向迭代器。这意味着，假设 p 为此类型的迭代器，则其只能进行 ++p、p++、--p、p--、*p 操作，并且 2 个双向迭代器之间做比较，也只能使用 == 或者 != 运算符。\n如果只想遍历 set 容器中指定区域内的部分数据，则可以借助 find()、lower_bound() 以及 upper_bound() 实现。通过调用它们，可以获取一个指向指定元素的迭代器。equal_range(val) 函数的返回值是一个 pair 类型数据，其包含 2 个迭代器，表示 set 容器中和指定参数 val 相等的元素所在的区域，但由于 set 容器中存储的元素各不相等，因此该函数返回的这 2 个迭代器所表示的范围中，最多只会包含 1 个元素。\nSTL multiset\n和 set 容器不同的是，multiset 容器可以存储多个值相同的元素。虽然 multiset 容器和 set 容器拥有的成员方法完全相同，但由于 multiset 容器允许存储多个值相同的元素，因此诸如 count()、find()、lower_bound()、upper_bound()、equal_range()等方法，更常用于 multiset 容器。\nstd::multiset&lt;int&gt; mymultiset&#123;1,2,2,2,3,4,5&#125;;\n&#x2F;&#x2F;multiset size &#x3D; 7\ncout &lt;&lt; &quot;multiset size &#x3D; &quot; &lt;&lt; mymultiset.size() &lt;&lt; endl;\n&#x2F;&#x2F;multiset count(2) &#x3D;3\ncout &lt;&lt; &quot;multiset count(2) &#x3D;&quot; &lt;&lt; mymultiset.count(2) &lt;&lt; endl;\n&#x2F;&#x2F;向容器中添加元素 8\nmymultiset.insert(8);\n&#x2F;&#x2F;删除容器中所有值为 2 的元素\nint num &#x3D; mymultiset.erase(2);\n&#x2F;&#x2F;删除了 3 个元素 2\ncout &lt;&lt; &quot;删除了 &quot; &lt;&lt; num &lt;&lt; &quot; 个元素 2&quot; &lt;&lt; endl;\n&#x2F;&#x2F;输出容器中存储的所有元素 1 3 4 5 8\nfor (auto iter &#x3D; mymultiset.begin(); iter !&#x3D; mymultiset.end(); ++iter) &#123;\n    cout &lt;&lt; *iter &lt;&lt; &quot; &quot;;\n&#125;\n关联式容器自定义排序\n模板库中常用的可供关联容器使用的排序规则为\n同时也可以自定义:\nclass cmp &#123;\npublic:\n    &#x2F;&#x2F;重载 () 运算符\n    bool operator ()(const string &amp;a,const string &amp;b) &#123;\n        &#x2F;&#x2F;按照字符串的长度，做升序排序(即存储的字符串从短到长)\n        return  (a.length() &lt; b.length());\n    &#125;\n&#125;;\nint main() &#123;\n    &#x2F;&#x2F;创建 set 容器，并使用自定义的 cmp 排序规则\n    std::set&lt;string, cmp&gt;myset&#123;&quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;stl&#x2F;&quot;,\n                               &quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;python&#x2F;&quot;,\n                               &quot;http:&#x2F;&#x2F;c.biancheng.net&#x2F;java&#x2F;&quot;&#125;;\n    &#x2F;&#x2F;输出容器中存储的元素\n    for (auto iter &#x3D; myset.begin(); iter !&#x3D; myset.end(); ++iter) &#123;\n            cout &lt;&lt; *iter &lt;&lt; endl;\n    &#125;\n    return 0;\n&#125;\n&#x2F;&#x2F;结果：\n&#x2F;&#x2F;http:&#x2F;&#x2F;c.biancheng.net&#x2F;stl&#x2F;\n&#x2F;&#x2F;http:&#x2F;&#x2F;c.biancheng.net&#x2F;java&#x2F;\n&#x2F;&#x2F;http:&#x2F;&#x2F;c.biancheng.net&#x2F;python&#x2F;\n\n当关联式容器中存储的数据类型为自定义的结构体变量或者类对象时，通过对现有排序规则中所用的关系运算符进行重载，也能实现自定义排序规则的目的。注意，当关联式容器中存储的元素类型为结构体指针变量或者类的指针对象时，只能使用函数对象的方式自定义排序规则，此方法不再适用。\n无序关联式容器\n无序关联式容器，又称哈希容器。和关联式容器一样，此类容器存储的也是键值对元素；不同之处在于，关联式容器默认情况下会对存储的元素做升序排序，而无序关联式容器不会。无序关联式容器擅长通过指定键查找对应的值，而遍历容器中存储元素的效率不如关联式容器。\n关联式容器的底层实现采用的树存储结构，更确切的说是红黑树结构；无序容器的底层实现采用的是哈希表的存储结构, 并且当数据存储位置发生冲突时，解决方法选用的是“链地址法”。\n基于底层实现采用了不同的数据结构，因此和关联式容器相比，无序容器具有以下 2 个特点：\n\n无序容器内部存储的键值对是无序的，各键值对的存储位置取决于该键值对中的键，\n和关联式容器相比，无序容器擅长通过指定键查找对应的值（平均时间复杂度为 O(1)）；但对于使用迭代器遍历容器中存储的元素，无序容器的执行效率则不如关联式容器。\n\n\n\n\n无序容器\n功能\n\n\n\n\nunordered_map\n存储键值对 &lt;key, value&gt; 类型的元素，其中各个键值对键的值不允许重复，且该容器中存储的键值对是无序的。\n\n\nunordered_multimap\n和 unordered_map 唯一的区别在于，该容器允许存储多个键相同的键值对。\n\n\nunordered_set\n不再以键值对的形式存储数据，而是直接存储数据元素本身（当然也可以理解为，该容器存储的全部都是键 key 和值 value 相等的键值对，正因为它们相等，因此只存储 value 即可）。另外，该容器存储的元素不能重复，且容器内部存储的元素也是无序的。\n\n\nunordered_multiset\n和 unordered_set 唯一的区别在于，该容器允许存储值相同的元素。\n\n\n\nunordered_map\nunordered_map 定义在&lt;unordered_map&gt;头文件\n\n\n\n成员方法\n功能\n\n\n\n\nbucket_count()\n返回当前容器底层存储键值对时，使用桶（一个线性链表代表一个桶）的数量。\n\n\nmax_bucket_count()\n返回当前系统中，unordered_map 容器底层最多可以使用多少桶。\n\n\nbucket_size(n)\n返回第 n 个桶中存储键值对的数量。\n\n\nbucket(key)\n返回以 key 为键的键值对所在桶的编号。\n\n\nload_factor()\n返回 unordered_map 容器中当前的负载因子。负载因子，指的是的当前容器中存储键值对的数量（size()）和使用桶数（bucket_count()）的比值，即 load_factor() = size() / bucket_count()。\n\n\nmax_load_factor()\n返回或者设置当前 unordered_map 容器的负载因子。\n\n\nrehash(n)\n将当前容器底层使用桶的数量设置为 n。\n\n\nreserve()\n将存储桶的数量（也就是 bucket_count() 方法的返回值）设置为至少容纳count个元（不超过最大负载因子）所需的数量，并重新整理容器。\n\n\nhash_function()\n返回当前容器使用的哈希函数对象。\n\n\n\nunordered_map 容器类模板中，实现了对 [ ] 运算符的重载，使得我们可以像“利用下标访问普通数组中元素”那样，通过目标键值对的键获取到该键对应的值。如果当前容器中并没有存储以 [ ] 运算符内指定的元素作为键的键值对，则此时 [ ] 运算符的功能将转变为：向当前容器中添加以目标元素为键的键值对.\nSTL unordered_multimap\nunordered_multimap 容器可以存储多个键相等的键值对，而 unordered_map 容器不行。\nSTL unordered_set\nunordered_set 容器，可直译为“无序 set 容器”，即 unordered_set 容器和 set 容器很像，唯一的区别就在于 set 容器会自行对存储的数据进行排序，而 unordered_set 容器不会。实现 unordered_set 容器的模板类定义在&lt;unordered_set&gt;头文件\n总的来说，unordered_set 容器具有以下几个特性：\n\n不再以键值对的形式存储数据，而是直接存储数据的值；\n容器内部存储的各个元素的值都互不相等，且不能被修改。\n不会对内部存储的数据进行排序\n\nSTL unordered_multiset\n和 unordered_set 容器不同的是，unordered_multiset 容器可以同时存储多个值相同的元素，且这些元素会存储到哈希表中同一个桶（本质就是链表）上。\n容器适配器\nSTL 提供了 3 种容器适配器，分别为 stack 栈适配器、queue 队列适配器以及 priority_queue 优先权队列适配器。\n\n\n\n容器适配器\n基础容器筛选条件\n默认使用的基础容器\n\n\n\n\nstack\n基础容器需包含以下成员函数：empty()size()back()push_back()pop_back()满足条件的基础容器有 vector、deque、list。\ndeque\n\n\nqueue\n基础容器需包含以下成员函数：empty()size()front()back()push_back()pop_front()满足条件的基础容器有 deque、list。\ndeque\n\n\npriority_queue\n基础容器需包含以下成员函数：empty()size()front()push_back()pop_back()满足条件的基础容器有vector、deque。\nvector\n\n\n\nSTL stack\nstack 栈适配器是一种单端开口的容器（如图 1 所示），实际上该容器模拟的就是栈存储结构，即无论是向里存数据还是从中取数据，都只能从这一个开口实现操作。\n\n\n\n\n成员函数\n功能\n\n\n\n\nempty()\n当 stack 栈中没有元素时，该成员函数返回 true；反之，返回 false。\n\n\nsize()\n返回 stack 栈中存储元素的个数。\n\n\ntop()\n返回一个栈顶元素的引用，类型为 T&amp;。如果栈为空，程序会报错。\n\n\npush(const T&amp; val)\n先复制 val，再将 val 副本压入栈顶。这是通过调用底层容器的 push_back() 函数完成的。\n\n\npush(T&amp;&amp; obj)\n以移动元素的方式将其压入栈顶。这是通过调用底层容器的有右值引用参数的 push_back() 函数完成的。\n\n\npop()\n弹出栈顶元素。\n\n\nemplace(arg…)\narg… 可以是一个参数，也可以是多个参数，但它们都只用于构造一个对象，并在栈顶直接生成该对象，作为新的栈顶元素。\n\n\nswap(stack &amp; other_stack)\n将两个 stack 适配器中的元素进行互换，需要注意的是，进行互换的 2 个 stack 适配器中存储的元素类型以及底层采用的基础容器类型，都必须相同。\n\n\n\nSTL queue\nqueue 容器适配器有 2 个开口，其中一个开口专门用来输入数据，另一个专门用来输出数据\n\n\n\n\n成员函数\n功能\n\n\n\n\nempty()\n如果 queue 中没有元素的话，返回 true。\n\n\nsize()\n返回 queue 中元素的个数。\n\n\nfront()\n返回 queue 中第一个元素的引用。如果 queue 是常量，就返回一个常引用；如果 queue 为空，返回值是未定义的。\n\n\nback()\n返回 queue 中最后一个元素的引用。如果 queue 是常量，就返回一个常引用；如果 queue 为空，返回值是未定义的。\n\n\npush(const T&amp; obj)\n在 queue 的尾部添加一个元素的副本。这是通过调用底层容器的成员函数 push_back() 来完成的。\n\n\nemplace()\n在 queue 的尾部直接添加一个元素。\n\n\npush(T&amp;&amp; obj)\n以移动的方式在 queue 的尾部添加元素。这是通过调用底层容器的具有右值引用参数的成员函数 push_back() 来完成的。\n\n\npop()\n删除 queue 中的第一个元素。\n\n\nswap(queue &amp;other_queue)\n将两个 queue 容器适配器中的元素进行互换，需要注意的是，进行互换的 2 个 queue 容器适配器中存储的元素类型以及底层采用的基础容器类型，都必须相同。\n\n\n\n和 stack 一样，queue 也没有迭代器，因此访问元素的唯一方式是遍历容器，通过不断移除访问过的元素，去访问下一个元素。\nSTL priority_queue\npriority_queue 容器适配器模拟的也是队列这种存储结构，即使用此容器适配器存储元素只能“从一端进（称为队尾），从另一端出（称为队头）”，且每次只能访问 priority_queue 中位于队头的元素。但是，priority_queue 容器适配器中元素的存和取，遵循的并不是 “First in,First out”（先入先出）原则，而是“First in，Largest out”原则。直白的翻译，指的就是先进队列的元素并不一定先出队列，而是优先级最大的元素最先出队列。使用std::less&lt;T&gt;按照元素值从大到小进行排序，还可以使用std::greater&lt;T&gt;按照元素值从小到大排序，但更多情况下是使用自定义的排序规则。 priority_queue 容器适配器模板位于&lt;queue&gt;头文件中.\n\n\n\n成员函数\n功能\n\n\n\n\nempty()\n如果 priority_queue 为空的话，返回 true；反之，返回 false。\n\n\nsize()\n返回 priority_queue 中存储元素的个数。\n\n\ntop()\n返回 priority_queue 中第一个元素的引用形式。\n\n\npush(const T&amp; obj)\n根据既定的排序规则，将元素 obj 的副本存储到 priority_queue 中适当的位置。\n\n\npush(T&amp;&amp; obj)\n根据既定的排序规则，将元素 obj 移动存储到 priority_queue 中适当的位置。\n\n\nemplace(Args&amp;&amp;… args)\nArgs&amp;&amp;… args 表示构造一个存储类型的元素所需要的数据（对于类对象来说，可能需要多个数据构造出一个对象）。此函数的功能是根据既定的排序规则，在容器适配器适当的位置直接生成该新元素。\n\n\npop()\n移除 priority_queue 容器适配器中第一个元素。\n\n\nswap(priority_queue&amp; other)\n将两个 priority_queue 容器适配器中的元素进行互换，需要注意的是，进行互换的 2 个 priority_queue 容器适配器中存储的元素类型以及底层采用的基础容器类型，都必须相同。\n\n\n\n优先级队列默认使用vector作为其底层存储数据的容器，在vector上又使用了堆算法将vector中元素构造成堆的结构，因此priority_queue就是堆，所有需要用到堆的位置，都可以考虑使用priority_queue。\n","slug":"C-的STL容器","date":"2023-02-24T01:17:03.000Z","categories_index":"清浅集","tags_index":"cpp,stl,编程","author_index":"Gardenia"},{"id":"bd574fe6171333de3ed2c30f7ccd4b99","title":"Nsight Compute使用不完全记录","content":"Nsight Compute使用不完全记录Nsight System是Nvidai推出的一款性能分析工具,  对于高性能计算工作者来说是一个分析利器. 但是网上并没有找到非常清晰的使用指南, 官方文档虽然书写的很清晰, 但是内容过于繁杂, 所以这里记录一下自己的使用经历, 方便自己以后的使用的同时, 希望能给其他朋友做一个参考.\n","slug":"Nsight-Compute使用不完全记录","date":"2023-02-12T03:55:25.000Z","categories_index":"清浅集","tags_index":"GPU,性能测试,profile,roofline","author_index":"Gardenia"},{"id":"00db2d90ca8a806f19e798dced98cccf","title":"CTR prediction","content":"CTR Prediction\n\n\n\n\n\n\n\n\n本文参考:\n[BarsCTR:]: https://arxiv.org/abs/2009.05794\t“《BarsCTR: Open Benchmarking for Click-Through Rate Prediction》”\nClick-through rate (CTR) prediction点击率预测的目标是预测用户点击给定商品的概率。如何提高CTR预测的准确性仍然是一个具有挑战性的研究问题。与其他数据类型(如图像和文本)相比，CTR预测问题中的数据通常采用表格格式，由多个不同字段的数值、类别或多值(或序列)特征组成。样本量通常很大，但特征空间高度稀疏。例如，Google Play中的应用推荐涉及数十亿个样本和数百万个特征。\nCTR预测模型的组成一般来说，CTR预测模型由以下几个关键部分组成:\n\nFeature Embedding: CTR预测的输入实例通常包含三组特征，即，用户简介，项目简介，以及上下文信息. 每组特征都有一些字段，如下所示:\n\n用户简介:年龄、性别、城市、职业、兴趣等\n商品简介:商品ID、类别、标签、品牌、卖家、价格等。\n上下文:工作日、时间、位置、槽位号等。\n\n每个字段中的特征可以是类别、数值或多值的(例如，单个项目的多个标记)。由于大多数特征非常稀疏，经过one-hot或multi-hot编码后形成高维特征空间，通常采用特征嵌入将这些特征映射到低维密集向量中。下面我们总结了类别，数值，多值这三种特征的嵌入过程。\n\n类别：对于类别i,给定one-hot特征向量$x_i$, 嵌入矩阵$V_i \\in R^{d\\times n}$, d是嵌入维度, n是字母表个数(类别个数). 嵌入后的向量是d * 1的. \n数值: 对于数值特征j, 我们有多种嵌入方式:\n通过手动设计(例如，将13 ~ 19岁的年龄分组为青少年)或通过在数字特征上训练决策树(例如，GBDT)，然后将它们以类别特征的方式嵌入;\n给定一个规范化的标量值$x_j$, $e_j &#x3D; v_j x_j, \\quad v_j \\in R^d$是所有特征j共享的嵌入向量; \n除了将每个值存储到一个类别中或为每个数值字段分配一个向量, 还可以利用AutoDis, 一种数值特征嵌入方法，利用元嵌入矩阵对数值特征进行动态类别化和嵌入计算。\n\n\n多值: 对于多值特征h, 每个特征都可以表示为一个序列. $e_h &#x3D; V_h[x_{h_1},x_{h_2},x_{h_3},…,x_{h_k}] \\in R^{d \\times k}$, 其中$x_{h_k}$是一个one-hot向量, k表示序列的最大长度, 嵌入结果$e_h$可以被进一步嵌入为一个d维向量(均值池化&#x2F;求和池化). 进一步的潜在改进是应用序列模型，如DIN中的目标注意力和DIEN中的GRU，来聚合多值行为序列特征。\n\n\nFeature Interaction: 在特征嵌入后，可以直接应用任何分类模型进行CTR预测。然而，对于CTR预测任务，特征之间的相互作用(又称特征连接, feature conjunctions)是提高分类性能的核心。在因子分解机(factorization machines, FM)中指明，内积为捕获成对特征相互作用的简单而有效的方法。自从FM的成功以来，大量的研究都致力于以不同的方式捕捉特征之间的相互作用。自从FM的成功以来，大量的研究都致力于以不同的方式捕捉特征之间的相互作用。此外，目前大多数工作研究一种将显式和隐式特征交互与普通全连接网络(即mlp)结合起来的方法。\n\nLoss Function: 二元交叉熵损失在CTR预测任务中被广泛应用，其定义如下;$$L &#x3D; -\\frac{1}{N}\\Sigma_D (y\\ log\\hat y + (1-y)log(1-\\hat y))$$其中D是有N个样本的数据集, y和$\\hat y$分别表示真实的和估计的点击概率, $\\hat y &#x3D; \\sigma (\\phi (x)),\\quad \\phi(x)$代表模型函数, CTR预测建模的核心在于如何构建模型$\\phi(x)$, 并通过训练数据学习模型参数.\n\n\n经典模型本节详见参考论文\n\nShallow Models: 工业CTR预测任务通常具有大规模的数据。因此，浅层模型因其简单高效而得到了广泛的应用。即使在今天，LR[40]和FM[39]仍然是工业中部署的两个强大的基线模型。(e.g. LR, FM, FFM, HOFM, FwFM, LorentzFM)\nDeep Models: 目前，深度神经网络在CTR预测方面得到了广泛的研究和应用。与浅模型相比，深度模型在利用非线性激活函数捕捉复杂的高阶特征交互方面更强大，通常会产生更好的性能。然而，在实际应用中，效率已成为深度模型规模化的主要瓶颈。(e.g. DNN, CCPM, Wide&amp;Deep, IPNN, DeepCross, NFM, AFM, DeepFM, DCN, xDeepFM, HFM+, FGCNN, AutoInt+, FiGNN, ONN, FiBiNET, AFN+, InterHAt)\n\n","slug":"CTR-prediction","date":"2023-02-09T11:33:09.000Z","categories_index":"索道集","tags_index":"推荐系统,机器学习,神经网络,人工智能","author_index":"Gardenia"},{"id":"3e8302fb4ea7b33282991d202140dabf","title":"Ray学习笔记","content":"Ray学习笔记概念\n\n\n概念\n含义\n\n\n\ntasks\n在Ray中, 任务是很轻量级的, 一个task指的实际上是一个remote函数\n\n\nworker\n可以理解成一个python进程\n\n\nactors\n将task从函数扩展到了类, 当创建一个actor的时候, 同时还会创建一个新的worker, 类的方法被绑定在这个特定的worker上, worker可以访问和修改类的状态\n\n\nobjects\n一个worker或者一个actor实例被创建出来之后就变成了object, 这些object可以存在在集群中的任何位置, 可以通过ref来访问\n\n\nplacement groups\n允许用户跨多个节点自动保留资源, 往往用于两种情况:(1)组调度, 我们需要一组任务同时开始; (2)最大化数据局部性, 减少数据移动的开销\n\n\nenvironment dependencies\n因为tasks或者actors可能在环境中的任何一个节点执行, 所以需要解决不同节点之间的环境依赖问题, 这个问题要么要用户提前在节点上都准备好需要的环境, 或者使用Ray的runtime environments动态安装这些环境.\n\n\n资源管理Ray允许用户指定资源, \n\n","slug":"Ray学习笔记","date":"2022-12-21T09:14:02.000Z","categories_index":"索道集","tags_index":"体系结构,系统管理,计算框架","author_index":"Gardenia"},{"id":"8f43eaf5cbad8c9cb6931b6286625567","title":"弱小和无知不是生存的障碍，傲慢才是","content":"弱小和无知不是生存的障碍，傲慢才是前言在科研的道路上总是有各种各样的心态起伏, 也遇到各种各样的困难, 我希望能够在这里记录下自己一路上的心路历程, 让自己回望来路的时候, 能看到来时的方向.\n2022-12-15\n\n\n\n\n\n\n\n\n弱小和无知不是生存的障碍，傲慢才是。       ——刘慈欣\n刚开始接触科研的时候每天都很焦虑的找课题, 但是一直都没有什么收获, 后来老师给了一个方向, 就在这个方向上摸索, 简单做了几个小实验, 觉得这个方向上可做的事情很多, 明明没读过什么文献, 却冒出了一大堆的想法, 觉得这个也可以, 那个也可以. 现在想想这些想法真的很幼稚. 因为有了课题, 就觉得自己有了方向, 每天也不认真搞科研, 觉得已经有想法的, 随便弄弄就可以发论文, 不着急不着急, 甚至觉得这些东西做出来了就可以发顶会, 所以开始快乐摆烂. 直到后来上手做了几个小实验, 发现这些个想法根本就站不住脚, 而且很多想过的东西其实都已经被实现了. 然后突然觉得, 自己前段时间都是在干什么, 明明没有真正深入的了解过一个领域, 却好高骛远的觉得自己什么都会了. 明明看到多少师兄反复改稿改了几年都没能被顶会接收, 却傲慢的觉得自己一投就中。然后就不可避免的想到大刘的话，“弱小和无知不是生存的障碍，傲慢才是”。\n决定纠正自己着急的心态，不要好高骛远，不要眼高手低，真正多读一些论文，多做一些实验，夯实自己的基础，让学习变得水到渠成。还有要记得自己的初心，读研是为了快乐，是为了探索人类知识的边界，不是为了发论文，永远不要将学习变成一件很功利的事情，因为知识远比那些物质要高贵。\n要记住，一个优秀的成果背后的努力不是简简单单的，需要的汗水，思考，努力，远比你能想象到的要多得多。但也不要害怕，只要在这个过程中，倾注了热情与心血，如论结果如何，都很值得。\n","slug":"弱小和无知不是生存的障碍，傲慢才是","date":"2022-12-15T02:25:21.000Z","categories_index":"陶然集","tags_index":"随笔","author_index":"Gardenia"},{"id":"9545ac9144807f9c422e8abd05cfa9fb","title":"世界没有变糟糕, 只不过是我长大了","content":"世界没有变糟糕, 只不过是我长大了国内疫情全面放开了, 身边的人一个接一个变成阳性, 父母也不能幸免, 所幸症状不是十分严重, 母亲已经没什么严重的症状了, 父亲现在虽然退烧但是浑身疼, 胸胁胀痛, 头痛这些症状都还没有缓解, 哥哥今天也嗓子疼了, 甚至生不出任何一丝侥幸心理, 我们心里都清楚, 跑不掉的, 基本就是阳了. \n 我远在学校回不去家里, 看着他们一个个变阳除了跟着着急什么也做不了, 只能再加紧保护好自己. 学校里也出现了很多阳性, 但是学校彻底放开, 根本管不住这些. 每天看着新闻上的报道完全不知道什么该信什么不该信, 不知道这样的情况什么时候会缓解, 什么时候能变好. 人类会不会永远和新冠共存, 新冠还会不会产生更加难缠的变异, 究竟有没有后遗症, 会不会未来几十年的人类都是病怏怏的. 为什么我的青春岁月里会经历这样的事情, 为什么世界会变成这样……\n","slug":"世界没有变糟糕-只不过是我长大了","date":"2022-12-15T01:55:20.000Z","categories_index":"陶然集","tags_index":"随笔","author_index":"Gardenia"},{"id":"90df758e61e83a191c1ee407e9e9a458","title":"rCUDA学习笔记","content":"rCUDA学习笔记工作背景人CUDA是巴仑西亚理工大学和西班牙海梅一世大学开发的一个工作, 到现在已经有十余年的历史, 并且目前仍在维护. 欧洲的很多工作都是这样子默默无闻, 但是能坚持开发很久的工作, 并且在很久以后突然产生它的用途被大家所瞩目, 这一点真的很值得敬佩. 感觉这样的精神就是我所理解的学者精神.\n主要内容核心思想是类似远程过程调用, 将使用GPU的核函数发送到远程的GPU端供GPU使用, 这样做主要的开销在数据传输的通信上, 作者在文中对数据传输部分做了很大的优化. 但最终的运行效果差强人意, 相对于本地未初始化的节点表现得还挺好的, 但是如果本地已经初始化, 远程还是比不过本地的, \n\n不过思想还是可以借鉴, 将GPU任务发送给目标进程执行, 减少显存的占用同时实现隔离, 但是这样扩展性仍然受限, 有多少个GPU就有多少个进程, 这些进程之间并行执行, 但是进程内部是串行的.\n","slug":"rCUDA学习笔记","date":"2022-12-09T01:31:02.000Z","categories_index":"索道集","tags_index":"体系结构,GPU,CUDA","author_index":"Gardenia"},{"id":"5052b98c38c353e1be9ceb4ccea21b85","title":"2022-11-22随笔","content":"22-11-22随笔最近有一点点不开心, 觉得自己的状态特别拧巴. 课题被同学批评，说问题没有想清楚，怎么做，做什么都没有搞清楚就贸然上手了。说自己搞这个很难出成果，而且基本做不下去，总之就是各种被批评。更难受的是我不知道怎么反驳他们，我很想为自己的课题争取，为他辩解，但是我什么也说不出来，我只觉得他们说的对。我想我应该把不懂的地方问出来，可是又不好意思又不敢。我应该静下心来好好想想同学们的意见，可是心里满满的都是大家的批评，又不能好好去思考究竟是哪里的问题。\n所以就陷入了这样非常拧巴的状态：觉得应该动手去改但是又不真正的去行动；只能坐在这里焦虑不断内耗。\n昨天和同学们聊了一下现在这种状态，大家也是各种安慰，告诉我明天会好的，但是自己觉得心里一直都没有想清楚，我找不到问题的根源，我没办法解决这种心态。仔细想想自己这样的状态应该是因为：\n\n被批评了，心里不开心\n想得太多而做的太少，导致想反驳但是肚子里没有墨水，反驳不出来\n觉得大家说的很对，这个课题做不下去，但是也没有新课题可以做，时间又很紧张了，担心自己毕不了业\n觉得自己不是科研这块料，觉得身边的人都太强了，我不配待在这，我插不上他们的话，他们说的我都不懂，我什么也不会\n明明什么都不会，还装出一副什么都会的样子，想问又不问，故作一副大佬的样子，其实外强中干\n\n那现在就来分析一下每一点，争取解决问题，从最好分析的开始：\n\n第二点：其实解决方案已经列出来了，想的太多而做的太少。想的多了，问题就多了；做的多了，答案就多了。既然觉得可做，既然觉得有办法，那就去做，去动手，去实践，既然觉得他们不对，那就努力去辩驳，去为自己发声！\n\n第四点：还是自己内心戏太足了，只是被批评了一下，有什么就不是这块料的地方呢，以后路还长着呢，怎么能因为一点小挫折就放弃呢。而且大部分人还没有努力到要拼天赋的地步，等你足够努力然后发现自己还是不够敏锐再来评价自己是不是科研这块料，如果你不够努力，你会发现自己不是任何一块料。\n\n第三点：和第二点同解。但是这一点还多了一种心理的因素。但是永远要牢记，学习是为了快乐。学习本身就是足够幸福的过程，享受知识的同时，不要畏惧挑战。各种毕业的评价标准，本质是由整个社会制定的残酷淘汰标准，它可以要求很多人，但如果你不在意，那它也没那么重要。与探索未知的美妙相比，世界上大部分噩运，都不再重要。所以，不管这条路走不走得通，能不能可行，其实也没有那么重要，你做出了重要的探索，这一路上的风景，你都没有错过。\n\n第一点：哪有不被批评的呢。要不是他们，你也不会这样审视自己，也不会更加坚定自己的想法，也不会更加明确问题的方向，要是没有批评，你现在还在浑浑噩噩无所事事呢，多亏了他们，才没让你偏航太远。\n\n第五点：这一点的答案是和同学的聊天中找到的。我现在还是一个二十多岁的年轻人，是一个刚上研一的学生，以前没有科研经历，没有竞赛经历，没读过什么论文，没什么实习经验，什么都不会，实在太正常了。究竟是什么让我觉得自己很厉害呢？究竟是什么让我觉得自己高人一等呢？不能放低自己的姿态，永远以一副高高在上的状态，那就只能永远什么也学不到。放低自己的姿态，允许自己犯错，因为自己本身就不是什么很厉害的人，但这不丢人，因为自己扎实地走在成为很厉害的人的路上。二十多岁什么都不会，总好过三十多岁什么都不会。\n这就好像达克尔效应描述的一样：越是无知的人就越自信。当一个人知识越来越多，自信心会下降，但是突破临界点以后，自信心会回升，但之后不论怎么回升，都不如一开始一无所知时那么自信。即越是知识丰富的人越能意识到自己的不足，也越能发现、承认与学习别人的优点。\n\n\n\n或许现在就是自己走向绝望之谷的过程，也可能是在走向愚昧之巅的过程，但是无论如何，要知道自己的能力是在提升的。我更希望现在的状态是走向绝望之谷的过程，因此，勇于接受自己的无知，勇于向他人学习，才是你应该做的，这个过程，就是成长的过程啊。\n所以，加油呀，就像博客的简介那样，是La La Land里的一句台词\n\n\n\n\n\n\n\n\n\nPeople love what other people are passionate about.                   ——《La La Land》\n","slug":"2022-11-22随笔","date":"2022-11-22T01:48:09.000Z","categories_index":"陶然集","tags_index":"随笔","author_index":"Gardenia"},{"id":"c1c6c992691a014e062c4081c98a903e","title":"为linux设置回收站","content":"为Linux设置回收站昨天手快误删了一个很重要的文件夹, 经过一系列的操作最后发现确实是找不回来了, 所以痛定思痛一定要为Linux搭建一个回收站, 参考了网上很多教程, 现在来记录一下搭建过程.\n原理原理其实很简单, 就是自定义一个回收站文件夹, 然后将删除指令自定义成将文件移动到回收站里, 再设置一个定时来定期清空回收站文件夹.\n操作流程创建回收站文件夹我把回收站创建在我的账号的根目录下了, 并且希望平时隐藏, 所以指令如下\nmkdir ~/.trash\n\n回收站相关的命令进行定义vim ~/.bashrc_trash\n\n创建好bashrc_trash文件之后, 在里面添加如下内容\n# 为rm重定位为trash的命令, 当执行rm的时候自动执行trash函数\nalias rm=trash\n# 同上\nalias r=trash\n# 列出回收站的内容\nalias rl='ls ~/.trash'\n# 撤销删除\nalias ur=undelfile\n\n# 撤销删除, 就是将回收站中的内容移动回去\nundelfile()\n&#123;\n mv -i ~/.trash/\\$@ ./\n&#125;\n\n# 删除, 就是将当前文件夹移到回收站里, 注意mv指令没有-r参数, 所以使用的时候不用rm -rf, 直接rm -f或者rm就可以\ntrash()\n&#123;\n mv $@ ~/.trash/\n&#125;\n\n# 清空回收站, 添加确认操作\ncleartrash()\n&#123;\n read -p \"clear sure?[n]\" confirm;\n [ $confirm == 'y' ] || [ $confirm == 'Y' ] &amp;&amp; /bin/rm -rf ~/.trash/*\n&#125;\n\n# 不需要确认的清空回收站, 用于定时清空, 事实上也可以给cleartrash()配一个参数, 这个以后要是有时间可以再搞一下\nCLEARTRASH()\n&#123;\n /bin/rm -rf ~/.trash/*\n&#125;\n\n将自定义的指令添加到.bashrcvim ~/.bashrc\n\n打开~/.bashrc之后在其中添加如下指令\n# add trash\nif [ ! -f \"~/.bashrc_trash\" ]; then\n    . ~/.bashrc_trash\nfi\n\n这样每次启动一个终端就会自动加载我们自定义的指令\n定期清空文件夹其实到上一步就已经可以使用回收站了, 但是我们希望回收站更完善一点, 能够定时清空回收站, 这样就不用我们手动管理回收站中的内容了, 所以再设置一个定时清空功能. 这个功能要用到crontab 指令, Linux crontab 是用来定期执行程序的命令, -e参数可以执行文字编辑器来设定时程表。首先输入如下指令\ncrontab -e\n\n 之后会进入到&#x2F;tmp&#x2F;crontab.xFcuCa&#x2F;crontab, 这个如果不指定用户默认是为自己的用户配置的.\n之后在里面添加\n0 0 * * 0 CLEARTRASH\n\n这句话的含义是每周日零点清空回收站, 前面的五位数字用来指定时间, 含义如下\n*    *    *    *    *\n-    -    -    -    -\n|    |    |    |    |\n|    |    |    |    +----- 星期中星期几 (0 - 6) (星期天 为0)\n|    |    |    +---------- 月份 (1 - 12) \n|    |    +--------------- 一个月中的第几天 (1 - 31)\n|    +-------------------- 小时 (0 - 23)\n+------------------------- 分钟 (0 - 59)\n\n那么到此位置我们回收站的配置就完成了, 其实还有更好的方式, 可以让回收站定期清空指定日期以前的数据, 这样安全性会更好一点, 如果以后有时间, 我们就再折腾一下那个方案, 现在的版本也可以实现一个较为安全的rm操作, 妈妈再也不用担心我手快啦!\n","slug":"为linux设置回收站","date":"2022-11-21T03:12:03.000Z","categories_index":"清浅录","tags_index":"Linux,系统管理","author_index":"Gardenia"},{"id":"0f7d08163e7123e37a424c72e1969a8c","title":"RDMA技术解读","content":"RDMA技术解读本文参考技术蛋老师讲解RDMA的视频, It_server技术分享的视频侵删\n传统Socket通信\n用户将应用发送出去, 需要先到操作系统内核, 再到网络接口, 然后在接收方收到信息再次经过操作系统内核, 并在用户态分析数据.\nRDMA通信模式\n绕过内核态, 直接发送数据给硬件. 可以满足高带宽, 低延迟, 低CPU消耗的需求.\nRDMA可以释放CPU的负载, 减少数据拷贝, 内存访问, 实现零拷贝和内核旁路.\n\n零拷贝:应用程序能够直接执行数据传输, 无需涉及到网络软件栈的情况下, 数据能够被直接发送到缓冲区或者能够直接从缓冲区里被接收\n内核旁路: 应用程序可以直接在用户态执行数据传输, 不需要在内核态与用户态之间做上下文切换\n\nIBRDMA的原生网络协议, 通过专用硬件实现最优的性能, 但是由于专用硬件的原因, InifiniBand要求从L到L4 需要使用自己专用的硬件, 设备成本非常高\nRoCERDMA跑在以太网上的一种网络, RoCE v1还没有摆脱Infiniband的束缚, RoCE v2使用UDP+IP, 既可以使用以太网交换机, 可以兼容现有以太网, IP协议使得数据可以被路由.\n\niWARP可以更大规模的部署和组网, iWARP是基于TCP的, 传统的iWARP厂商实现时需要兼容的完整的协议栈, 设计和实现成本很高, 不需要交换机支持无损以太网传输, 虽然适用于当前的互联网传输, 但是性能比RoCE要差.\n\n","slug":"RDMA技术解读","date":"2022-11-18T13:11:09.000Z","categories_index":"清浅录","tags_index":"体系结构,网络","author_index":"Gardenia"},{"id":"3b2b2b9349423fdf4e4b627bcefbcbd6","title":"Reproducibility Badges","content":"Reproducibility Badges最近SC22正在如火如荼地进行, 作为一个科研小白, 我也有简单地远程围观这次会议. 在阅读SC会议的论文的时候, 我们会发现论文上总是有三个圆形的小标志, 所以不禁好奇这个是个什么东西, 经过一番查阅资料这里简单一下这个标志的含义.\n\n这三个标志是Reproducibility Badges, 也就是再现性徽章. ACM定义了几个再现性徽章，涵盖从轻到强的再现性参与的几个级别，\nArtifacts Evaluated此徽章适用于相关工件已成功完成独立审核的论文。此徽章不需要公开物品。然而，它们确实需要提供给审阅者。区分了两个级别，在任何情况下只能应用其中一个级别.\nArtifacts Evaluated – Functional v1.1与研究相关的人工制品被发现是有记录的、一致的、完整的、可操作的，并且包括适当的验证和确认证据.\n\nArtifacts Evaluated – Reusable v1.1与论文相关的工件的质量大大超过了最小功能。也就是说，它们具有已评估工件的所有质量——功能级别，但除此之外，它们都经过了非常仔细的记录和良好的结构，以便于重用和重新调整用途。特别是，严格遵守研究界对这类文物的规范和标准。\n\nArtifacts Available此徽章适用于相关工件已永久可供检索的论文。\nArtifacts Available v1.1作者创建的与本文相关的工件已放置在可公开访问的档案库中。提供了指向该存储库的DOI或链接以及对象的唯一标识符。\n\nResults Validated此徽章适用于作者以外的个人或团队成功获得论文主要结果的论文。区分两个级别.\nResults Reproduced v1.1\n论文的主要结果是由作者以外的个人或团队进行的后续研究，部分使用作者提供的产品。\nResults Replicated v1.1论文的主要结果是由作者以外的个人或团队在后续研究中独立获得的，没有使用作者提供的产品。\n\n","slug":"Reproducibility-Badges","date":"2022-11-18T06:01:56.000Z","categories_index":"清浅录","tags_index":"conference,SC","author_index":"Gardenia"},{"id":"7bcb9e1af25ded2b038f5286bb791f16","title":"第一篇博客","content":"年轻人的第一篇博客\nGitHub的博客仓库很早就创立了, 但是拖了很久都没有部署. 总是因为各种原因退缩, 这次终于把界面什么的都配置了一下, 算是勉勉强强能看了, 还有很多功能还没有开发, 这些还需要日后一点一点探索, 不过有了GitHub博客也终于向一名合格的程序员迈进了一步, 希望以后能在这里记录一下自己的学习笔记, 日常心得, 生活碎片, 也希望能给浏览到博客的朋友带来一点点帮助.\n\n","slug":"启程","date":"2022-11-09T09:39:28.000Z","categories_index":"陶然集","tags_index":"随笔","author_index":"Gardenia"}]