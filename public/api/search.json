[{"id":"3e8302fb4ea7b33282991d202140dabf","title":"Ray学习笔记","content":"Ray学习笔记\n概念\n\n\n\n概念\n含义\n\n\n\n\ntasks\n在Ray中, 任务是很轻量级的, 一个task指的实际上是一个remote函数\n\n\nworker\n可以理解成一个python进程\n\n\nactors\n将task从函数扩展到了类, 当创建一个actor的时候, 同时还会创建一个新的worker, 类的方法被绑定在这个特定的worker上, worker可以访问和修改类的状态\n\n\nobjects\n一个worker或者一个actor实例被创建出来之后就变成了object, 这些object可以存在在集群中的任何位置, 可以通过ref来访问\n\n\nplacement groups\n允许用户跨多个节点自动保留资源, 往往用于两种情况:(1)组调度, 我们需要一组任务同时开始; (2)最大化数据局部性, 减少数据移动的开销\n\n\nenvironment dependencies\n因为tasks或者actors可能在环境中的任何一个节点执行, 所以需要解决不同节点之间的环境依赖问题, 这个问题要么要用户提前在节点上都准备好需要的环境, 或者使用Ray的runtime environments动态安装这些环境.\n\n\n\n","slug":"Ray学习笔记","date":"2022-12-21T09:14:02.000Z","categories_index":"索道集","tags_index":"体系结构,系统管理,计算框架","author_index":"Gardenia"},{"id":"8f43eaf5cbad8c9cb6931b6286625567","title":"弱小和无知不是生存的障碍，傲慢才是","content":"弱小和无知不是生存的障碍，傲慢才是前言在科研的道路上总是有各种各样的心态起伏, 也遇到各种各样的困难, 我希望能够在这里记录下自己一路上的心路历程, 让自己回望来路的时候, 能看到来时的方向.\n2022-12-15\n\n\n\n\n\n\n\n\n弱小和无知不是生存的障碍，傲慢才是。       ——刘慈欣\n刚开始接触科研的时候每天都很焦虑的找课题, 但是一直都没有什么收获, 后来老师给了一个方向, 就在这个方向上摸索, 简单做了几个小实验, 觉得这个方向上可做的事情很多, 明明没读过什么文献, 却冒出了一大堆的想法, 觉得这个也可以, 那个也可以. 现在想想这些想法真的很幼稚. 因为有了课题, 就觉得自己有了方向, 每天也不认真搞科研, 觉得已经有想法的, 随便弄弄就可以发论文, 不着急不着急, 甚至觉得这些东西做出来了就可以发顶会, 所以开始快乐摆烂. 直到后来上手做了几个小实验, 发现这些个想法根本就站不住脚, 而且很多想过的东西其实都已经被实现了. 然后突然觉得, 自己前段时间都是在干什么, 明明没有真正深入的了解过一个领域, 却好高骛远的觉得自己什么都会了. 明明看到多少师兄反复改稿改了几年都没能被顶会接收, 却傲慢的觉得自己一投就中。然后就不可避免的想到大刘的话，“弱小和无知不是生存的障碍，傲慢才是”。\n决定纠正自己着急的心态，不要好高骛远，不要眼高手低，真正多读一些论文，多做一些实验，夯实自己的基础，让学习变得水到渠成。还有要记得自己的初心，读研是为了快乐，是为了探索人类知识的边界，不是为了发论文，永远不要将学习变成一件很功利的事情，因为知识远比那些物质要高贵。\n要记住，一个优秀的成果背后的努力不是简简单单的，需要的汗水，思考，努力，远比你能想象到的要多得多。但也不要害怕，只要在这个过程中，倾注了热情与心血，如论结果如何，都很值得。\n","slug":"弱小和无知不是生存的障碍，傲慢才是","date":"2022-12-15T02:25:21.000Z","categories_index":"陶然集","tags_index":"随笔","author_index":"Gardenia"},{"id":"9545ac9144807f9c422e8abd05cfa9fb","title":"世界没有变糟糕, 只不过是我长大了","content":"世界没有变糟糕, 只不过是我长大了国内疫情全面放开了, 身边的人一个接一个变成阳性, 父母也不能幸免, 所幸症状不是十分严重, 母亲已经没什么严重的症状了, 父亲现在虽然退烧但是浑身疼, 胸胁胀痛, 头痛这些症状都还没有缓解, 哥哥今天也嗓子疼了, 甚至生不出任何一丝侥幸心理, 我们心里都清楚, 跑不掉的, 基本就是阳了. \n 我远在学校回不去家里, 看着他们一个个变阳除了跟着着急什么也做不了, 只能再加紧保护好自己. 学校里也出现了很多阳性, 但是学校彻底放开, 根本管不住这些. 每天看着新闻上的报道完全不知道什么该信什么不该信, 不知道这样的情况什么时候会缓解, 什么时候能变好. 人类会不会永远和新冠共存, 新冠还会不会产生更加难缠的变异, 究竟有没有后遗症, 会不会未来几十年的人类都是病怏怏的. 为什么我的青春岁月里会经历这样的事情, 为什么世界会变成这样……\n","slug":"世界没有变糟糕-只不过是我长大了","date":"2022-12-15T01:55:20.000Z","categories_index":"陶然集","tags_index":"随笔","author_index":"Gardenia"},{"id":"90df758e61e83a191c1ee407e9e9a458","title":"rCUDA学习笔记","content":"rCUDA学习笔记工作背景人CUDA是巴仑西亚理工大学和西班牙海梅一世大学开发的一个工作, 到现在已经有十余年的历史, 并且目前仍在维护. 欧洲的很多工作都是这样子默默无闻, 但是能坚持开发很久的工作, 并且在很久以后突然产生它的用途被大家所瞩目, 这一点真的很值得敬佩. 感觉这样的精神就是我所理解的学者精神.\n主要内容核心思想是类似远程过程调用, 将使用GPU的核函数发送到远程的GPU端供GPU使用, 这样做主要的开销在数据传输的通信上, 作者在文中对数据传输部分做了很大的优化. 但最终的运行效果差强人意, 相对于本地未初始化的节点表现得还挺好的, 但是如果本地已经初始化, 远程还是比不过本地的, \n\n不过思想还是可以借鉴, 将GPU任务发送给目标进程执行, 减少显存的占用同时实现隔离, 但是这样扩展性仍然受限, 有多少个GPU就有多少个进程, 这些进程之间并行执行, 但是进程内部是串行的.\n","slug":"rCUDA学习笔记","date":"2022-12-09T01:31:02.000Z","categories_index":"索道集","tags_index":"体系结构,GPU,CUDA","author_index":"Gardenia"},{"id":"5052b98c38c353e1be9ceb4ccea21b85","title":"2022-11-22随笔","content":"22-11-22随笔最近有一点点不开心, 觉得自己的状态特别拧巴. 课题被同学批评，说问题没有想清楚，怎么做，做什么都没有搞清楚就贸然上手了。说自己搞这个很难出成果，而且基本做不下去，总之就是各种被批评。更难受的是我不知道怎么反驳他们，我很想为自己的课题争取，为他辩解，但是我什么也说不出来，我只觉得他们说的对。我想我应该把不懂的地方问出来，可是又不好意思又不敢。我应该静下心来好好想想同学们的意见，可是心里满满的都是大家的批评，又不能好好去思考究竟是哪里的问题。\n所以就陷入了这样非常拧巴的状态：觉得应该动手去改但是又不真正的去行动；只能坐在这里焦虑不断内耗。\n昨天和同学们聊了一下现在这种状态，大家也是各种安慰，告诉我明天会好的，但是自己觉得心里一直都没有想清楚，我找不到问题的根源，我没办法解决这种心态。仔细想想自己这样的状态应该是因为：\n\n被批评了，心里不开心\n想得太多而做的太少，导致想反驳但是肚子里没有墨水，反驳不出来\n觉得大家说的很对，这个课题做不下去，但是也没有新课题可以做，时间又很紧张了，担心自己毕不了业\n觉得自己不是科研这块料，觉得身边的人都太强了，我不配待在这，我插不上他们的话，他们说的我都不懂，我什么也不会\n明明什么都不会，还装出一副什么都会的样子，想问又不问，故作一副大佬的样子，其实外强中干\n\n那现在就来分析一下每一点，争取解决问题，从最好分析的开始：\n\n第二点：其实解决方案已经列出来了，想的太多而做的太少。想的多了，问题就多了；做的多了，答案就多了。既然觉得可做，既然觉得有办法，那就去做，去动手，去实践，既然觉得他们不对，那就努力去辩驳，去为自己发声！\n\n第四点：还是自己内心戏太足了，只是被批评了一下，有什么就不是这块料的地方呢，以后路还长着呢，怎么能因为一点小挫折就放弃呢。而且大部分人还没有努力到要拼天赋的地步，等你足够努力然后发现自己还是不够敏锐再来评价自己是不是科研这块料，如果你不够努力，你会发现自己不是任何一块料。\n\n第三点：和第二点同解。但是这一点还多了一种心理的因素。但是永远要牢记，学习是为了快乐。学习本身就是足够幸福的过程，享受知识的同时，不要畏惧挑战。各种毕业的评价标准，本质是由整个社会制定的残酷淘汰标准，它可以要求很多人，但如果你不在意，那它也没那么重要。与探索未知的美妙相比，世界上大部分噩运，都不再重要。所以，不管这条路走不走得通，能不能可行，其实也没有那么重要，你做出了重要的探索，这一路上的风景，你都没有错过。\n\n第一点：哪有不被批评的呢。要不是他们，你也不会这样审视自己，也不会更加坚定自己的想法，也不会更加明确问题的方向，要是没有批评，你现在还在浑浑噩噩无所事事呢，多亏了他们，才没让你偏航太远。\n\n第五点：这一点的答案是和同学的聊天中找到的。我现在还是一个二十多岁的年轻人，是一个刚上研一的学生，以前没有科研经历，没有竞赛经历，没读过什么论文，没什么实习经验，什么都不会，实在太正常了。究竟是什么让我觉得自己很厉害呢？究竟是什么让我觉得自己高人一等呢？不能放低自己的姿态，永远以一副高高在上的状态，那就只能永远什么也学不到。放低自己的姿态，允许自己犯错，因为自己本身就不是什么很厉害的人，但这不丢人，因为自己扎实地走在成为很厉害的人的路上。二十多岁什么都不会，总好过三十多岁什么都不会。\n这就好像达克尔效应描述的一样：越是无知的人就越自信。当一个人知识越来越多，自信心会下降，但是突破临界点以后，自信心会回升，但之后不论怎么回升，都不如一开始一无所知时那么自信。即越是知识丰富的人越能意识到自己的不足，也越能发现、承认与学习别人的优点。\n\n\n\n或许现在就是自己走向绝望之谷的过程，也可能是在走向愚昧之巅的过程，但是无论如何，要知道自己的能力是在提升的。我更希望现在的状态是走向绝望之谷的过程，因此，勇于接受自己的无知，勇于向他人学习，才是你应该做的，这个过程，就是成长的过程啊。\n所以，加油呀，就像博客的简介那样，是La La Land里的一句台词\n\n\n\n\n\n\n\n\n\nPeople love what other people are passionate about.                   ——《La La Land》\n","slug":"2022-11-22随笔","date":"2022-11-22T01:48:09.000Z","categories_index":"陶然集","tags_index":"随笔","author_index":"Gardenia"},{"id":"c1c6c992691a014e062c4081c98a903e","title":"为linux设置回收站","content":"为Linux设置回收站昨天手快误删了一个很重要的文件夹, 经过一系列的操作最后发现确实是找不回来了, 所以痛定思痛一定要为Linux搭建一个回收站, 参考了网上很多教程, 现在来记录一下搭建过程.\n原理原理其实很简单, 就是自定义一个回收站文件夹, 然后将删除指令自定义成将文件移动到回收站里, 再设置一个定时来定期清空回收站文件夹.\n操作流程创建回收站文件夹我把回收站创建在我的账号的根目录下了, 并且希望平时隐藏, 所以指令如下\nmkdir ~/.trash\n\n回收站相关的命令进行定义vim ~/.bashrc_trash\n\n创建好bashrc_trash文件之后, 在里面添加如下内容\n# 为rm重定位为trash的命令, 当执行rm的时候自动执行trash函数\nalias rm=trash\n# 同上\nalias r=trash\n# 列出回收站的内容\nalias rl='ls ~/.trash'\n# 撤销删除\nalias ur=undelfile\n\n# 撤销删除, 就是将回收站中的内容移动回去\nundelfile()\n&#123;\n mv -i ~/.trash/\\$@ ./\n&#125;\n\n# 删除, 就是将当前文件夹移到回收站里, 注意mv指令没有-r参数, 所以使用的时候不用rm -rf, 直接rm -f或者rm就可以\ntrash()\n&#123;\n mv $@ ~/.trash/\n&#125;\n\n# 清空回收站, 添加确认操作\ncleartrash()\n&#123;\n read -p \"clear sure?[n]\" confirm;\n [ $confirm == 'y' ] || [ $confirm == 'Y' ] &amp;&amp; /bin/rm -rf ~/.trash/*\n&#125;\n\n# 不需要确认的清空回收站, 用于定时清空, 事实上也可以给cleartrash()配一个参数, 这个以后要是有时间可以再搞一下\nCLEARTRASH()\n&#123;\n /bin/rm -rf ~/.trash/*\n&#125;\n\n将自定义的指令添加到.bashrcvim ~/.bashrc\n\n打开~/.bashrc之后在其中添加如下指令\n# add trash\nif [ ! -f \"~/.bashrc_trash\" ]; then\n    . ~/.bashrc_trash\nfi\n\n这样每次启动一个终端就会自动加载我们自定义的指令\n定期清空文件夹其实到上一步就已经可以使用回收站了, 但是我们希望回收站更完善一点, 能够定时清空回收站, 这样就不用我们手动管理回收站中的内容了, 所以再设置一个定时清空功能. 这个功能要用到crontab 指令, Linux crontab 是用来定期执行程序的命令, -e参数可以执行文字编辑器来设定时程表。首先输入如下指令\ncrontab -e\n\n 之后会进入到&#x2F;tmp&#x2F;crontab.xFcuCa&#x2F;crontab, 这个如果不指定用户默认是为自己的用户配置的.\n之后在里面添加\n0 0 * * 0 CLEARTRASH\n\n这句话的含义是每周日零点清空回收站, 前面的五位数字用来指定时间, 含义如下\n*    *    *    *    *\n-    -    -    -    -\n|    |    |    |    |\n|    |    |    |    +----- 星期中星期几 (0 - 6) (星期天 为0)\n|    |    |    +---------- 月份 (1 - 12) \n|    |    +--------------- 一个月中的第几天 (1 - 31)\n|    +-------------------- 小时 (0 - 23)\n+------------------------- 分钟 (0 - 59)\n\n那么到此位置我们回收站的配置就完成了, 其实还有更好的方式, 可以让回收站定期清空指定日期以前的数据, 这样安全性会更好一点, 如果以后有时间, 我们就再折腾一下那个方案, 现在的版本也可以实现一个较为安全的rm操作, 妈妈再也不用担心我手快啦!\n","slug":"为linux设置回收站","date":"2022-11-21T03:12:03.000Z","categories_index":"清浅录","tags_index":"Linux,系统管理","author_index":"Gardenia"},{"id":"0f7d08163e7123e37a424c72e1969a8c","title":"RDMA技术解读","content":"RDMA技术解读本文参考技术蛋老师讲解RDMA的视频, It_server技术分享的视频侵删\n传统Socket通信\n用户将应用发送出去, 需要先到操作系统内核, 再到网络接口, 然后在接收方收到信息再次经过操作系统内核, 并在用户态分析数据.\nRDMA通信模式\n绕过内核态, 直接发送数据给硬件. 可以满足高带宽, 低延迟, 低CPU消耗的需求.\nRDMA可以释放CPU的负载, 减少数据拷贝, 内存访问, 实现零拷贝和内核旁路.\n\n零拷贝:应用程序能够直接执行数据传输, 无需涉及到网络软件栈的情况下, 数据能够被直接发送到缓冲区或者能够直接从缓冲区里被接收\n内核旁路: 应用程序可以直接在用户态执行数据传输, 不需要在内核态与用户态之间做上下文切换\n\nIBRDMA的原生网络协议, 通过专用硬件实现最优的性能, 但是由于专用硬件的原因, InifiniBand要求从L到L4 需要使用自己专用的硬件, 设备成本非常高\nRoCERDMA跑在以太网上的一种网络, RoCE v1还没有摆脱Infiniband的束缚, RoCE v2使用UDP+IP, 既可以使用以太网交换机, 可以兼容现有以太网, IP协议使得数据可以被路由.\n\niWARP可以更大规模的部署和组网, iWARP是基于TCP的, 传统的iWARP厂商实现时需要兼容的完整的协议栈, 设计和实现成本很高, 不需要交换机支持无损以太网传输, 虽然适用于当前的互联网传输, 但是性能比RoCE要差.\n\n","slug":"RDMA技术解读","date":"2022-11-18T13:11:09.000Z","categories_index":"清浅录","tags_index":"体系结构,网络","author_index":"Gardenia"},{"id":"3b2b2b9349423fdf4e4b627bcefbcbd6","title":"Reproducibility Badges","content":"Reproducibility Badges最近SC22正在如火如荼地进行, 作为一个科研小白, 我也有简单地远程围观这次会议. 在阅读SC会议的论文的时候, 我们会发现论文上总是有三个圆形的小标志, 所以不禁好奇这个是个什么东西, 经过一番查阅资料这里简单一下这个标志的含义.\n\n这三个标志是Reproducibility Badges, 也就是再现性徽章. ACM定义了几个再现性徽章，涵盖从轻到强的再现性参与的几个级别，\nArtifacts Evaluated此徽章适用于相关工件已成功完成独立审核的论文。此徽章不需要公开物品。然而，它们确实需要提供给审阅者。区分了两个级别，在任何情况下只能应用其中一个级别.\nArtifacts Evaluated – Functional v1.1与研究相关的人工制品被发现是有记录的、一致的、完整的、可操作的，并且包括适当的验证和确认证据.\n\nArtifacts Evaluated – Reusable v1.1与论文相关的工件的质量大大超过了最小功能。也就是说，它们具有已评估工件的所有质量——功能级别，但除此之外，它们都经过了非常仔细的记录和良好的结构，以便于重用和重新调整用途。特别是，严格遵守研究界对这类文物的规范和标准。\n\nArtifacts Available此徽章适用于相关工件已永久可供检索的论文。\nArtifacts Available v1.1作者创建的与本文相关的工件已放置在可公开访问的档案库中。提供了指向该存储库的DOI或链接以及对象的唯一标识符。\n\nResults Validated此徽章适用于作者以外的个人或团队成功获得论文主要结果的论文。区分两个级别.\nResults Reproduced v1.1\n论文的主要结果是由作者以外的个人或团队进行的后续研究，部分使用作者提供的产品。\nResults Replicated v1.1论文的主要结果是由作者以外的个人或团队在后续研究中独立获得的，没有使用作者提供的产品。\n\n","slug":"Reproducibility-Badges","date":"2022-11-18T06:01:56.000Z","categories_index":"清浅录","tags_index":"conference,SC","author_index":"Gardenia"},{"id":"ffa18e133968cd6ccc902d710772d8e1","title":"Optimize Cache","content":"缓存优化方案\n这里总结一些现有的缓存优化方案, 当然还有很多其他的方案, 这里聚焦在我所不熟悉的部分.\nPipelined caches\n实现缓存访问的流水化, 使第一级缓存命中的实际延迟可以分散到多个时钟周期, 从而缩短时钟周期时间, 提高带宽, 但会减缓命中速度.\nMultibanked caches\n将缓存划分成几个相互独立, 支持同时访问的缓存组.\nMerging write buffers\n合并写缓冲区以降低缺失代价, 因为所有存储内容都必须发送到层次结构的下一层次, 所以直写缓存依赖于写缓冲区. 如果写缓冲区为空, 则数据和整个地址被写到缓冲区中, 从处理器的角度来看, 写入操作已经完成. 如果缓冲区中包含其他经过修改的块, 则检查它们的地址, 看新数据的地址是否与写缓冲区中有效项目地址匹配. 如果匹配, 则将新数据与这个项目合并在一起, 这种优化方法成为写合并.\nHardware Prefetching\n在处理器请求项目之前, 预先提取它们. 指令和数据都可以预取. 指令预取通常在缓存外部的硬件中完成,\nCompiler optimizations\n这种技术可以在不改变任何硬件的情况下降低缺失率. 主要分成两个维度: 指令缺失性能改进和数据缺失性能改进.\n\n循环交换: 数据的连续性\n分块: 对于正交访问模式, 可以对子矩阵进行操作.其目的是在缓存中载入的数据被替换之前, 在最大限度上利用它.\n\n编译器优化还可以用来控制预取, 以降低缺失代价或缺失率\n作为硬件预取的替代方案, 可以在处理器需要某一数据之前, 由编译器插入请求该数据的预取指令:\n\n寄存器预取将数据值载入到一个寄存器中\n缓存预取仅将数据载入到缓存中, 而不是寄存器中\n\n","slug":"Optimize-Cache","date":"2022-11-16T07:13:43.000Z","categories_index":"清浅录","tags_index":"课程,体系结构,存储","author_index":"Gardenia"},{"id":"7bcb9e1af25ded2b038f5286bb791f16","title":"第一篇博客","content":"年轻人的第一篇博客\nGitHub的博客仓库很早就创立了, 但是拖了很久都没有部署. 总是因为各种原因退缩, 这次终于把界面什么的都配置了一下, 算是勉勉强强能看了, 还有很多功能还没有开发, 这些还需要日后一点一点探索, 不过有了GitHub博客也终于向一名合格的程序员迈进了一步, 希望以后能在这里记录一下自己的学习笔记, 日常心得, 生活碎片, 也希望能给浏览到博客的朋友带来一点点帮助.\n\n","slug":"启程","date":"2022-11-09T09:39:28.000Z","categories_index":"陶然集","tags_index":"随笔","author_index":"Gardenia"}]